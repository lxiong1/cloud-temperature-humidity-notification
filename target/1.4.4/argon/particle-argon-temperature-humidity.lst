
/home/luexiong/projects/particle-argon-temperature-humidity/target/1.4.4/argon/particle-argon-temperature-humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002950  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016a04  2**0
                  CONTENTS
  4 .data         00000068  2003e34c  000d6970  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b4  2003e3b4  0001e3b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d69d8  000d69d8  000169d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6a00  000d6a00  00016a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ecdbc  00000000  00000000  00016a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001268d  00000000  00000000  001037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002708  00000000  00000000  00115e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003557e  00000000  00000000  00118555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002ba1f  00000000  00000000  0014dad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010bc1b  00000000  00000000  001794f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00020e67  00000000  00000000  0028510d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004ae8  00000000  00000000  002a5f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d350  00000000  00000000  002aaa5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fa7f 	bl	d6534 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fa84 	bl	d654a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e34c 	.word	0x2003e34c
   d404c:	000d6970 	.word	0x000d6970
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b4 	.word	0x2003e3b4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fae9 	bl	d5634 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6968 	.word	0x000d6968
   d4084:	000d6928 	.word	0x000d6928

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f82f 	bl	d40f0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 ba9b 	b.w	d55d0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bbf1 	b.w	d4880 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbf7 	b.w	d4890 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bbf5 	b.w	d4890 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();

void setup() {
  sensor.begin();
   d40b8:	4801      	ldr	r0, [pc, #4]	; (d40c0 <setup+0x8>)
   d40ba:	f000 ba14 	b.w	d44e6 <_ZN15Adafruit_Si70215beginEv>
   d40be:	bf00      	nop
   d40c0:	2003e3b8 	.word	0x2003e3b8

000d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40ca:	b17c      	cbz	r4, d40ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40cc:	6863      	ldr	r3, [r4, #4]
   d40ce:	3b01      	subs	r3, #1
   d40d0:	6063      	str	r3, [r4, #4]
   d40d2:	b95b      	cbnz	r3, d40ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40d4:	6823      	ldr	r3, [r4, #0]
   d40d6:	4620      	mov	r0, r4
   d40d8:	689b      	ldr	r3, [r3, #8]
   d40da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40dc:	68a3      	ldr	r3, [r4, #8]
   d40de:	3b01      	subs	r3, #1
   d40e0:	60a3      	str	r3, [r4, #8]
   d40e2:	b91b      	cbnz	r3, d40ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	68db      	ldr	r3, [r3, #12]
   d40ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d40ec:	4628      	mov	r0, r5
   d40ee:	bd38      	pop	{r3, r4, r5, pc}

000d40f0 <loop>:
}

void loop(void) {
   d40f0:	b510      	push	{r4, lr}
   d40f2:	ed2d 8b02 	vpush	{d8}
  int celsius = sensor.readTemperature();
   d40f6:	4c24      	ldr	r4, [pc, #144]	; (d4188 <loop+0x98>)

void setup() {
  sensor.begin();
}

void loop(void) {
   d40f8:	b088      	sub	sp, #32
  int celsius = sensor.readTemperature();
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 f8ac 	bl	d4258 <_ZN15Adafruit_Si702115readTemperatureEv>
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4100:	4620      	mov	r0, r4
void setup() {
  sensor.begin();
}

void loop(void) {
  int celsius = sensor.readTemperature();
   d4102:	eeb0 8a40 	vmov.f32	s16, s0
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4106:	f000 f861 	bl	d41cc <_ZN15Adafruit_Si702112readHumidityEv>

  Particle.publish("temperature", String(fahrenheit));
   d410a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d410e:	4c1f      	ldr	r4, [pc, #124]	; (d418c <loop+0x9c>)
   d4110:	ee17 1a90 	vmov	r1, s15
   d4114:	2305      	movs	r3, #5
   d4116:	220a      	movs	r2, #10
   d4118:	a804      	add	r0, sp, #16
   d411a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   d411e:	fb91 f1f3 	sdiv	r1, r1, r3
   d4122:	3120      	adds	r1, #32
}

void loop(void) {
  int celsius = sensor.readTemperature();
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4124:	eef0 8a40 	vmov.f32	s17, s0

  Particle.publish("temperature", String(fahrenheit));
   d4128:	f001 fb80 	bl	d582c <_ZN6StringC1Eih>
   d412c:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d412e:	9a04      	ldr	r2, [sp, #16]
   d4130:	4917      	ldr	r1, [pc, #92]	; (d4190 <loop+0xa0>)
   d4132:	f88d 3000 	strb.w	r3, [sp]
   d4136:	a802      	add	r0, sp, #8
   d4138:	233c      	movs	r3, #60	; 0x3c
   d413a:	f001 f8a9 	bl	d5290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d413e:	a803      	add	r0, sp, #12
   d4140:	f7ff ffc0 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4144:	a804      	add	r0, sp, #16
   d4146:	f001 fb19 	bl	d577c <_ZN6StringD1Ev>
  Particle.publish("humidity", String(humidityPercentage));
   d414a:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d414e:	220a      	movs	r2, #10
   d4150:	ee17 1a90 	vmov	r1, s15
   d4154:	a804      	add	r0, sp, #16
   d4156:	f001 fb69 	bl	d582c <_ZN6StringC1Eih>
   d415a:	7823      	ldrb	r3, [r4, #0]
   d415c:	9a04      	ldr	r2, [sp, #16]
   d415e:	490d      	ldr	r1, [pc, #52]	; (d4194 <loop+0xa4>)
   d4160:	f88d 3000 	strb.w	r3, [sp]
   d4164:	a802      	add	r0, sp, #8
   d4166:	233c      	movs	r3, #60	; 0x3c
   d4168:	f001 f892 	bl	d5290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d416c:	a803      	add	r0, sp, #12
   d416e:	f7ff ffa9 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4172:	a804      	add	r0, sp, #16
   d4174:	f001 fb02 	bl	d577c <_ZN6StringD1Ev>
  delay(10000);
   d4178:	f242 7010 	movw	r0, #10000	; 0x2710
   d417c:	f001 fa88 	bl	d5690 <delay>
}
   d4180:	b008      	add	sp, #32
   d4182:	ecbd 8b02 	vpop	{d8}
   d4186:	bd10      	pop	{r4, pc}
   d4188:	2003e3b8 	.word	0x2003e3b8
   d418c:	2003e3c4 	.word	0x2003e3c4
   d4190:	000d6608 	.word	0x000d6608
   d4194:	000d6614 	.word	0x000d6614

000d4198 <_GLOBAL__sub_I_sensor>:
   d4198:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d419a:	4b05      	ldr	r3, [pc, #20]	; (d41b0 <_GLOBAL__sub_I_sensor+0x18>)
   d419c:	2200      	movs	r2, #0
   d419e:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a0:	f000 faba 	bl	d4718 <HAL_Pin_Map>
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d41a4:	4803      	ldr	r0, [pc, #12]	; (d41b4 <_GLOBAL__sub_I_sensor+0x1c>)
  int humidityPercentage = sensor.readHumidity();

  Particle.publish("temperature", String(fahrenheit));
  Particle.publish("humidity", String(humidityPercentage));
  delay(10000);
}
   d41a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d41aa:	f000 b809 	b.w	d41c0 <_ZN15Adafruit_Si7021C1Ev>
   d41ae:	bf00      	nop
   d41b0:	2003e3c4 	.word	0x2003e3c4
   d41b4:	2003e3b8 	.word	0x2003e3b8

000d41b8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d41b8:	6803      	ldr	r3, [r0, #0]
   d41ba:	b2c9      	uxtb	r1, r1
   d41bc:	689b      	ldr	r3, [r3, #8]
   d41be:	4718      	bx	r3

000d41c0 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d41c0:	2240      	movs	r2, #64	; 0x40
   d41c2:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d41c4:	2200      	movs	r2, #0
   d41c6:	6042      	str	r2, [r0, #4]
   d41c8:	6002      	str	r2, [r0, #0]
}
   d41ca:	4770      	bx	lr

000d41cc <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d41cc:	b510      	push	{r4, lr}
   d41ce:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d41d0:	f001 fbf4 	bl	d59bc <_Z19__fetch_global_Wirev>
   d41d4:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d41d8:	f000 fd6e 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d41dc:	f001 fbee 	bl	d59bc <_Z19__fetch_global_Wirev>
   d41e0:	6803      	ldr	r3, [r0, #0]
   d41e2:	21f5      	movs	r1, #245	; 0xf5
   d41e4:	689b      	ldr	r3, [r3, #8]
   d41e6:	4798      	blx	r3
  Wire.endTransmission(false);
   d41e8:	f001 fbe8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d41ec:	2100      	movs	r1, #0
   d41ee:	f000 fd66 	bl	d4cbe <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d41f2:	2019      	movs	r0, #25
   d41f4:	f001 fa4c 	bl	d5690 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d41f8:	f001 fbe0 	bl	d59bc <_Z19__fetch_global_Wirev>
   d41fc:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4200:	2203      	movs	r2, #3
   d4202:	f000 fd50 	bl	d4ca6 <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
   d4206:	f001 fbd9 	bl	d59bc <_Z19__fetch_global_Wirev>
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	695b      	ldr	r3, [r3, #20]
   d420e:	4798      	blx	r3
   d4210:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d4212:	f001 fbd3 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4216:	6803      	ldr	r3, [r0, #0]
   d4218:	695b      	ldr	r3, [r3, #20]
   d421a:	4798      	blx	r3
   d421c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4220:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4222:	f001 fbcb 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4226:	6803      	ldr	r3, [r0, #0]
   d4228:	695b      	ldr	r3, [r3, #20]
   d422a:	4798      	blx	r3

  float humidity = hum;
   d422c:	b2a3      	uxth	r3, r4
   d422e:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d4232:	ed9f 7a06 	vldr	s14, [pc, #24]	; d424c <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d4236:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d423a:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d423e:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d4242:	ed9f 7a03 	vldr	s14, [pc, #12]	; d4250 <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d4246:	eea7 0a87 	vfma.f32	s0, s15, s14
   d424a:	bd10      	pop	{r4, pc}
   d424c:	42fa0000 	.word	0x42fa0000
   d4250:	37800000 	.word	0x37800000
   d4254:	00000000 	.word	0x00000000

000d4258 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d4258:	b510      	push	{r4, lr}
   d425a:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d425c:	f001 fbae 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4260:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4264:	f000 fd28 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d4268:	f001 fba8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d426c:	6803      	ldr	r3, [r0, #0]
   d426e:	21f3      	movs	r1, #243	; 0xf3
   d4270:	689b      	ldr	r3, [r3, #8]
   d4272:	4798      	blx	r3
  Wire.endTransmission(false);
   d4274:	f001 fba2 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4278:	2100      	movs	r1, #0
   d427a:	f000 fd20 	bl	d4cbe <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d427e:	2019      	movs	r0, #25
   d4280:	f001 fa06 	bl	d5690 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4284:	f001 fb9a 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4288:	2203      	movs	r2, #3
   d428a:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d428e:	f000 fd0a 	bl	d4ca6 <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
   d4292:	f001 fb93 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4296:	6803      	ldr	r3, [r0, #0]
   d4298:	695b      	ldr	r3, [r3, #20]
   d429a:	4798      	blx	r3
   d429c:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d429e:	f001 fb8d 	bl	d59bc <_Z19__fetch_global_Wirev>
   d42a2:	6803      	ldr	r3, [r0, #0]
   d42a4:	695b      	ldr	r3, [r3, #20]
   d42a6:	4798      	blx	r3
   d42a8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d42ac:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d42ae:	f001 fb85 	bl	d59bc <_Z19__fetch_global_Wirev>
   d42b2:	6803      	ldr	r3, [r0, #0]
   d42b4:	695b      	ldr	r3, [r3, #20]
   d42b6:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d42b8:	b2a0      	uxth	r0, r4
   d42ba:	ee07 0a90 	vmov	s15, r0
   d42be:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d42c2:	ee17 0a90 	vmov	r0, s15
   d42c6:	f001 fe71 	bl	d5fac <__aeabi_f2d>
   d42ca:	a310      	add	r3, pc, #64	; (adr r3, d430c <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d42cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42d0:	f001 fec0 	bl	d6054 <__aeabi_dmul>
   d42d4:	f002 f8d0 	bl	d6478 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d42d8:	eddf 7a0b 	vldr	s15, [pc, #44]	; d4308 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d42dc:	ee07 0a10 	vmov	s14, r0
   d42e0:	ee67 7a27 	vmul.f32	s15, s14, s15
   d42e4:	ee17 0a90 	vmov	r0, s15
   d42e8:	f001 fe60 	bl	d5fac <__aeabi_f2d>
   d42ec:	a304      	add	r3, pc, #16	; (adr r3, d4300 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d42ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f2:	f001 fcfb 	bl	d5cec <__aeabi_dsub>

  return temperature;
   d42f6:	f002 f8bf 	bl	d6478 <__aeabi_d2f>
}
   d42fa:	ee00 0a10 	vmov	s0, r0
   d42fe:	bd10      	pop	{r4, pc}
   d4300:	cccccccd 	.word	0xcccccccd
   d4304:	40476ccc 	.word	0x40476ccc
   d4308:	37800000 	.word	0x37800000
   d430c:	3d70a3d7 	.word	0x3d70a3d7
   d4310:	4065f70a 	.word	0x4065f70a

000d4314 <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d4314:	b510      	push	{r4, lr}
   d4316:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4318:	f001 fb50 	bl	d59bc <_Z19__fetch_global_Wirev>
   d431c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4320:	f000 fcca 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d4324:	f001 fb4a 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4328:	6803      	ldr	r3, [r0, #0]
   d432a:	21fe      	movs	r1, #254	; 0xfe
   d432c:	689b      	ldr	r3, [r3, #8]
   d432e:	4798      	blx	r3
  Wire.endTransmission();
   d4330:	f001 fb44 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4334:	f000 fcc7 	bl	d4cc6 <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d4338:	2032      	movs	r0, #50	; 0x32
}
   d433a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d433e:	f001 b9a7 	b.w	d5690 <delay>

000d4342 <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d4342:	b510      	push	{r4, lr}
   d4344:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4346:	f001 fb39 	bl	d59bc <_Z19__fetch_global_Wirev>
   d434a:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d434e:	f000 fcb3 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d4352:	f001 fb33 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4356:	2100      	movs	r1, #0
   d4358:	f7ff ff2e 	bl	d41b8 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d435c:	f001 fb2e 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4360:	210f      	movs	r1, #15
   d4362:	f7ff ff29 	bl	d41b8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4366:	f001 fb29 	bl	d59bc <_Z19__fetch_global_Wirev>
   d436a:	f000 fcac 	bl	d4cc6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d436e:	f001 fb25 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4372:	2208      	movs	r2, #8
   d4374:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4378:	f000 fc95 	bl	d4ca6 <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
   d437c:	f001 fb1e 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4380:	6803      	ldr	r3, [r0, #0]
   d4382:	695b      	ldr	r3, [r3, #20]
   d4384:	4798      	blx	r3
   d4386:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4388:	f001 fb18 	bl	d59bc <_Z19__fetch_global_Wirev>
   d438c:	6803      	ldr	r3, [r0, #0]
   d438e:	695b      	ldr	r3, [r3, #20]
   d4390:	4798      	blx	r3
  sernum_a <<= 8;
   d4392:	6823      	ldr	r3, [r4, #0]
   d4394:	021b      	lsls	r3, r3, #8
   d4396:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4398:	f001 fb10 	bl	d59bc <_Z19__fetch_global_Wirev>
   d439c:	6803      	ldr	r3, [r0, #0]
   d439e:	695b      	ldr	r3, [r3, #20]
   d43a0:	4798      	blx	r3
   d43a2:	6823      	ldr	r3, [r4, #0]
   d43a4:	4318      	orrs	r0, r3
   d43a6:	6020      	str	r0, [r4, #0]
  Wire.read();
   d43a8:	f001 fb08 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43ac:	6803      	ldr	r3, [r0, #0]
   d43ae:	695b      	ldr	r3, [r3, #20]
   d43b0:	4798      	blx	r3
  sernum_a <<= 8;
   d43b2:	6823      	ldr	r3, [r4, #0]
   d43b4:	021b      	lsls	r3, r3, #8
   d43b6:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d43b8:	f001 fb00 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43bc:	6803      	ldr	r3, [r0, #0]
   d43be:	695b      	ldr	r3, [r3, #20]
   d43c0:	4798      	blx	r3
   d43c2:	6823      	ldr	r3, [r4, #0]
   d43c4:	4318      	orrs	r0, r3
   d43c6:	6020      	str	r0, [r4, #0]
  Wire.read();
   d43c8:	f001 faf8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43cc:	6803      	ldr	r3, [r0, #0]
   d43ce:	695b      	ldr	r3, [r3, #20]
   d43d0:	4798      	blx	r3
  sernum_a <<= 8;
   d43d2:	6823      	ldr	r3, [r4, #0]
   d43d4:	021b      	lsls	r3, r3, #8
   d43d6:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d43d8:	f001 faf0 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43dc:	6803      	ldr	r3, [r0, #0]
   d43de:	695b      	ldr	r3, [r3, #20]
   d43e0:	4798      	blx	r3
   d43e2:	6823      	ldr	r3, [r4, #0]
   d43e4:	4318      	orrs	r0, r3
   d43e6:	6020      	str	r0, [r4, #0]
  Wire.read();
   d43e8:	f001 fae8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43ec:	6803      	ldr	r3, [r0, #0]
   d43ee:	695b      	ldr	r3, [r3, #20]
   d43f0:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d43f2:	f001 fae3 	bl	d59bc <_Z19__fetch_global_Wirev>
   d43f6:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d43fa:	f000 fc5d 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d43fe:	f001 fadd 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4402:	2100      	movs	r1, #0
   d4404:	f7ff fed8 	bl	d41b8 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d4408:	f001 fad8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d440c:	21c9      	movs	r1, #201	; 0xc9
   d440e:	f7ff fed3 	bl	d41b8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4412:	f001 fad3 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4416:	f000 fc56 	bl	d4cc6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d441a:	f001 facf 	bl	d59bc <_Z19__fetch_global_Wirev>
   d441e:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4422:	2208      	movs	r2, #8
   d4424:	f000 fc3f 	bl	d4ca6 <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
   d4428:	f001 fac8 	bl	d59bc <_Z19__fetch_global_Wirev>
   d442c:	6803      	ldr	r3, [r0, #0]
   d442e:	695b      	ldr	r3, [r3, #20]
   d4430:	4798      	blx	r3
   d4432:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4434:	f001 fac2 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4438:	6803      	ldr	r3, [r0, #0]
   d443a:	695b      	ldr	r3, [r3, #20]
   d443c:	4798      	blx	r3
  sernum_b <<= 8;
   d443e:	6863      	ldr	r3, [r4, #4]
   d4440:	021b      	lsls	r3, r3, #8
   d4442:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4444:	f001 faba 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4448:	6803      	ldr	r3, [r0, #0]
   d444a:	695b      	ldr	r3, [r3, #20]
   d444c:	4798      	blx	r3
   d444e:	6863      	ldr	r3, [r4, #4]
   d4450:	4318      	orrs	r0, r3
   d4452:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4454:	f001 fab2 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4458:	6803      	ldr	r3, [r0, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	4798      	blx	r3
  sernum_b <<= 8;
   d445e:	6863      	ldr	r3, [r4, #4]
   d4460:	021b      	lsls	r3, r3, #8
   d4462:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4464:	f001 faaa 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4468:	6803      	ldr	r3, [r0, #0]
   d446a:	695b      	ldr	r3, [r3, #20]
   d446c:	4798      	blx	r3
   d446e:	6863      	ldr	r3, [r4, #4]
   d4470:	4318      	orrs	r0, r3
   d4472:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4474:	f001 faa2 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4478:	6803      	ldr	r3, [r0, #0]
   d447a:	695b      	ldr	r3, [r3, #20]
   d447c:	4798      	blx	r3
  sernum_b <<= 8;
   d447e:	6863      	ldr	r3, [r4, #4]
   d4480:	021b      	lsls	r3, r3, #8
   d4482:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4484:	f001 fa9a 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4488:	6803      	ldr	r3, [r0, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	4798      	blx	r3
   d448e:	6863      	ldr	r3, [r4, #4]
   d4490:	4318      	orrs	r0, r3
   d4492:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4494:	f001 fa92 	bl	d59bc <_Z19__fetch_global_Wirev>
   d4498:	6803      	ldr	r3, [r0, #0]
}
   d449a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d449e:	695b      	ldr	r3, [r3, #20]
   d44a0:	4718      	bx	r3

000d44a2 <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d44a2:	b538      	push	{r3, r4, r5, lr}
   d44a4:	4604      	mov	r4, r0
   d44a6:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d44a8:	f001 fa88 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44ac:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d44b0:	f000 fc02 	bl	d4cb8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d44b4:	f001 fa82 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44b8:	6803      	ldr	r3, [r0, #0]
   d44ba:	4629      	mov	r1, r5
   d44bc:	689b      	ldr	r3, [r3, #8]
   d44be:	4798      	blx	r3
  Wire.endTransmission(false);
   d44c0:	f001 fa7c 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44c4:	2100      	movs	r1, #0
   d44c6:	f000 fbfa 	bl	d4cbe <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d44ca:	f001 fa77 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44ce:	2201      	movs	r2, #1
   d44d0:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d44d4:	f000 fbe7 	bl	d4ca6 <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
   d44d8:	f001 fa70 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44dc:	6803      	ldr	r3, [r0, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d44e2:	b2c0      	uxtb	r0, r0
   d44e4:	bd38      	pop	{r3, r4, r5, pc}

000d44e6 <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d44e6:	b510      	push	{r4, lr}
   d44e8:	4604      	mov	r4, r0
  Wire.begin();
   d44ea:	f001 fa67 	bl	d59bc <_Z19__fetch_global_Wirev>
   d44ee:	f000 fbcb 	bl	d4c88 <_ZN7TwoWire5beginEv>

  reset();
   d44f2:	4620      	mov	r0, r4
   d44f4:	f7ff ff0e 	bl	d4314 <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d44f8:	21e7      	movs	r1, #231	; 0xe7
   d44fa:	4620      	mov	r0, r4
   d44fc:	f7ff ffd1 	bl	d44a2 <_ZN15Adafruit_Si702113readRegister8Eh>
   d4500:	283a      	cmp	r0, #58	; 0x3a
   d4502:	d104      	bne.n	d450e <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d4504:	4620      	mov	r0, r4
   d4506:	f7ff ff1c 	bl	d4342 <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d450a:	2001      	movs	r0, #1
   d450c:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d450e:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d4510:	bd10      	pop	{r4, pc}

000d4512 <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
   d4512:	f000 b901 	b.w	d4718 <HAL_Pin_Map>
	...

000d4518 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_USB_USART_Init+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	681b      	ldr	r3, [r3, #0]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003024c 	.word	0x0003024c

000d4528 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_USB_USART_Available_Data+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	691b      	ldr	r3, [r3, #16]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003024c 	.word	0x0003024c

000d4538 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	695b      	ldr	r3, [r3, #20]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003024c 	.word	0x0003024c

000d4548 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_USB_USART_Receive_Data+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	699b      	ldr	r3, [r3, #24]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003024c 	.word	0x0003024c

000d4558 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_USB_USART_Send_Data+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	69db      	ldr	r3, [r3, #28]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003024c 	.word	0x0003024c

000d4568 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_USB_USART_Flush_Data+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a1b      	ldr	r3, [r3, #32]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	0003024c 	.word	0x0003024c

000d4578 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_I2C_Begin+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	68db      	ldr	r3, [r3, #12]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030228 	.word	0x00030228

000d4588 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_I2C_Request_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	695b      	ldr	r3, [r3, #20]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030228 	.word	0x00030228

000d4598 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_I2C_Begin_Transmission+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	699b      	ldr	r3, [r3, #24]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030228 	.word	0x00030228

000d45a8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_I2C_End_Transmission+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	69db      	ldr	r3, [r3, #28]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030228 	.word	0x00030228

000d45b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_I2C_Write_Data+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6a1b      	ldr	r3, [r3, #32]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030228 	.word	0x00030228

000d45c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_I2C_Available_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030228 	.word	0x00030228

000d45d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_I2C_Read_Data+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030228 	.word	0x00030228

000d45e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_I2C_Peek_Data+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030228 	.word	0x00030228

000d45f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_I2C_Flush_Data+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030228 	.word	0x00030228

000d4608 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_I2C_Init+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030228 	.word	0x00030228

000d4618 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Init+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USART_Write_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	68db      	ldr	r3, [r3, #12]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USART_Available_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USART_Read_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003023c 	.word	0x0003023c

000d4658 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USART_Peek_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	699b      	ldr	r3, [r3, #24]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003023c 	.word	0x0003023c

000d4668 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USART_Flush_Data+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003023c 	.word	0x0003023c

000d4678 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USART_Available_Data_For_Write+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003023c 	.word	0x0003023c

000d4688 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <inet_inet_ntop+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	695b      	ldr	r3, [r3, #20]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030264 	.word	0x00030264

000d4698 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <os_thread_is_current+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030248 	.word	0x00030248

000d46a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <os_thread_join+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	691b      	ldr	r3, [r3, #16]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030248 	.word	0x00030248

000d46b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <os_thread_cleanup+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030248 	.word	0x00030248

000d46c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <os_mutex_create+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030248 	.word	0x00030248

000d46d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <os_mutex_recursive_create+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030248 	.word	0x00030248

000d46e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_RNG_GetRandomNumber+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	685b      	ldr	r3, [r3, #4]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030218 	.word	0x00030218

000d46f8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	695b      	ldr	r3, [r3, #20]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030218 	.word	0x00030218

000d4708 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_SPI_Init+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	69db      	ldr	r3, [r3, #28]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030230 	.word	0x00030230

000d4718 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_Pin_Map+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	681b      	ldr	r3, [r3, #0]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003022c 	.word	0x0003022c

000d4728 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <netdb_freeaddrinfo+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	689b      	ldr	r3, [r3, #8]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030268 	.word	0x00030268

000d4738 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <netdb_getaddrinfo+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	68db      	ldr	r3, [r3, #12]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030268 	.word	0x00030268

000d4748 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <spark_cloud_flag_connected+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030244 	.word	0x00030244

000d4758 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <spark_send_event+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6a1b      	ldr	r3, [r3, #32]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030244 	.word	0x00030244

000d4768 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <spark_set_random_seed_from_cloud_handler+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030244 	.word	0x00030244

000d4778 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <network_connect+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	685b      	ldr	r3, [r3, #4]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030240 	.word	0x00030240

000d4788 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <network_connecting+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	689b      	ldr	r3, [r3, #8]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030240 	.word	0x00030240

000d4798 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <network_disconnect+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	68db      	ldr	r3, [r3, #12]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030240 	.word	0x00030240

000d47a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <network_ready+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	691b      	ldr	r3, [r3, #16]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030240 	.word	0x00030240

000d47b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <network_on+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	695b      	ldr	r3, [r3, #20]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030240 	.word	0x00030240

000d47c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <network_off+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	699b      	ldr	r3, [r3, #24]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030240 	.word	0x00030240

000d47d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <network_listen+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	69db      	ldr	r3, [r3, #28]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030240 	.word	0x00030240

000d47e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <network_listening+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a1b      	ldr	r3, [r3, #32]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030240 	.word	0x00030240

000d47f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <network_set_listen_timeout+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030240 	.word	0x00030240

000d4808 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <network_get_listen_timeout+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030240 	.word	0x00030240

000d4818 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <set_system_mode+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	685b      	ldr	r3, [r3, #4]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030220 	.word	0x00030220

000d4828 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <system_delay_ms+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	695b      	ldr	r3, [r3, #20]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030220 	.word	0x00030220

000d4838 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <application_thread_current+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030220 	.word	0x00030220

000d4848 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <application_thread_invoke+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030220 	.word	0x00030220

000d4858 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b03      	ldr	r3, [pc, #12]	; (d4868 <system_ctrl_set_app_request_handler+0x10>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4862:	9301      	str	r3, [sp, #4]
   d4864:	bd08      	pop	{r3, pc}
   d4866:	0000      	.short	0x0000
   d4868:	00030220 	.word	0x00030220

000d486c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b03      	ldr	r3, [pc, #12]	; (d487c <system_ctrl_set_result+0x10>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4876:	9301      	str	r3, [sp, #4]
   d4878:	bd08      	pop	{r3, pc}
   d487a:	0000      	.short	0x0000
   d487c:	00030220 	.word	0x00030220

000d4880 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <malloc+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	681b      	ldr	r3, [r3, #0]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003021c 	.word	0x0003021c

000d4890 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <free+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	685b      	ldr	r3, [r3, #4]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003021c 	.word	0x0003021c

000d48a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <realloc+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	689b      	ldr	r3, [r3, #8]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003021c 	.word	0x0003021c

000d48b0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <abort+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003021c 	.word	0x0003021c

000d48c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <_malloc_r+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003021c 	.word	0x0003021c

000d48d0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48d0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48d2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48d4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48d6:	b113      	cbz	r3, d48de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48d8:	2203      	movs	r2, #3
   d48da:	4601      	mov	r1, r0
   d48dc:	4798      	blx	r3
    }
   d48de:	4620      	mov	r0, r4
   d48e0:	bd10      	pop	{r4, pc}

000d48e2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d48e2:	2300      	movs	r3, #0
   d48e4:	461a      	mov	r2, r3
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff bf46 	b.w	d4778 <network_connect>

000d48ec <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d48ec:	2200      	movs	r2, #0
   d48ee:	2102      	movs	r1, #2
   d48f0:	6840      	ldr	r0, [r0, #4]
   d48f2:	f7ff bf51 	b.w	d4798 <network_disconnect>

000d48f6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d48f6:	2200      	movs	r2, #0
   d48f8:	4611      	mov	r1, r2
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff bf44 	b.w	d4788 <network_connecting>

000d4900 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4900:	2200      	movs	r2, #0
   d4902:	4611      	mov	r1, r2
   d4904:	6840      	ldr	r0, [r0, #4]
   d4906:	f7ff bf4f 	b.w	d47a8 <network_ready>

000d490a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d490a:	2300      	movs	r3, #0
   d490c:	461a      	mov	r2, r3
   d490e:	4619      	mov	r1, r3
   d4910:	6840      	ldr	r0, [r0, #4]
   d4912:	f7ff bf51 	b.w	d47b8 <network_on>

000d4916 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4916:	2300      	movs	r3, #0
   d4918:	461a      	mov	r2, r3
   d491a:	4619      	mov	r1, r3
   d491c:	6840      	ldr	r0, [r0, #4]
   d491e:	f7ff bf53 	b.w	d47c8 <network_off>

000d4922 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4922:	2200      	movs	r2, #0
   d4924:	f081 0101 	eor.w	r1, r1, #1
   d4928:	6840      	ldr	r0, [r0, #4]
   d492a:	f7ff bf55 	b.w	d47d8 <network_listen>

000d492e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d492e:	2200      	movs	r2, #0
   d4930:	6840      	ldr	r0, [r0, #4]
   d4932:	f7ff bf61 	b.w	d47f8 <network_set_listen_timeout>

000d4936 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4936:	2200      	movs	r2, #0
   d4938:	4611      	mov	r1, r2
   d493a:	6840      	ldr	r0, [r0, #4]
   d493c:	f7ff bf64 	b.w	d4808 <network_get_listen_timeout>

000d4940 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4940:	2200      	movs	r2, #0
   d4942:	4611      	mov	r1, r2
   d4944:	6840      	ldr	r0, [r0, #4]
   d4946:	f7ff bf4f 	b.w	d47e8 <network_listening>

000d494a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d494a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d494e:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4950:	b095      	sub	sp, #84	; 0x54
   d4952:	4616      	mov	r6, r2
   d4954:	460d      	mov	r5, r1
   d4956:	4607      	mov	r7, r0
    IPAddress addr;
   d4958:	f000 fb10 	bl	d4f7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d495c:	4621      	mov	r1, r4
   d495e:	2220      	movs	r2, #32
   d4960:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4962:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4964:	f001 fdf1 	bl	d654a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4968:	2340      	movs	r3, #64	; 0x40
   d496a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d496c:	4621      	mov	r1, r4
   d496e:	466b      	mov	r3, sp
   d4970:	aa0c      	add	r2, sp, #48	; 0x30
   d4972:	4630      	mov	r0, r6
   d4974:	f7ff fee0 	bl	d4738 <netdb_getaddrinfo>
    if (!r) {
   d4978:	4604      	mov	r4, r0
   d497a:	2800      	cmp	r0, #0
   d497c:	d144      	bne.n	d4a08 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d497e:	4602      	mov	r2, r0
   d4980:	2101      	movs	r1, #1
   d4982:	6868      	ldr	r0, [r5, #4]
   d4984:	f7ff ff10 	bl	d47a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4988:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d498a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d498c:	4622      	mov	r2, r4
   d498e:	6868      	ldr	r0, [r5, #4]
   d4990:	f7ff ff0a 	bl	d47a8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4994:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4996:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4998:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d499a:	2e00      	cmp	r6, #0
   d499c:	d034      	beq.n	d4a08 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d499e:	2900      	cmp	r1, #0
   d49a0:	d132      	bne.n	d4a08 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d49a2:	6873      	ldr	r3, [r6, #4]
   d49a4:	2b02      	cmp	r3, #2
   d49a6:	d002      	beq.n	d49ae <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d49a8:	2b0a      	cmp	r3, #10
   d49aa:	d009      	beq.n	d49c0 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d49ac:	e02a      	b.n	d4a04 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d49ae:	f1b8 0f00 	cmp.w	r8, #0
   d49b2:	d027      	beq.n	d4a04 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d49b4:	6971      	ldr	r1, [r6, #20]
   d49b6:	4638      	mov	r0, r7
   d49b8:	3104      	adds	r1, #4
   d49ba:	f000 fb0c 	bl	d4fd6 <_ZN9IPAddressaSEPKh>
   d49be:	e020      	b.n	d4a02 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d49c0:	f1b9 0f00 	cmp.w	r9, #0
   d49c4:	d01e      	beq.n	d4a04 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d49c6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d49c8:	2211      	movs	r2, #17
   d49ca:	a801      	add	r0, sp, #4
   d49cc:	f001 fdbd 	bl	d654a <memset>
                    a.v = 6;
   d49d0:	2306      	movs	r3, #6
   d49d2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d49d6:	ad01      	add	r5, sp, #4
   d49d8:	f104 0308 	add.w	r3, r4, #8
   d49dc:	3418      	adds	r4, #24
   d49de:	6818      	ldr	r0, [r3, #0]
   d49e0:	6859      	ldr	r1, [r3, #4]
   d49e2:	462a      	mov	r2, r5
   d49e4:	c203      	stmia	r2!, {r0, r1}
   d49e6:	3308      	adds	r3, #8
   d49e8:	42a3      	cmp	r3, r4
   d49ea:	4615      	mov	r5, r2
   d49ec:	d1f7      	bne.n	d49de <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d49ee:	a901      	add	r1, sp, #4
   d49f0:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d49f2:	ad07      	add	r5, sp, #28
   d49f4:	f000 fad0 	bl	d4f98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d49f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49fa:	1d3c      	adds	r4, r7, #4
   d49fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49fe:	682b      	ldr	r3, [r5, #0]
   d4a00:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4a02:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4a04:	69f6      	ldr	r6, [r6, #28]
   d4a06:	e7c8      	b.n	d499a <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4a08:	9800      	ldr	r0, [sp, #0]
   d4a0a:	f7ff fe8d 	bl	d4728 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4a0e:	4638      	mov	r0, r7
   d4a10:	b015      	add	sp, #84	; 0x54
   d4a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4a18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a18:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4a1a:	4a03      	ldr	r2, [pc, #12]	; (d4a28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4a1c:	601a      	str	r2, [r3, #0]
   d4a1e:	2200      	movs	r2, #0
   d4a20:	605a      	str	r2, [r3, #4]
   d4a22:	4770      	bx	lr
   d4a24:	2003e3c8 	.word	0x2003e3c8
   d4a28:	000d6628 	.word	0x000d6628

000d4a2c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a2c:	2200      	movs	r2, #0
   d4a2e:	4611      	mov	r1, r2
   d4a30:	6840      	ldr	r0, [r0, #4]
   d4a32:	f7ff bed9 	b.w	d47e8 <network_listening>

000d4a36 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a36:	2200      	movs	r2, #0
   d4a38:	4611      	mov	r1, r2
   d4a3a:	6840      	ldr	r0, [r0, #4]
   d4a3c:	f7ff bee4 	b.w	d4808 <network_get_listen_timeout>

000d4a40 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a40:	2200      	movs	r2, #0
   d4a42:	6840      	ldr	r0, [r0, #4]
   d4a44:	f7ff bed8 	b.w	d47f8 <network_set_listen_timeout>

000d4a48 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a48:	2200      	movs	r2, #0
   d4a4a:	f081 0101 	eor.w	r1, r1, #1
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	f7ff bec2 	b.w	d47d8 <network_listen>

000d4a54 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4a54:	2300      	movs	r3, #0
   d4a56:	461a      	mov	r2, r3
   d4a58:	2101      	movs	r1, #1
   d4a5a:	6840      	ldr	r0, [r0, #4]
   d4a5c:	f7ff beb4 	b.w	d47c8 <network_off>

000d4a60 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a60:	2300      	movs	r3, #0
   d4a62:	461a      	mov	r2, r3
   d4a64:	4619      	mov	r1, r3
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	f7ff bea6 	b.w	d47b8 <network_on>

000d4a6c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a6c:	2200      	movs	r2, #0
   d4a6e:	4611      	mov	r1, r2
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	f7ff be99 	b.w	d47a8 <network_ready>

000d4a76 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a76:	2200      	movs	r2, #0
   d4a78:	4611      	mov	r1, r2
   d4a7a:	6840      	ldr	r0, [r0, #4]
   d4a7c:	f7ff be84 	b.w	d4788 <network_connecting>

000d4a80 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a80:	2200      	movs	r2, #0
   d4a82:	2102      	movs	r1, #2
   d4a84:	6840      	ldr	r0, [r0, #4]
   d4a86:	f7ff be87 	b.w	d4798 <network_disconnect>

000d4a8a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a8a:	2300      	movs	r3, #0
   d4a8c:	461a      	mov	r2, r3
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff be72 	b.w	d4778 <network_connect>

000d4a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4a94:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a96:	4605      	mov	r5, r0
   d4a98:	b188      	cbz	r0, d4abe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a9a:	6804      	ldr	r4, [r0, #0]
   d4a9c:	b14c      	cbz	r4, d4ab2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4a9e:	68a3      	ldr	r3, [r4, #8]
   d4aa0:	b11b      	cbz	r3, d4aaa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4aa2:	2203      	movs	r2, #3
   d4aa4:	4621      	mov	r1, r4
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4aaa:	2110      	movs	r1, #16
   d4aac:	4620      	mov	r0, r4
   d4aae:	f000 ffcc 	bl	d5a4a <_ZdlPvj>
   d4ab2:	4628      	mov	r0, r5
   d4ab4:	2114      	movs	r1, #20
      }
   d4ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4aba:	f000 bfc6 	b.w	d5a4a <_ZdlPvj>
   d4abe:	bd38      	pop	{r3, r4, r5, pc}

000d4ac0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ac0:	b110      	cbz	r0, d4ac8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ac2:	6803      	ldr	r3, [r0, #0]
   d4ac4:	685b      	ldr	r3, [r3, #4]
   d4ac6:	4718      	bx	r3
   d4ac8:	4770      	bx	lr

000d4aca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4aca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4acc:	6803      	ldr	r3, [r0, #0]
   d4ace:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ad0:	b1bb      	cbz	r3, d4b02 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ad2:	6858      	ldr	r0, [r3, #4]
   d4ad4:	f7ff fde0 	bl	d4698 <os_thread_is_current>
   d4ad8:	b978      	cbnz	r0, d4afa <_ZN6ThreadD1Ev+0x30>
   d4ada:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4adc:	7c5a      	ldrb	r2, [r3, #17]
   d4ade:	b912      	cbnz	r2, d4ae6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4ae0:	6858      	ldr	r0, [r3, #4]
   d4ae2:	f7ff fde1 	bl	d46a8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ae6:	6823      	ldr	r3, [r4, #0]
   d4ae8:	6858      	ldr	r0, [r3, #4]
   d4aea:	f7ff fde5 	bl	d46b8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4aee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4af0:	2300      	movs	r3, #0
   d4af2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4af4:	b128      	cbz	r0, d4b02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4af6:	f7ff ffcd 	bl	d4a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4afa:	6820      	ldr	r0, [r4, #0]
   d4afc:	b108      	cbz	r0, d4b02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4afe:	f7ff ffc9 	bl	d4a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4b02:	4620      	mov	r0, r4
   d4b04:	bd10      	pop	{r4, pc}
	...

000d4b08 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4b08:	b538      	push	{r3, r4, r5, lr}
   d4b0a:	4b0c      	ldr	r3, [pc, #48]	; (d4b3c <_ZN5spark9MeshClassD1Ev+0x34>)
   d4b0c:	6003      	str	r3, [r0, #0]
   d4b0e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b10:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4b14:	b108      	cbz	r0, d4b1a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4b16:	f7ff fac4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b1a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4b1e:	b135      	cbz	r5, d4b2e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b20:	4628      	mov	r0, r5
   d4b22:	f7ff ffd2 	bl	d4aca <_ZN6ThreadD1Ev>
   d4b26:	2104      	movs	r1, #4
   d4b28:	4628      	mov	r0, r5
   d4b2a:	f000 ff8e 	bl	d5a4a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b2e:	68a0      	ldr	r0, [r4, #8]
   d4b30:	b108      	cbz	r0, d4b36 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4b32:	f7ff ffc5 	bl	d4ac0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4b36:	4620      	mov	r0, r4
   d4b38:	bd38      	pop	{r3, r4, r5, pc}
   d4b3a:	bf00      	nop
   d4b3c:	000d665c 	.word	0x000d665c

000d4b40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4b40:	b538      	push	{r3, r4, r5, lr}
   d4b42:	4c0e      	ldr	r4, [pc, #56]	; (d4b7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4b44:	4b0e      	ldr	r3, [pc, #56]	; (d4b80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4b46:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4b48:	2500      	movs	r5, #0
   d4b4a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4b4c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4b50:	6063      	str	r3, [r4, #4]
   d4b52:	60a5      	str	r5, [r4, #8]
   d4b54:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b58:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4b5c:	f7ff fdbc 	bl	d46d8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4b60:	4b08      	ldr	r3, [pc, #32]	; (d4b84 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4b62:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b66:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4b6a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	4a06      	ldr	r2, [pc, #24]	; (d4b88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4b70:	4906      	ldr	r1, [pc, #24]	; (d4b8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4b76:	f000 bf63 	b.w	d5a40 <__aeabi_atexit>
   d4b7a:	bf00      	nop
   d4b7c:	2003e3d0 	.word	0x2003e3d0
   d4b80:	000d6628 	.word	0x000d6628
   d4b84:	000d665c 	.word	0x000d665c
   d4b88:	2003e3b4 	.word	0x2003e3b4
   d4b8c:	000d4b09 	.word	0x000d4b09

000d4b90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	4611      	mov	r1, r2
   d4b94:	6840      	ldr	r0, [r0, #4]
   d4b96:	f7ff be07 	b.w	d47a8 <network_ready>

000d4b9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b9a:	2200      	movs	r2, #0
   d4b9c:	4611      	mov	r1, r2
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff be22 	b.w	d47e8 <network_listening>

000d4ba4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ba4:	2200      	movs	r2, #0
   d4ba6:	4611      	mov	r1, r2
   d4ba8:	6840      	ldr	r0, [r0, #4]
   d4baa:	f7ff be2d 	b.w	d4808 <network_get_listen_timeout>

000d4bae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4bae:	2200      	movs	r2, #0
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	f7ff be21 	b.w	d47f8 <network_set_listen_timeout>

000d4bb6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	f081 0101 	eor.w	r1, r1, #1
   d4bbc:	6840      	ldr	r0, [r0, #4]
   d4bbe:	f7ff be0b 	b.w	d47d8 <network_listen>

000d4bc2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4bc2:	2300      	movs	r3, #0
   d4bc4:	461a      	mov	r2, r3
   d4bc6:	4619      	mov	r1, r3
   d4bc8:	6840      	ldr	r0, [r0, #4]
   d4bca:	f7ff bdfd 	b.w	d47c8 <network_off>

000d4bce <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4bce:	2300      	movs	r3, #0
   d4bd0:	461a      	mov	r2, r3
   d4bd2:	4619      	mov	r1, r3
   d4bd4:	6840      	ldr	r0, [r0, #4]
   d4bd6:	f7ff bdef 	b.w	d47b8 <network_on>

000d4bda <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bda:	2200      	movs	r2, #0
   d4bdc:	4611      	mov	r1, r2
   d4bde:	6840      	ldr	r0, [r0, #4]
   d4be0:	f7ff bdd2 	b.w	d4788 <network_connecting>

000d4be4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4be4:	2200      	movs	r2, #0
   d4be6:	2102      	movs	r1, #2
   d4be8:	6840      	ldr	r0, [r0, #4]
   d4bea:	f7ff bdd5 	b.w	d4798 <network_disconnect>

000d4bee <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4bee:	2300      	movs	r3, #0
   d4bf0:	461a      	mov	r2, r3
   d4bf2:	6840      	ldr	r0, [r0, #4]
   d4bf4:	f7ff bdc0 	b.w	d4778 <network_connect>

000d4bf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4bf8:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4bfa:	2204      	movs	r2, #4
   d4bfc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4bfe:	4a02      	ldr	r2, [pc, #8]	; (d4c08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4c00:	601a      	str	r2, [r3, #0]
   d4c02:	4770      	bx	lr
   d4c04:	2003e5a4 	.word	0x2003e5a4
   d4c08:	000d6690 	.word	0x000d6690

000d4c0c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4c0c:	4770      	bx	lr

000d4c0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c10:	4606      	mov	r6, r0
   d4c12:	4615      	mov	r5, r2
   d4c14:	460c      	mov	r4, r1
   d4c16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c18:	42bc      	cmp	r4, r7
   d4c1a:	d006      	beq.n	d4c2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c1c:	6833      	ldr	r3, [r6, #0]
   d4c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c22:	689b      	ldr	r3, [r3, #8]
   d4c24:	4630      	mov	r0, r6
   d4c26:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c28:	e7f6      	b.n	d4c18 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4c2a:	4628      	mov	r0, r5
   d4c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c2e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4c2e:	2200      	movs	r2, #0
   d4c30:	7c00      	ldrb	r0, [r0, #16]
   d4c32:	f7ff bcc1 	b.w	d45b8 <HAL_I2C_Write_Data>

000d4c36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4c36:	2100      	movs	r1, #0
   d4c38:	7c00      	ldrb	r0, [r0, #16]
   d4c3a:	f7ff bcc5 	b.w	d45c8 <HAL_I2C_Available_Data>

000d4c3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4c3e:	2100      	movs	r1, #0
   d4c40:	7c00      	ldrb	r0, [r0, #16]
   d4c42:	f7ff bcc9 	b.w	d45d8 <HAL_I2C_Read_Data>

000d4c46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4c46:	2100      	movs	r1, #0
   d4c48:	7c00      	ldrb	r0, [r0, #16]
   d4c4a:	f7ff bccd 	b.w	d45e8 <HAL_I2C_Peek_Data>

000d4c4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4c4e:	2100      	movs	r1, #0
   d4c50:	7c00      	ldrb	r0, [r0, #16]
   d4c52:	f7ff bcd1 	b.w	d45f8 <HAL_I2C_Flush_Data>

000d4c56 <_ZN7TwoWireD0Ev>:
   d4c56:	b510      	push	{r4, lr}
   d4c58:	2114      	movs	r1, #20
   d4c5a:	4604      	mov	r4, r0
   d4c5c:	f000 fef5 	bl	d5a4a <_ZdlPvj>
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd10      	pop	{r4, pc}

000d4c64 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4c64:	b510      	push	{r4, lr}
   d4c66:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c6c:	4608      	mov	r0, r1
   d4c6e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c70:	2100      	movs	r1, #0
   d4c72:	4b04      	ldr	r3, [pc, #16]	; (d4c84 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4c74:	7420      	strb	r0, [r4, #16]
   d4c76:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4c78:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4c7a:	f7ff fcc5 	bl	d4608 <HAL_I2C_Init>

}
   d4c7e:	4620      	mov	r0, r4
   d4c80:	bd10      	pop	{r4, pc}
   d4c82:	bf00      	nop
   d4c84:	000d66c4 	.word	0x000d66c4

000d4c88 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4c88:	2300      	movs	r3, #0
   d4c8a:	461a      	mov	r2, r3
   d4c8c:	4619      	mov	r1, r3
   d4c8e:	7c00      	ldrb	r0, [r0, #16]
   d4c90:	f7ff bc72 	b.w	d4578 <HAL_I2C_Begin>

000d4c94 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4c94:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4c96:	2400      	movs	r4, #0
   d4c98:	7c00      	ldrb	r0, [r0, #16]
   d4c9a:	9400      	str	r4, [sp, #0]
   d4c9c:	f7ff fc74 	bl	d4588 <HAL_I2C_Request_Data>
  return result;
}
   d4ca0:	b2c0      	uxtb	r0, r0
   d4ca2:	b002      	add	sp, #8
   d4ca4:	bd10      	pop	{r4, pc}

000d4ca6 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4ca6:	2301      	movs	r3, #1
   d4ca8:	b2d2      	uxtb	r2, r2
   d4caa:	b2c9      	uxtb	r1, r1
   d4cac:	f7ff bff2 	b.w	d4c94 <_ZN7TwoWire11requestFromEhhh>

000d4cb0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	7c00      	ldrb	r0, [r0, #16]
   d4cb4:	f7ff bc70 	b.w	d4598 <HAL_I2C_Begin_Transmission>

000d4cb8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4cb8:	b2c9      	uxtb	r1, r1
   d4cba:	f7ff bff9 	b.w	d4cb0 <_ZN7TwoWire17beginTransmissionEh>

000d4cbe <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	7c00      	ldrb	r0, [r0, #16]
   d4cc2:	f7ff bc71 	b.w	d45a8 <HAL_I2C_End_Transmission>

000d4cc6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	f7ff bff9 	b.w	d4cbe <_ZN7TwoWire15endTransmissionEh>

000d4ccc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4ccc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cce:	6883      	ldr	r3, [r0, #8]
   d4cd0:	4604      	mov	r4, r0
   d4cd2:	b90b      	cbnz	r3, d4cd8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4cd4:	f000 febb 	bl	d5a4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cd8:	68c3      	ldr	r3, [r0, #12]
   d4cda:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4cdc:	68a3      	ldr	r3, [r4, #8]
   d4cde:	b11b      	cbz	r3, d4ce8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ce0:	2203      	movs	r2, #3
   d4ce2:	4621      	mov	r1, r4
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4ce8:	4620      	mov	r0, r4
   d4cea:	2110      	movs	r1, #16
}
   d4cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4cf0:	f000 beab 	b.w	d5a4a <_ZdlPvj>

000d4cf4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4cf4:	4770      	bx	lr

000d4cf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cf6:	7441      	strb	r1, [r0, #17]
   d4cf8:	4770      	bx	lr

000d4cfa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4cfa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4cfc:	7c00      	ldrb	r0, [r0, #16]
   d4cfe:	f7ff fcbb 	bl	d4678 <HAL_USART_Available_Data_For_Write>
}
   d4d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d06:	bd08      	pop	{r3, pc}

000d4d08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d08:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d0a:	7c00      	ldrb	r0, [r0, #16]
   d4d0c:	f7ff fc94 	bl	d4638 <HAL_USART_Available_Data>
}
   d4d10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d14:	bd08      	pop	{r3, pc}

000d4d16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4d18:	7c00      	ldrb	r0, [r0, #16]
   d4d1a:	f7ff fc9d 	bl	d4658 <HAL_USART_Peek_Data>
}
   d4d1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d22:	bf28      	it	cs
   d4d24:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d28:	bd08      	pop	{r3, pc}

000d4d2a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d2c:	7c00      	ldrb	r0, [r0, #16]
   d4d2e:	f7ff fc8b 	bl	d4648 <HAL_USART_Read_Data>
}
   d4d32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d36:	bf28      	it	cs
   d4d38:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d3c:	bd08      	pop	{r3, pc}

000d4d3e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d3e:	7c00      	ldrb	r0, [r0, #16]
   d4d40:	f7ff bc92 	b.w	d4668 <HAL_USART_Flush_Data>

000d4d44 <_ZN11USARTSerialD0Ev>:
   d4d44:	b510      	push	{r4, lr}
   d4d46:	2114      	movs	r1, #20
   d4d48:	4604      	mov	r4, r0
   d4d4a:	f000 fe7e 	bl	d5a4a <_ZdlPvj>
   d4d4e:	4620      	mov	r0, r4
   d4d50:	bd10      	pop	{r4, pc}

000d4d52 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d52:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d54:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d56:	4604      	mov	r4, r0
   d4d58:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d5a:	b925      	cbnz	r5, d4d66 <_ZN11USARTSerial5writeEh+0x14>
   d4d5c:	7c00      	ldrb	r0, [r0, #16]
   d4d5e:	f7ff fc8b 	bl	d4678 <HAL_USART_Available_Data_For_Write>
   d4d62:	2800      	cmp	r0, #0
   d4d64:	dd05      	ble.n	d4d72 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d66:	4631      	mov	r1, r6
   d4d68:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d6e:	f7ff bc5b 	b.w	d4628 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d72:	4628      	mov	r0, r5
   d4d74:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4d78:	b510      	push	{r4, lr}
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	4608      	mov	r0, r1
   d4d7e:	4611      	mov	r1, r2
   d4d80:	2200      	movs	r2, #0
   d4d82:	6062      	str	r2, [r4, #4]
   d4d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d88:	60a2      	str	r2, [r4, #8]
   d4d8a:	4a05      	ldr	r2, [pc, #20]	; (d4da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4d8c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4d8e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4d90:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4d92:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4d94:	461a      	mov	r2, r3
   d4d96:	f7ff fc3f 	bl	d4618 <HAL_USART_Init>
}
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	bd10      	pop	{r4, pc}
   d4d9e:	bf00      	nop
   d4da0:	000d66ec 	.word	0x000d66ec

000d4da4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4da4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4da6:	4d0c      	ldr	r5, [pc, #48]	; (d4dd8 <_Z22__fetch_global_Serial1v+0x34>)
   d4da8:	6829      	ldr	r1, [r5, #0]
   d4daa:	f011 0401 	ands.w	r4, r1, #1
   d4dae:	d111      	bne.n	d4dd4 <_Z22__fetch_global_Serial1v+0x30>
   d4db0:	4628      	mov	r0, r5
   d4db2:	f7ff f978 	bl	d40a6 <__cxa_guard_acquire>
   d4db6:	b168      	cbz	r0, d4dd4 <_Z22__fetch_global_Serial1v+0x30>
   d4db8:	4a08      	ldr	r2, [pc, #32]	; (d4ddc <_Z22__fetch_global_Serial1v+0x38>)
   d4dba:	4b09      	ldr	r3, [pc, #36]	; (d4de0 <_Z22__fetch_global_Serial1v+0x3c>)
   d4dbc:	4809      	ldr	r0, [pc, #36]	; (d4de4 <_Z22__fetch_global_Serial1v+0x40>)
   d4dbe:	4621      	mov	r1, r4
   d4dc0:	f7ff ffda 	bl	d4d78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4dc4:	4628      	mov	r0, r5
   d4dc6:	f7ff f973 	bl	d40b0 <__cxa_guard_release>
   d4dca:	4a07      	ldr	r2, [pc, #28]	; (d4de8 <_Z22__fetch_global_Serial1v+0x44>)
   d4dcc:	4907      	ldr	r1, [pc, #28]	; (d4dec <_Z22__fetch_global_Serial1v+0x48>)
   d4dce:	4805      	ldr	r0, [pc, #20]	; (d4de4 <_Z22__fetch_global_Serial1v+0x40>)
   d4dd0:	f000 fe36 	bl	d5a40 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4dd4:	4803      	ldr	r0, [pc, #12]	; (d4de4 <_Z22__fetch_global_Serial1v+0x40>)
   d4dd6:	bd38      	pop	{r3, r4, r5, pc}
   d4dd8:	2003e644 	.word	0x2003e644
   d4ddc:	2003e648 	.word	0x2003e648
   d4de0:	2003e5c0 	.word	0x2003e5c0
   d4de4:	2003e5ac 	.word	0x2003e5ac
   d4de8:	2003e3b4 	.word	0x2003e3b4
   d4dec:	000d4cf5 	.word	0x000d4cf5

000d4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4df0:	680b      	ldr	r3, [r1, #0]
   d4df2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4df4:	b113      	cbz	r3, d4dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4df6:	685a      	ldr	r2, [r3, #4]
   d4df8:	3201      	adds	r2, #1
   d4dfa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4dfc:	4770      	bx	lr

000d4dfe <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dfe:	7441      	strb	r1, [r0, #17]
   d4e00:	4770      	bx	lr

000d4e02 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4e02:	4770      	bx	lr

000d4e04 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4e06:	2100      	movs	r1, #0
   d4e08:	7c00      	ldrb	r0, [r0, #16]
   d4e0a:	f7ff fb9d 	bl	d4548 <HAL_USB_USART_Receive_Data>
}
   d4e0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e12:	bf28      	it	cs
   d4e14:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e18:	bd08      	pop	{r3, pc}

000d4e1a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4e1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4e1c:	2101      	movs	r1, #1
   d4e1e:	7c00      	ldrb	r0, [r0, #16]
   d4e20:	f7ff fb92 	bl	d4548 <HAL_USB_USART_Receive_Data>
}
   d4e24:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e28:	bf28      	it	cs
   d4e2a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e2e:	bd08      	pop	{r3, pc}

000d4e30 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4e30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4e32:	7c00      	ldrb	r0, [r0, #16]
   d4e34:	f7ff fb80 	bl	d4538 <HAL_USB_USART_Available_Data_For_Write>
}
   d4e38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e3c:	bd08      	pop	{r3, pc}

000d4e3e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4e3e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4e40:	7c00      	ldrb	r0, [r0, #16]
   d4e42:	f7ff fb71 	bl	d4528 <HAL_USB_USART_Available_Data>
}
   d4e46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e4a:	bd08      	pop	{r3, pc}

000d4e4c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4e4c:	7c00      	ldrb	r0, [r0, #16]
   d4e4e:	f7ff bb8b 	b.w	d4568 <HAL_USB_USART_Flush_Data>

000d4e52 <_ZN9USBSerialD0Ev>:
   d4e52:	b510      	push	{r4, lr}
   d4e54:	2114      	movs	r1, #20
   d4e56:	4604      	mov	r4, r0
   d4e58:	f000 fdf7 	bl	d5a4a <_ZdlPvj>
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	bd10      	pop	{r4, pc}

000d4e60 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e60:	b538      	push	{r3, r4, r5, lr}
   d4e62:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e64:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e66:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e68:	f7ff fb66 	bl	d4538 <HAL_USB_USART_Available_Data_For_Write>
   d4e6c:	2800      	cmp	r0, #0
   d4e6e:	dc01      	bgt.n	d4e74 <_ZN9USBSerial5writeEh+0x14>
   d4e70:	7c60      	ldrb	r0, [r4, #17]
   d4e72:	b128      	cbz	r0, d4e80 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4e74:	4629      	mov	r1, r5
   d4e76:	7c20      	ldrb	r0, [r4, #16]
   d4e78:	f7ff fb6e 	bl	d4558 <HAL_USB_USART_Send_Data>
   d4e7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4e80:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e84:	b510      	push	{r4, lr}
   d4e86:	4604      	mov	r4, r0
   d4e88:	2300      	movs	r3, #0
   d4e8a:	6063      	str	r3, [r4, #4]
   d4e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e90:	60a3      	str	r3, [r4, #8]
   d4e92:	4b05      	ldr	r3, [pc, #20]	; (d4ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4e94:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4e96:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e98:	4608      	mov	r0, r1
{
  _serial = serial;
   d4e9a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4e9c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4e9e:	4611      	mov	r1, r2
   d4ea0:	f7ff fb3a 	bl	d4518 <HAL_USB_USART_Init>
}
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	bd10      	pop	{r4, pc}
   d4ea8:	000d671c 	.word	0x000d671c

000d4eac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4eac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4eae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4eb0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4eb2:	2100      	movs	r1, #0
   d4eb4:	f001 fb49 	bl	d654a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4eb8:	4620      	mov	r0, r4
   d4eba:	bd10      	pop	{r4, pc}

000d4ebc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4ebc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ebe:	4d0e      	ldr	r5, [pc, #56]	; (d4ef8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4ec0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4ec2:	a801      	add	r0, sp, #4
   d4ec4:	f7ff fff2 	bl	d4eac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ec8:	6829      	ldr	r1, [r5, #0]
   d4eca:	f011 0401 	ands.w	r4, r1, #1
   d4ece:	d110      	bne.n	d4ef2 <_Z16_fetch_usbserialv+0x36>
   d4ed0:	4628      	mov	r0, r5
   d4ed2:	f7ff f8e8 	bl	d40a6 <__cxa_guard_acquire>
   d4ed6:	b160      	cbz	r0, d4ef2 <_Z16_fetch_usbserialv+0x36>
   d4ed8:	aa01      	add	r2, sp, #4
   d4eda:	4621      	mov	r1, r4
   d4edc:	4807      	ldr	r0, [pc, #28]	; (d4efc <_Z16_fetch_usbserialv+0x40>)
   d4ede:	f7ff ffd1 	bl	d4e84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ee2:	4628      	mov	r0, r5
   d4ee4:	f7ff f8e4 	bl	d40b0 <__cxa_guard_release>
   d4ee8:	4a05      	ldr	r2, [pc, #20]	; (d4f00 <_Z16_fetch_usbserialv+0x44>)
   d4eea:	4906      	ldr	r1, [pc, #24]	; (d4f04 <_Z16_fetch_usbserialv+0x48>)
   d4eec:	4803      	ldr	r0, [pc, #12]	; (d4efc <_Z16_fetch_usbserialv+0x40>)
   d4eee:	f000 fda7 	bl	d5a40 <__aeabi_atexit>
	return _usbserial;
}
   d4ef2:	4802      	ldr	r0, [pc, #8]	; (d4efc <_Z16_fetch_usbserialv+0x40>)
   d4ef4:	b007      	add	sp, #28
   d4ef6:	bd30      	pop	{r4, r5, pc}
   d4ef8:	2003e6cc 	.word	0x2003e6cc
   d4efc:	2003e6d0 	.word	0x2003e6d0
   d4f00:	2003e3b4 	.word	0x2003e3b4
   d4f04:	000d4e03 	.word	0x000d4e03

000d4f08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f08:	4770      	bx	lr

000d4f0a <_ZN9IPAddressD0Ev>:
   d4f0a:	b510      	push	{r4, lr}
   d4f0c:	2118      	movs	r1, #24
   d4f0e:	4604      	mov	r4, r0
   d4f10:	f000 fd9b 	bl	d5a4a <_ZdlPvj>
   d4f14:	4620      	mov	r0, r4
   d4f16:	bd10      	pop	{r4, pc}

000d4f18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f1a:	7d03      	ldrb	r3, [r0, #20]
   d4f1c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f1e:	b08d      	sub	sp, #52	; 0x34
   d4f20:	460e      	mov	r6, r1
   d4f22:	f100 0704 	add.w	r7, r0, #4
   d4f26:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f2a:	d002      	beq.n	d4f32 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4f2c:	f100 0508 	add.w	r5, r0, #8
   d4f30:	e018      	b.n	d4f64 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f32:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f34:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f36:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f3a:	232f      	movs	r3, #47	; 0x2f
   d4f3c:	462a      	mov	r2, r5
   d4f3e:	200a      	movs	r0, #10
   d4f40:	f7ff fba2 	bl	d4688 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f44:	4628      	mov	r0, r5
   d4f46:	f001 fb4c 	bl	d65e2 <strlen>
   d4f4a:	6833      	ldr	r3, [r6, #0]
   d4f4c:	4602      	mov	r2, r0
   d4f4e:	68db      	ldr	r3, [r3, #12]
   d4f50:	4629      	mov	r1, r5
   d4f52:	4630      	mov	r0, r6
   d4f54:	4798      	blx	r3
   d4f56:	e00f      	b.n	d4f78 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f58:	b124      	cbz	r4, d4f64 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f5a:	212e      	movs	r1, #46	; 0x2e
   d4f5c:	4630      	mov	r0, r6
   d4f5e:	f000 fbd3 	bl	d5708 <_ZN5Print5printEc>
   d4f62:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4f64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f68:	220a      	movs	r2, #10
   d4f6a:	4630      	mov	r0, r6
   d4f6c:	f000 fbfc 	bl	d5768 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f70:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f72:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f74:	d1f0      	bne.n	d4f58 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f76:	4620      	mov	r0, r4
    }
    return n;
}
   d4f78:	b00d      	add	sp, #52	; 0x34
   d4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f7c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4b05      	ldr	r3, [pc, #20]	; (d4f94 <_ZN9IPAddressC1Ev+0x18>)
   d4f80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f82:	2211      	movs	r2, #17
   d4f84:	f840 3b04 	str.w	r3, [r0], #4
   d4f88:	2100      	movs	r1, #0
   d4f8a:	f001 fade 	bl	d654a <memset>
{
    clear();
}
   d4f8e:	4620      	mov	r0, r4
   d4f90:	bd10      	pop	{r4, pc}
   d4f92:	bf00      	nop
   d4f94:	000d674c 	.word	0x000d674c

000d4f98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f98:	4603      	mov	r3, r0
   d4f9a:	4a07      	ldr	r2, [pc, #28]	; (d4fb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f9c:	b510      	push	{r4, lr}
   d4f9e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4fa2:	f101 0210 	add.w	r2, r1, #16
   d4fa6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4faa:	f843 4b04 	str.w	r4, [r3], #4
   d4fae:	4291      	cmp	r1, r2
   d4fb0:	d1f9      	bne.n	d4fa6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4fb2:	780a      	ldrb	r2, [r1, #0]
   d4fb4:	701a      	strb	r2, [r3, #0]
}
   d4fb6:	bd10      	pop	{r4, pc}
   d4fb8:	000d674c 	.word	0x000d674c

000d4fbc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4fbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4fbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4fc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4fc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4fca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4fce:	2304      	movs	r3, #4
   d4fd0:	6041      	str	r1, [r0, #4]
   d4fd2:	7503      	strb	r3, [r0, #20]
   d4fd4:	bd10      	pop	{r4, pc}

000d4fd6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4fd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4fd8:	780d      	ldrb	r5, [r1, #0]
   d4fda:	788b      	ldrb	r3, [r1, #2]
   d4fdc:	784a      	ldrb	r2, [r1, #1]
   d4fde:	78c9      	ldrb	r1, [r1, #3]
   d4fe0:	9100      	str	r1, [sp, #0]
   d4fe2:	4629      	mov	r1, r5
   d4fe4:	f7ff ffea 	bl	d4fbc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4fe8:	b003      	add	sp, #12
   d4fea:	bd30      	pop	{r4, r5, pc}

000d4fec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fec:	4770      	bx	lr

000d4fee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4fee:	2000      	movs	r0, #0
   d4ff0:	4770      	bx	lr

000d4ff2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ff2:	b510      	push	{r4, lr}
   d4ff4:	2110      	movs	r1, #16
   d4ff6:	4604      	mov	r4, r0
   d4ff8:	f000 fd27 	bl	d5a4a <_ZdlPvj>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5000:	b508      	push	{r3, lr}
      { delete this; }
   d5002:	b108      	cbz	r0, d5008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5004:	f7ff fff5 	bl	d4ff2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5008:	bd08      	pop	{r3, pc}

000d500a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d500a:	2200      	movs	r2, #0
   d500c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d500e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5010:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5014:	8082      	strh	r2, [r0, #4]
   d5016:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d501a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d501c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d501e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5020:	680c      	ldr	r4, [r1, #0]
   d5022:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5024:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5026:	bd10      	pop	{r4, pc}

000d5028 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5028:	b510      	push	{r4, lr}
   d502a:	4604      	mov	r4, r0
    free((void*)msg_);
   d502c:	6800      	ldr	r0, [r0, #0]
   d502e:	f7ff fc2f 	bl	d4890 <free>
}
   d5032:	4620      	mov	r0, r4
   d5034:	bd10      	pop	{r4, pc}

000d5036 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5036:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5038:	68c4      	ldr	r4, [r0, #12]
   d503a:	b1f4      	cbz	r4, d507a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d503c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d503e:	2b02      	cmp	r3, #2
   d5040:	d103      	bne.n	d504a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5042:	f104 000c 	add.w	r0, r4, #12
   d5046:	f7ff ffef 	bl	d5028 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d504a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d504c:	b135      	cbz	r5, d505c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d504e:	4628      	mov	r0, r5
   d5050:	f7ff fc3e 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
   d5054:	2110      	movs	r1, #16
   d5056:	4628      	mov	r0, r5
   d5058:	f000 fcf7 	bl	d5a4a <_ZdlPvj>
   d505c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d505e:	b135      	cbz	r5, d506e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5060:	4628      	mov	r0, r5
   d5062:	f7ff fc35 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
   d5066:	2110      	movs	r1, #16
   d5068:	4628      	mov	r0, r5
   d506a:	f000 fcee 	bl	d5a4a <_ZdlPvj>
   d506e:	4620      	mov	r0, r4
   d5070:	2114      	movs	r1, #20
   d5072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5076:	f000 bce8 	b.w	d5a4a <_ZdlPvj>
   d507a:	bd38      	pop	{r3, r4, r5, pc}

000d507c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d507c:	b513      	push	{r0, r1, r4, lr}
   d507e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5080:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5084:	2300      	movs	r3, #0
   d5086:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5088:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d508a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d508c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d508e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5090:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5092:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5094:	f7ff f816 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5098:	4620      	mov	r0, r4
   d509a:	b002      	add	sp, #8
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d509e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50a0:	460c      	mov	r4, r1
   d50a2:	ad02      	add	r5, sp, #8
   d50a4:	f854 3b04 	ldr.w	r3, [r4], #4
   d50a8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d50ac:	4606      	mov	r6, r0
   d50ae:	460f      	mov	r7, r1
   d50b0:	a801      	add	r0, sp, #4
   d50b2:	4621      	mov	r1, r4
   d50b4:	f7ff fe9c 	bl	d4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d50b8:	4629      	mov	r1, r5
   d50ba:	4630      	mov	r0, r6
   d50bc:	f7ff ffde 	bl	d507c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50c0:	a801      	add	r0, sp, #4
   d50c2:	f7fe ffff 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50c6:	4620      	mov	r0, r4
   d50c8:	f7fe fffc 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d50cc:	4638      	mov	r0, r7
   d50ce:	2108      	movs	r1, #8
   d50d0:	f000 fcbb 	bl	d5a4a <_ZdlPvj>
        return p;
    }
   d50d4:	4630      	mov	r0, r6
   d50d6:	b003      	add	sp, #12
   d50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50da <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d50da:	b513      	push	{r0, r1, r4, lr}
   d50dc:	460b      	mov	r3, r1
   d50de:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e0:	c803      	ldmia	r0, {r0, r1}
   d50e2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d50e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d50ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d50ee:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d50f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d50f6:	b002      	add	sp, #8
   d50f8:	bd10      	pop	{r4, pc}
	...

000d50fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d50fc:	b538      	push	{r3, r4, r5, lr}
   d50fe:	2300      	movs	r3, #0
   d5100:	4604      	mov	r4, r0
   d5102:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5104:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5106:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5108:	f7fe ffc7 	bl	d409a <_Znwj>
   d510c:	b128      	cbz	r0, d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d510e:	2301      	movs	r3, #1
   d5110:	6043      	str	r3, [r0, #4]
   d5112:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5114:	4b02      	ldr	r3, [pc, #8]	; (d5120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5116:	6003      	str	r3, [r0, #0]
   d5118:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d511a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d511c:	4620      	mov	r0, r4
   d511e:	bd38      	pop	{r3, r4, r5, pc}
   d5120:	000d6760 	.word	0x000d6760

000d5124 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5124:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5126:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5128:	b90a      	cbnz	r2, d512e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d512a:	f000 fc90 	bl	d5a4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d512e:	68c3      	ldr	r3, [r0, #12]
    }
   d5130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5134:	4718      	bx	r3

000d5136 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5136:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5138:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d513a:	f100 0110 	add.w	r1, r0, #16
   d513e:	f7ff fff1 	bl	d5124 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5142:	bd08      	pop	{r3, pc}

000d5144 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5144:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5146:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5148:	b90a      	cbnz	r2, d514e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d514a:	f000 fc80 	bl	d5a4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d514e:	68c3      	ldr	r3, [r0, #12]
    }
   d5150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5154:	4718      	bx	r3

000d5156 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5156:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5158:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d515a:	f100 0110 	add.w	r1, r0, #16
   d515e:	f7ff fff1 	bl	d5144 <_ZNKSt8functionIFvRKbEEclES1_>
   d5162:	bd08      	pop	{r3, pc}

000d5164 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5164:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5166:	2300      	movs	r3, #0
   d5168:	6083      	str	r3, [r0, #8]
   d516a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d516c:	4604      	mov	r4, r0
   d516e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5170:	b12b      	cbz	r3, d517e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5172:	2202      	movs	r2, #2
   d5174:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5176:	68eb      	ldr	r3, [r5, #12]
   d5178:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d517a:	68ab      	ldr	r3, [r5, #8]
   d517c:	60a3      	str	r3, [r4, #8]
	}
    }
   d517e:	4620      	mov	r0, r4
   d5180:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5184:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5186:	b089      	sub	sp, #36	; 0x24
   d5188:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d518a:	4668      	mov	r0, sp
   d518c:	f7ff ff3d 	bl	d500a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5190:	2300      	movs	r3, #0
   d5192:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5196:	f04f 0202 	mov.w	r2, #2
   d519a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d519e:	2b00      	cmp	r3, #0
   d51a0:	d103      	bne.n	d51aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d51a2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d51a6:	2900      	cmp	r1, #0
   d51a8:	d1f7      	bne.n	d519a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d51aa:	d002      	beq.n	d51b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d51ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d51b0:	e063      	b.n	d527a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d51b2:	f114 050c 	adds.w	r5, r4, #12
   d51b6:	d003      	beq.n	d51c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d51b8:	4669      	mov	r1, sp
   d51ba:	4628      	mov	r0, r5
   d51bc:	f7ff ff25 	bl	d500a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51c0:	f3bf 8f5f 	dmb	sy
   d51c4:	2301      	movs	r3, #1
   d51c6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51c8:	2000      	movs	r0, #0
   d51ca:	f104 0308 	add.w	r3, r4, #8
   d51ce:	f3bf 8f5f 	dmb	sy
   d51d2:	e853 6f00 	ldrex	r6, [r3]
   d51d6:	e843 0200 	strex	r2, r0, [r3]
   d51da:	2a00      	cmp	r2, #0
   d51dc:	d1f9      	bne.n	d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d51de:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d51e2:	2e00      	cmp	r6, #0
   d51e4:	d049      	beq.n	d527a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d51e6:	f7ff fb27 	bl	d4838 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d51ea:	b120      	cbz	r0, d51f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d51ec:	4629      	mov	r1, r5
   d51ee:	4630      	mov	r0, r6
   d51f0:	f7ff ff98 	bl	d5124 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d51f4:	e03a      	b.n	d526c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51f6:	4631      	mov	r1, r6
   d51f8:	a802      	add	r0, sp, #8
   d51fa:	f7ff ffb3 	bl	d5164 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d51fe:	68e0      	ldr	r0, [r4, #12]
   d5200:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5204:	b108      	cbz	r0, d520a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5206:	f001 f9d1 	bl	d65ac <strdup>
   d520a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d520c:	2010      	movs	r0, #16
   d520e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5212:	f7fe ff42 	bl	d409a <_Znwj>
   d5216:	4605      	mov	r5, r0
   d5218:	b1e8      	cbz	r0, d5256 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d521a:	2700      	movs	r7, #0
   d521c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d521e:	2018      	movs	r0, #24
   d5220:	f7fe ff3b 	bl	d409a <_Znwj>
   d5224:	4604      	mov	r4, r0
   d5226:	b188      	cbz	r0, d524c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5228:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d522a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d522c:	a802      	add	r0, sp, #8
   d522e:	f7ff ff54 	bl	d50da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5232:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5234:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5236:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5238:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d523a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d523c:	a906      	add	r1, sp, #24
   d523e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5240:	60e3      	str	r3, [r4, #12]
   d5242:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5246:	9205      	str	r2, [sp, #20]
   d5248:	f7ff fedf 	bl	d500a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d524c:	4b0d      	ldr	r3, [pc, #52]	; (d5284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d524e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5250:	4b0d      	ldr	r3, [pc, #52]	; (d5288 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5252:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5254:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5256:	a806      	add	r0, sp, #24
   d5258:	f7ff fee6 	bl	d5028 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d525c:	a802      	add	r0, sp, #8
   d525e:	f7ff fb37 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5262:	2200      	movs	r2, #0
   d5264:	4629      	mov	r1, r5
   d5266:	4809      	ldr	r0, [pc, #36]	; (d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5268:	f7ff faee 	bl	d4848 <application_thread_invoke>
   d526c:	4630      	mov	r0, r6
   d526e:	f7ff fb2f 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5272:	2110      	movs	r1, #16
   d5274:	4630      	mov	r0, r6
   d5276:	f000 fbe8 	bl	d5a4a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d527a:	4668      	mov	r0, sp
   d527c:	f7ff fed4 	bl	d5028 <_ZN8particle5ErrorD1Ev>
    }
   d5280:	b009      	add	sp, #36	; 0x24
   d5282:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5284:	000d5137 	.word	0x000d5137
   d5288:	000d53ad 	.word	0x000d53ad
   d528c:	000d4ccd 	.word	0x000d4ccd

000d5290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5294:	b08b      	sub	sp, #44	; 0x2c
   d5296:	4606      	mov	r6, r0
   d5298:	460f      	mov	r7, r1
   d529a:	4690      	mov	r8, r2
   d529c:	4699      	mov	r9, r3
   d529e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52a2:	f7ff fa51 	bl	d4748 <spark_cloud_flag_connected>
   d52a6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d52a8:	4683      	mov	fp, r0
   d52aa:	bb30      	cbnz	r0, d52fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d52ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d52b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52b2:	a905      	add	r1, sp, #20
   d52b4:	4628      	mov	r0, r5
   d52b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52ba:	f7ff fea6 	bl	d500a <_ZN8particle5ErrorC1EOS0_>
   d52be:	2014      	movs	r0, #20
   d52c0:	f7fe feeb 	bl	d409a <_Znwj>
   d52c4:	4604      	mov	r4, r0
   d52c6:	b158      	cbz	r0, d52e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52c8:	2302      	movs	r3, #2
   d52ca:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52cc:	2301      	movs	r3, #1
   d52ce:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52d0:	f8c0 b004 	str.w	fp, [r0, #4]
   d52d4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d52d8:	4629      	mov	r1, r5
   d52da:	300c      	adds	r0, #12
   d52dc:	f7ff fe95 	bl	d500a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d52e0:	4630      	mov	r0, r6
   d52e2:	4621      	mov	r1, r4
   d52e4:	f840 4b04 	str.w	r4, [r0], #4
   d52e8:	f7ff ff08 	bl	d50fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52ec:	4628      	mov	r0, r5
   d52ee:	f7ff fe9b 	bl	d5028 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d52f2:	a805      	add	r0, sp, #20
   d52f4:	f7ff fe98 	bl	d5028 <_ZN8particle5ErrorD1Ev>
   d52f8:	e052      	b.n	d53a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d52fa:	2400      	movs	r4, #0
   d52fc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d52fe:	2014      	movs	r0, #20
   d5300:	606c      	str	r4, [r5, #4]
   d5302:	60ac      	str	r4, [r5, #8]
   d5304:	9307      	str	r3, [sp, #28]
   d5306:	f7fe fec8 	bl	d409a <_Znwj>
   d530a:	4601      	mov	r1, r0
   d530c:	b118      	cbz	r0, d5316 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d530e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5310:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5312:	6044      	str	r4, [r0, #4]
   d5314:	6084      	str	r4, [r0, #8]
   d5316:	a804      	add	r0, sp, #16
   d5318:	9103      	str	r1, [sp, #12]
   d531a:	f7ff feef 	bl	d50fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d531e:	4b22      	ldr	r3, [pc, #136]	; (d53a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5320:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5322:	2008      	movs	r0, #8
   d5324:	f7fe feb9 	bl	d409a <_Znwj>
   d5328:	4604      	mov	r4, r0
   d532a:	b128      	cbz	r0, d5338 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d532c:	9b03      	ldr	r3, [sp, #12]
   d532e:	f840 3b04 	str.w	r3, [r0], #4
   d5332:	a904      	add	r1, sp, #16
   d5334:	f7ff fd5c 	bl	d4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5338:	9500      	str	r5, [sp, #0]
   d533a:	fa5f f38a 	uxtb.w	r3, sl
   d533e:	464a      	mov	r2, r9
   d5340:	4641      	mov	r1, r8
   d5342:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5344:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5346:	f7ff fa07 	bl	d4758 <spark_send_event>
   d534a:	b920      	cbnz	r0, d5356 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d534c:	9b03      	ldr	r3, [sp, #12]
   d534e:	785b      	ldrb	r3, [r3, #1]
   d5350:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5354:	b183      	cbz	r3, d5378 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5356:	9b03      	ldr	r3, [sp, #12]
   d5358:	9305      	str	r3, [sp, #20]
   d535a:	a904      	add	r1, sp, #16
   d535c:	a806      	add	r0, sp, #24
   d535e:	f7ff fd47 	bl	d4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5362:	a905      	add	r1, sp, #20
   d5364:	4630      	mov	r0, r6
   d5366:	f7ff fe89 	bl	d507c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d536a:	a806      	add	r0, sp, #24
   d536c:	f7fe feaa 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5370:	a804      	add	r0, sp, #16
   d5372:	f7fe fea7 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5376:	e013      	b.n	d53a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5378:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d537c:	a905      	add	r1, sp, #20
   d537e:	a803      	add	r0, sp, #12
   d5380:	9205      	str	r2, [sp, #20]
   d5382:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5386:	f7ff fefd 	bl	d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d538a:	a805      	add	r0, sp, #20
   d538c:	f7ff fe4c 	bl	d5028 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5390:	a805      	add	r0, sp, #20
   d5392:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5394:	f7ff fe83 	bl	d509e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5398:	a806      	add	r0, sp, #24
   d539a:	f7fe fe93 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d539e:	e7da      	b.n	d5356 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d53a0:	4630      	mov	r0, r6
   d53a2:	b00b      	add	sp, #44	; 0x2c
   d53a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53a8:	000d551d 	.word	0x000d551d

000d53ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d53ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d53b2:	d006      	beq.n	d53c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d53b4:	2a03      	cmp	r2, #3
   d53b6:	d017      	beq.n	d53e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d53b8:	2a01      	cmp	r2, #1
   d53ba:	d122      	bne.n	d5402 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d53bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53be:	6003      	str	r3, [r0, #0]
	      break;
   d53c0:	e01f      	b.n	d5402 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53c2:	2018      	movs	r0, #24
   d53c4:	680e      	ldr	r6, [r1, #0]
   d53c6:	f7fe fe68 	bl	d409a <_Znwj>
   d53ca:	4605      	mov	r5, r0
   d53cc:	b150      	cbz	r0, d53e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53ce:	4631      	mov	r1, r6
   d53d0:	f7ff fec8 	bl	d5164 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d53d4:	6930      	ldr	r0, [r6, #16]
   d53d6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53da:	b108      	cbz	r0, d53e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d53dc:	f001 f8e6 	bl	d65ac <strdup>
   d53e0:	6128      	str	r0, [r5, #16]
   d53e2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53e4:	6025      	str	r5, [r4, #0]
   d53e6:	e00c      	b.n	d5402 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53e8:	6804      	ldr	r4, [r0, #0]
   d53ea:	b154      	cbz	r4, d5402 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d53ec:	f104 0010 	add.w	r0, r4, #16
   d53f0:	f7ff fe1a 	bl	d5028 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff fa6b 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53fa:	2118      	movs	r1, #24
   d53fc:	4620      	mov	r0, r4
   d53fe:	f000 fb24 	bl	d5a4a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5402:	2000      	movs	r0, #0
   d5404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5406 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5406:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5408:	2300      	movs	r3, #0
   d540a:	6083      	str	r3, [r0, #8]
   d540c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d540e:	4604      	mov	r4, r0
   d5410:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5412:	b12b      	cbz	r3, d5420 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5414:	2202      	movs	r2, #2
   d5416:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5418:	68eb      	ldr	r3, [r5, #12]
   d541a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d541c:	68ab      	ldr	r3, [r5, #8]
   d541e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5420:	4620      	mov	r0, r4
   d5422:	bd38      	pop	{r3, r4, r5, pc}

000d5424 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5424:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5426:	b570      	push	{r4, r5, r6, lr}
   d5428:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d542a:	d006      	beq.n	d543a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d542c:	2a03      	cmp	r2, #3
   d542e:	d011      	beq.n	d5454 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5430:	2a01      	cmp	r2, #1
   d5432:	d118      	bne.n	d5466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5434:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5436:	6003      	str	r3, [r0, #0]
	      break;
   d5438:	e015      	b.n	d5466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d543a:	2014      	movs	r0, #20
   d543c:	680e      	ldr	r6, [r1, #0]
   d543e:	f7fe fe2c 	bl	d409a <_Znwj>
   d5442:	4605      	mov	r5, r0
   d5444:	b120      	cbz	r0, d5450 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5446:	4631      	mov	r1, r6
   d5448:	f7ff ffdd 	bl	d5406 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d544c:	7c33      	ldrb	r3, [r6, #16]
   d544e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5450:	6025      	str	r5, [r4, #0]
   d5452:	e008      	b.n	d5466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5454:	6804      	ldr	r4, [r0, #0]
   d5456:	b134      	cbz	r4, d5466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5458:	4620      	mov	r0, r4
   d545a:	f7ff fa39 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d545e:	2114      	movs	r1, #20
   d5460:	4620      	mov	r0, r4
   d5462:	f000 faf2 	bl	d5a4a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5466:	2000      	movs	r0, #0
   d5468:	bd70      	pop	{r4, r5, r6, pc}
	...

000d546c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d546c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d546e:	2300      	movs	r3, #0
   d5470:	b087      	sub	sp, #28
   d5472:	460c      	mov	r4, r1
   d5474:	f3bf 8f5f 	dmb	sy
   d5478:	e850 6f00 	ldrex	r6, [r0]
   d547c:	e840 3200 	strex	r2, r3, [r0]
   d5480:	2a00      	cmp	r2, #0
   d5482:	d1f9      	bne.n	d5478 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5484:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5488:	2e00      	cmp	r6, #0
   d548a:	d03f      	beq.n	d550c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d548c:	4618      	mov	r0, r3
   d548e:	f7ff f9d3 	bl	d4838 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5492:	4607      	mov	r7, r0
   d5494:	b120      	cbz	r0, d54a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5496:	4621      	mov	r1, r4
   d5498:	4630      	mov	r0, r6
   d549a:	f7ff fe53 	bl	d5144 <_ZNKSt8functionIFvRKbEEclES1_>
   d549e:	e02e      	b.n	d54fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d54a0:	4631      	mov	r1, r6
   d54a2:	a801      	add	r0, sp, #4
   d54a4:	f7ff ffaf 	bl	d5406 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d54a8:	7823      	ldrb	r3, [r4, #0]
   d54aa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d54ae:	2010      	movs	r0, #16
   d54b0:	f7fe fdf3 	bl	d409a <_Znwj>
   d54b4:	4605      	mov	r5, r0
   d54b6:	b1d0      	cbz	r0, d54ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54ba:	2014      	movs	r0, #20
   d54bc:	f7fe fded 	bl	d409a <_Znwj>
   d54c0:	4604      	mov	r4, r0
   d54c2:	b178      	cbz	r0, d54e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54c4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d54c6:	4601      	mov	r1, r0
   d54c8:	a801      	add	r0, sp, #4
   d54ca:	f7ff fe06 	bl	d50da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54d6:	9203      	str	r2, [sp, #12]
   d54d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54da:	60e3      	str	r3, [r4, #12]
   d54dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54e0:	9204      	str	r2, [sp, #16]
   d54e2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d54e4:	4b0a      	ldr	r3, [pc, #40]	; (d5510 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d54e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d54e8:	4b0a      	ldr	r3, [pc, #40]	; (d5514 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54ea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d54ec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54ee:	a801      	add	r0, sp, #4
   d54f0:	f7ff f9ee 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d54f4:	2200      	movs	r2, #0
   d54f6:	4629      	mov	r1, r5
   d54f8:	4807      	ldr	r0, [pc, #28]	; (d5518 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d54fa:	f7ff f9a5 	bl	d4848 <application_thread_invoke>
   d54fe:	4630      	mov	r0, r6
   d5500:	f7ff f9e6 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5504:	2110      	movs	r1, #16
   d5506:	4630      	mov	r0, r6
   d5508:	f000 fa9f 	bl	d5a4a <_ZdlPvj>
        }
    }
   d550c:	b007      	add	sp, #28
   d550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5510:	000d5157 	.word	0x000d5157
   d5514:	000d5425 	.word	0x000d5425
   d5518:	000d4ccd 	.word	0x000d4ccd

000d551c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d551c:	b530      	push	{r4, r5, lr}
   d551e:	b085      	sub	sp, #20
   d5520:	4604      	mov	r4, r0
   d5522:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5524:	4668      	mov	r0, sp
   d5526:	4611      	mov	r1, r2
   d5528:	f7ff fdb9 	bl	d509e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d552c:	b17c      	cbz	r4, d554e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d552e:	b224      	sxth	r4, r4
   d5530:	4628      	mov	r0, r5
   d5532:	b10d      	cbz	r5, d5538 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5534:	f001 f83a 	bl	d65ac <strdup>
   d5538:	9002      	str	r0, [sp, #8]
   d553a:	a902      	add	r1, sp, #8
   d553c:	4668      	mov	r0, sp
   d553e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5542:	f7ff fe1f 	bl	d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5546:	a802      	add	r0, sp, #8
   d5548:	f7ff fd6e 	bl	d5028 <_ZN8particle5ErrorD1Ev>
   d554c:	e01d      	b.n	d558a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d554e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5550:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5554:	f04f 0201 	mov.w	r2, #1
   d5558:	e8d0 3f4f 	ldrexb	r3, [r0]
   d555c:	42a3      	cmp	r3, r4
   d555e:	d103      	bne.n	d5568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5560:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5564:	2900      	cmp	r1, #0
   d5566:	d1f7      	bne.n	d5558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5568:	d002      	beq.n	d5570 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d556a:	f88d 3008 	strb.w	r3, [sp, #8]
   d556e:	e00c      	b.n	d558a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5570:	f110 010c 	adds.w	r1, r0, #12
   d5574:	f04f 0301 	mov.w	r3, #1
   d5578:	bf18      	it	ne
   d557a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d557c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5580:	3004      	adds	r0, #4
   d5582:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5586:	f7ff ff71 	bl	d546c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d558a:	a801      	add	r0, sp, #4
   d558c:	f7fe fd9a 	bl	d40c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5590:	b005      	add	sp, #20
   d5592:	bd30      	pop	{r4, r5, pc}

000d5594 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5594:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5596:	4b0c      	ldr	r3, [pc, #48]	; (d55c8 <serialEventRun+0x34>)
   d5598:	b133      	cbz	r3, d55a8 <serialEventRun+0x14>
   d559a:	f7ff fc8f 	bl	d4ebc <_Z16_fetch_usbserialv>
   d559e:	6803      	ldr	r3, [r0, #0]
   d55a0:	691b      	ldr	r3, [r3, #16]
   d55a2:	4798      	blx	r3
   d55a4:	2800      	cmp	r0, #0
   d55a6:	dc09      	bgt.n	d55bc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d55a8:	4b08      	ldr	r3, [pc, #32]	; (d55cc <serialEventRun+0x38>)
   d55aa:	b163      	cbz	r3, d55c6 <serialEventRun+0x32>
   d55ac:	f7ff fbfa 	bl	d4da4 <_Z22__fetch_global_Serial1v>
   d55b0:	6803      	ldr	r3, [r0, #0]
   d55b2:	691b      	ldr	r3, [r3, #16]
   d55b4:	4798      	blx	r3
   d55b6:	2800      	cmp	r0, #0
   d55b8:	dc03      	bgt.n	d55c2 <serialEventRun+0x2e>
   d55ba:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d55bc:	f3af 8000 	nop.w
   d55c0:	e7f2      	b.n	d55a8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d55c2:	f3af 8000 	nop.w
   d55c6:	bd08      	pop	{r3, pc}
	...

000d55d0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d55d0:	b508      	push	{r3, lr}
	serialEventRun();
   d55d2:	f7ff ffdf 	bl	d5594 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55d6:	f7ff f88f 	bl	d46f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55da:	4b01      	ldr	r3, [pc, #4]	; (d55e0 <_post_loop+0x10>)
   d55dc:	6018      	str	r0, [r3, #0]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	2003e72c 	.word	0x2003e72c

000d55e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55e6:	2300      	movs	r3, #0
   d55e8:	9300      	str	r3, [sp, #0]
   d55ea:	461a      	mov	r2, r3
   d55ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55f0:	f7ff f93c 	bl	d486c <system_ctrl_set_result>
}
   d55f4:	b003      	add	sp, #12
   d55f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55fe:	8843      	ldrh	r3, [r0, #2]
   d5600:	2b0a      	cmp	r3, #10
   d5602:	d008      	beq.n	d5616 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5604:	2b50      	cmp	r3, #80	; 0x50
   d5606:	d109      	bne.n	d561c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5608:	4b09      	ldr	r3, [pc, #36]	; (d5630 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d560a:	681b      	ldr	r3, [r3, #0]
   d560c:	b13b      	cbz	r3, d561e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d560e:	b003      	add	sp, #12
   d5610:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5614:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5616:	f7ff ffe5 	bl	d55e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d561a:	e006      	b.n	d562a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d561c:	2300      	movs	r3, #0
   d561e:	9300      	str	r3, [sp, #0]
   d5620:	461a      	mov	r2, r3
   d5622:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5626:	f7ff f921 	bl	d486c <system_ctrl_set_result>
        break;
    }
}
   d562a:	b003      	add	sp, #12
   d562c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5630:	2003e6e4 	.word	0x2003e6e4

000d5634 <module_user_init_hook>:

void module_user_init_hook()
{
   d5634:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5636:	f7ff f857 	bl	d46e8 <HAL_RNG_GetRandomNumber>
   d563a:	4604      	mov	r4, r0
    srand(seed);
   d563c:	f000 ff8e 	bl	d655c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5640:	4b07      	ldr	r3, [pc, #28]	; (d5660 <module_user_init_hook+0x2c>)
   d5642:	b113      	cbz	r3, d564a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5644:	4620      	mov	r0, r4
   d5646:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d564a:	2100      	movs	r1, #0
   d564c:	4804      	ldr	r0, [pc, #16]	; (d5660 <module_user_init_hook+0x2c>)
   d564e:	f7ff f88b 	bl	d4768 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5652:	2100      	movs	r1, #0
   d5654:	4803      	ldr	r0, [pc, #12]	; (d5664 <module_user_init_hook+0x30>)
}
   d5656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d565a:	f7ff b8fd 	b.w	d4858 <system_ctrl_set_app_request_handler>
   d565e:	bf00      	nop
   d5660:	00000000 	.word	0x00000000
   d5664:	000d55fd 	.word	0x000d55fd

000d5668 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5668:	b510      	push	{r4, lr}
   d566a:	4604      	mov	r4, r0
   d566c:	f7ff f930 	bl	d48d0 <_ZNSt14_Function_baseD1Ev>
   d5670:	4620      	mov	r0, r4
   d5672:	bd10      	pop	{r4, pc}

000d5674 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5674:	4803      	ldr	r0, [pc, #12]	; (d5684 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5676:	4a04      	ldr	r2, [pc, #16]	; (d5688 <_GLOBAL__sub_I_RGB+0x14>)
   d5678:	4904      	ldr	r1, [pc, #16]	; (d568c <_GLOBAL__sub_I_RGB+0x18>)
   d567a:	2300      	movs	r3, #0
   d567c:	6083      	str	r3, [r0, #8]
   d567e:	f000 b9df 	b.w	d5a40 <__aeabi_atexit>
   d5682:	bf00      	nop
   d5684:	2003e6e8 	.word	0x2003e6e8
   d5688:	2003e3b4 	.word	0x2003e3b4
   d568c:	000d5669 	.word	0x000d5669

000d5690 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5690:	2100      	movs	r1, #0
   d5692:	f7ff b8c9 	b.w	d4828 <system_delay_ms>
	...

000d5698 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5698:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d569a:	681a      	ldr	r2, [r3, #0]
   d569c:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d569e:	601a      	str	r2, [r3, #0]
   d56a0:	4770      	bx	lr
   d56a2:	bf00      	nop
   d56a4:	2003e34c 	.word	0x2003e34c
   d56a8:	2003e6f8 	.word	0x2003e6f8

000d56ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56ac:	4b01      	ldr	r3, [pc, #4]	; (d56b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56ae:	4a02      	ldr	r2, [pc, #8]	; (d56b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56b0:	601a      	str	r2, [r3, #0]
   d56b2:	4770      	bx	lr
   d56b4:	2003e6fc 	.word	0x2003e6fc
   d56b8:	000d6810 	.word	0x000d6810

000d56bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d56bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56be:	4606      	mov	r6, r0
   d56c0:	460d      	mov	r5, r1
   d56c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d56c4:	2400      	movs	r4, #0
  while (size--) {
   d56c6:	42bd      	cmp	r5, r7
   d56c8:	d00c      	beq.n	d56e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d56ca:	6833      	ldr	r3, [r6, #0]
   d56cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d56d0:	689b      	ldr	r3, [r3, #8]
   d56d2:	4630      	mov	r0, r6
   d56d4:	4798      	blx	r3
     if (chunk>=0)
   d56d6:	2800      	cmp	r0, #0
   d56d8:	db01      	blt.n	d56de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d56da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d56dc:	e7f3      	b.n	d56c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d56de:	2c00      	cmp	r4, #0
   d56e0:	bf08      	it	eq
   d56e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d56e4:	4620      	mov	r0, r4
   d56e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d56e8:	b570      	push	{r4, r5, r6, lr}
   d56ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d56ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d56ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d56f0:	b149      	cbz	r1, d5706 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d56f2:	f000 ff76 	bl	d65e2 <strlen>
   d56f6:	682b      	ldr	r3, [r5, #0]
   d56f8:	4602      	mov	r2, r0
   d56fa:	4621      	mov	r1, r4
   d56fc:	4628      	mov	r0, r5
   d56fe:	68db      	ldr	r3, [r3, #12]
    }
   d5700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5704:	4718      	bx	r3
    }
   d5706:	bd70      	pop	{r4, r5, r6, pc}

000d5708 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5708:	6803      	ldr	r3, [r0, #0]
   d570a:	689b      	ldr	r3, [r3, #8]
   d570c:	4718      	bx	r3

000d570e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d570e:	b530      	push	{r4, r5, lr}
   d5710:	b08b      	sub	sp, #44	; 0x2c
   d5712:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5714:	2100      	movs	r1, #0
   d5716:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d571a:	2a01      	cmp	r2, #1
   d571c:	bf98      	it	ls
   d571e:	220a      	movls	r2, #10
   d5720:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5724:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5728:	fb05 3312 	mls	r3, r5, r2, r3
   d572c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5730:	2b09      	cmp	r3, #9
   d5732:	bf94      	ite	ls
   d5734:	3330      	addls	r3, #48	; 0x30
   d5736:	3337      	addhi	r3, #55	; 0x37
   d5738:	b2db      	uxtb	r3, r3
   d573a:	4621      	mov	r1, r4
   d573c:	f804 3901 	strb.w	r3, [r4], #-1
   d5740:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5742:	2d00      	cmp	r5, #0
   d5744:	d1ee      	bne.n	d5724 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5746:	f7ff ffcf 	bl	d56e8 <_ZN5Print5writeEPKc>
}
   d574a:	b00b      	add	sp, #44	; 0x2c
   d574c:	bd30      	pop	{r4, r5, pc}

000d574e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d574e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5750:	b92a      	cbnz	r2, d575e <_ZN5Print5printEmi+0x10>
   d5752:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5754:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5758:	689b      	ldr	r3, [r3, #8]
   d575a:	b2c9      	uxtb	r1, r1
   d575c:	4718      	bx	r3
  else return printNumber(n, base);
   d575e:	b2d2      	uxtb	r2, r2
}
   d5760:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5764:	f7ff bfd3 	b.w	d570e <_ZN5Print11printNumberEmh>

000d5768 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5768:	f7ff bff1 	b.w	d574e <_ZN5Print5printEmi>

000d576c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d576c:	4802      	ldr	r0, [pc, #8]	; (d5778 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d576e:	2300      	movs	r3, #0
   d5770:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5772:	f7fe bfb1 	b.w	d46d8 <os_mutex_recursive_create>
   d5776:	bf00      	nop
   d5778:	2003e700 	.word	0x2003e700

000d577c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d577c:	b510      	push	{r4, lr}
   d577e:	4604      	mov	r4, r0
{
	free(buffer);
   d5780:	6800      	ldr	r0, [r0, #0]
   d5782:	f7ff f885 	bl	d4890 <free>
}
   d5786:	4620      	mov	r0, r4
   d5788:	bd10      	pop	{r4, pc}

000d578a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d578a:	b510      	push	{r4, lr}
   d578c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d578e:	6800      	ldr	r0, [r0, #0]
   d5790:	b108      	cbz	r0, d5796 <_ZN6String10invalidateEv+0xc>
   d5792:	f7ff f87d 	bl	d4890 <free>
	buffer = NULL;
   d5796:	2300      	movs	r3, #0
   d5798:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d579a:	60a3      	str	r3, [r4, #8]
   d579c:	6063      	str	r3, [r4, #4]
   d579e:	bd10      	pop	{r4, pc}

000d57a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d57a0:	b538      	push	{r3, r4, r5, lr}
   d57a2:	4604      	mov	r4, r0
   d57a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d57a6:	6800      	ldr	r0, [r0, #0]
   d57a8:	3101      	adds	r1, #1
   d57aa:	f7ff f879 	bl	d48a0 <realloc>
	if (newbuffer) {
   d57ae:	b110      	cbz	r0, d57b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d57b0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d57b4:	2001      	movs	r0, #1
	}
	return 0;
}
   d57b6:	bd38      	pop	{r3, r4, r5, pc}

000d57b8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d57ba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d57be:	b113      	cbz	r3, d57c6 <_ZN6String7reserveEj+0xe>
   d57c0:	6843      	ldr	r3, [r0, #4]
   d57c2:	428b      	cmp	r3, r1
   d57c4:	d207      	bcs.n	d57d6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d57c6:	4620      	mov	r0, r4
   d57c8:	f7ff ffea 	bl	d57a0 <_ZN6String12changeBufferEj>
   d57cc:	b120      	cbz	r0, d57d8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d57ce:	68a3      	ldr	r3, [r4, #8]
   d57d0:	b90b      	cbnz	r3, d57d6 <_ZN6String7reserveEj+0x1e>
   d57d2:	6822      	ldr	r2, [r4, #0]
   d57d4:	7013      	strb	r3, [r2, #0]
   d57d6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d57d8:	bd10      	pop	{r4, pc}

000d57da <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d57da:	b570      	push	{r4, r5, r6, lr}
   d57dc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d57de:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d57e0:	4604      	mov	r4, r0
   d57e2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d57e4:	f7ff ffe8 	bl	d57b8 <_ZN6String7reserveEj>
   d57e8:	b918      	cbnz	r0, d57f2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d57ea:	4620      	mov	r0, r4
   d57ec:	f7ff ffcd 	bl	d578a <_ZN6String10invalidateEv>
		return *this;
   d57f0:	e009      	b.n	d5806 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d57f2:	462a      	mov	r2, r5
   d57f4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d57f6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d57f8:	6820      	ldr	r0, [r4, #0]
   d57fa:	f000 fe9b 	bl	d6534 <memcpy>
	buffer[len] = 0;
   d57fe:	6822      	ldr	r2, [r4, #0]
   d5800:	68a3      	ldr	r3, [r4, #8]
   d5802:	2100      	movs	r1, #0
   d5804:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5806:	4620      	mov	r0, r4
   d5808:	bd70      	pop	{r4, r5, r6, pc}

000d580a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d580a:	b538      	push	{r3, r4, r5, lr}
   d580c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d580e:	460c      	mov	r4, r1
   d5810:	b141      	cbz	r1, d5824 <_ZN6StringaSEPKc+0x1a>
   d5812:	4608      	mov	r0, r1
   d5814:	f000 fee5 	bl	d65e2 <strlen>
   d5818:	4621      	mov	r1, r4
   d581a:	4602      	mov	r2, r0
   d581c:	4628      	mov	r0, r5
   d581e:	f7ff ffdc 	bl	d57da <_ZN6String4copyEPKcj>
   d5822:	e001      	b.n	d5828 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5824:	f7ff ffb1 	bl	d578a <_ZN6String10invalidateEv>

	return *this;
}
   d5828:	4628      	mov	r0, r5
   d582a:	bd38      	pop	{r3, r4, r5, pc}

000d582c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d582c:	b510      	push	{r4, lr}
   d582e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5830:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5832:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5834:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5836:	6063      	str	r3, [r4, #4]
	len = 0;
   d5838:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d583a:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d583c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d583e:	a901      	add	r1, sp, #4
   d5840:	f000 f840 	bl	d58c4 <itoa>
	*this = buf;
   d5844:	a901      	add	r1, sp, #4
   d5846:	4620      	mov	r0, r4
   d5848:	f7ff ffdf 	bl	d580a <_ZN6StringaSEPKc>
}
   d584c:	4620      	mov	r0, r4
   d584e:	b00a      	add	sp, #40	; 0x28
   d5850:	bd10      	pop	{r4, pc}

000d5852 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5852:	b510      	push	{r4, lr}
   d5854:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5856:	f000 fec4 	bl	d65e2 <strlen>
   d585a:	3801      	subs	r0, #1
   d585c:	1823      	adds	r3, r4, r0
   d585e:	4620      	mov	r0, r4
	while(i<j){
   d5860:	4298      	cmp	r0, r3
   d5862:	d206      	bcs.n	d5872 <_Z11str_reversePc+0x20>
		c = *i;
   d5864:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5866:	7819      	ldrb	r1, [r3, #0]
   d5868:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d586c:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5870:	e7f6      	b.n	d5860 <_Z11str_reversePc+0xe>
   d5872:	bd10      	pop	{r4, pc}

000d5874 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5874:	b570      	push	{r4, r5, r6, lr}
   d5876:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5878:	1e91      	subs	r1, r2, #2
   d587a:	2922      	cmp	r1, #34	; 0x22
   d587c:	d820      	bhi.n	d58c0 <ultoa+0x4c>
   d587e:	4625      	mov	r5, r4
   d5880:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5882:	b910      	cbnz	r0, d588a <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5884:	4423      	add	r3, r4
            *ptr++ = '0';
   d5886:	2230      	movs	r2, #48	; 0x30
   d5888:	e00e      	b.n	d58a8 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d588a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d588e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5892:	b2c1      	uxtb	r1, r0
   d5894:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5898:	2809      	cmp	r0, #9
                *ptr += '0';
   d589a:	bf94      	ite	ls
   d589c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d589e:	3157      	addhi	r1, #87	; 0x57
   d58a0:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d58a4:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d58a6:	e7eb      	b.n	d5880 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d58a8:	4299      	cmp	r1, r3
   d58aa:	d202      	bcs.n	d58b2 <ultoa+0x3e>
            *ptr++ = '0';
   d58ac:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d58b0:	e7fa      	b.n	d58a8 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d58b2:	2300      	movs	r3, #0
	str_reverse(buffer);
   d58b4:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d58b6:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d58b8:	f7ff ffcb 	bl	d5852 <_Z11str_reversePc>
	return buffer;
   d58bc:	4620      	mov	r0, r4
   d58be:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d58c0:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d58c2:	bd70      	pop	{r4, r5, r6, pc}

000d58c4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d58c4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d58c6:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d58c8:	460c      	mov	r4, r1
   d58ca:	4615      	mov	r5, r2
	if(a<0){
   d58cc:	da0b      	bge.n	d58e6 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d58ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d58d2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d58d6:	bf14      	ite	ne
   d58d8:	4258      	negne	r0, r3
   d58da:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d58dc:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d58de:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d58e0:	462a      	mov	r2, r5
   d58e2:	4419      	add	r1, r3
   d58e4:	e000      	b.n	d58e8 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d58e6:	2301      	movs	r3, #1
   d58e8:	f7ff ffc4 	bl	d5874 <ultoa>
	}
	return buffer;
}
   d58ec:	4620      	mov	r0, r4
   d58ee:	bd38      	pop	{r3, r4, r5, pc}

000d58f0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d58f0:	4b04      	ldr	r3, [pc, #16]	; (d5904 <_GLOBAL__sub_I_System+0x14>)
   d58f2:	2000      	movs	r0, #0
   d58f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d58f8:	7018      	strb	r0, [r3, #0]
   d58fa:	8058      	strh	r0, [r3, #2]
   d58fc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d58fe:	f7fe bf8b 	b.w	d4818 <set_system_mode>
   d5902:	bf00      	nop
   d5904:	2003e704 	.word	0x2003e704

000d5908 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5908:	4770      	bx	lr

000d590a <_ZN8SPIClassD0Ev>:
   d590a:	b510      	push	{r4, lr}
   d590c:	2110      	movs	r1, #16
   d590e:	4604      	mov	r4, r0
   d5910:	f000 f89b 	bl	d5a4a <_ZdlPvj>
   d5914:	4620      	mov	r0, r4
   d5916:	bd10      	pop	{r4, pc}

000d5918 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5918:	b570      	push	{r4, r5, r6, lr}
   d591a:	4b08      	ldr	r3, [pc, #32]	; (d593c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d591c:	6003      	str	r3, [r0, #0]
   d591e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5920:	2500      	movs	r5, #0
   d5922:	460e      	mov	r6, r1
   d5924:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5928:	f7fe fece 	bl	d46c8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d592c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d592e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5930:	f7fe feea 	bl	d4708 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5934:	60a5      	str	r5, [r4, #8]
}
   d5936:	4620      	mov	r0, r4
   d5938:	bd70      	pop	{r4, r5, r6, pc}
   d593a:	bf00      	nop
   d593c:	000d6888 	.word	0x000d6888

000d5940 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5940:	2200      	movs	r2, #0
   d5942:	4611      	mov	r1, r2
   d5944:	6840      	ldr	r0, [r0, #4]
   d5946:	f7fe bf4f 	b.w	d47e8 <network_listening>

000d594a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d594a:	2200      	movs	r2, #0
   d594c:	4611      	mov	r1, r2
   d594e:	6840      	ldr	r0, [r0, #4]
   d5950:	f7fe bf5a 	b.w	d4808 <network_get_listen_timeout>

000d5954 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5954:	2200      	movs	r2, #0
   d5956:	6840      	ldr	r0, [r0, #4]
   d5958:	f7fe bf4e 	b.w	d47f8 <network_set_listen_timeout>

000d595c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d595c:	2200      	movs	r2, #0
   d595e:	f081 0101 	eor.w	r1, r1, #1
   d5962:	6840      	ldr	r0, [r0, #4]
   d5964:	f7fe bf38 	b.w	d47d8 <network_listen>

000d5968 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5968:	2300      	movs	r3, #0
   d596a:	461a      	mov	r2, r3
   d596c:	4619      	mov	r1, r3
   d596e:	6840      	ldr	r0, [r0, #4]
   d5970:	f7fe bf2a 	b.w	d47c8 <network_off>

000d5974 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5974:	2300      	movs	r3, #0
   d5976:	461a      	mov	r2, r3
   d5978:	4619      	mov	r1, r3
   d597a:	6840      	ldr	r0, [r0, #4]
   d597c:	f7fe bf1c 	b.w	d47b8 <network_on>

000d5980 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5980:	2200      	movs	r2, #0
   d5982:	4611      	mov	r1, r2
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	f7fe bf0f 	b.w	d47a8 <network_ready>

000d598a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d598a:	2200      	movs	r2, #0
   d598c:	4611      	mov	r1, r2
   d598e:	6840      	ldr	r0, [r0, #4]
   d5990:	f7fe befa 	b.w	d4788 <network_connecting>

000d5994 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5994:	2200      	movs	r2, #0
   d5996:	2102      	movs	r1, #2
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	f7fe befd 	b.w	d4798 <network_disconnect>

000d599e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d599e:	2300      	movs	r3, #0
   d59a0:	461a      	mov	r2, r3
   d59a2:	6840      	ldr	r0, [r0, #4]
   d59a4:	f7fe bee8 	b.w	d4778 <network_connect>

000d59a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d59a8:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d59aa:	2203      	movs	r2, #3
   d59ac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d59ae:	4a02      	ldr	r2, [pc, #8]	; (d59b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d59b0:	601a      	str	r2, [r3, #0]
   d59b2:	4770      	bx	lr
   d59b4:	2003e70c 	.word	0x2003e70c
   d59b8:	000d6898 	.word	0x000d6898

000d59bc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d59bc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d59be:	4d0b      	ldr	r5, [pc, #44]	; (d59ec <_Z19__fetch_global_Wirev+0x30>)
   d59c0:	6829      	ldr	r1, [r5, #0]
   d59c2:	f011 0401 	ands.w	r4, r1, #1
   d59c6:	d10f      	bne.n	d59e8 <_Z19__fetch_global_Wirev+0x2c>
   d59c8:	4628      	mov	r0, r5
   d59ca:	f7fe fb6c 	bl	d40a6 <__cxa_guard_acquire>
   d59ce:	b158      	cbz	r0, d59e8 <_Z19__fetch_global_Wirev+0x2c>
   d59d0:	4621      	mov	r1, r4
   d59d2:	4807      	ldr	r0, [pc, #28]	; (d59f0 <_Z19__fetch_global_Wirev+0x34>)
   d59d4:	f7ff f946 	bl	d4c64 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59d8:	4628      	mov	r0, r5
   d59da:	f7fe fb69 	bl	d40b0 <__cxa_guard_release>
   d59de:	4a05      	ldr	r2, [pc, #20]	; (d59f4 <_Z19__fetch_global_Wirev+0x38>)
   d59e0:	4905      	ldr	r1, [pc, #20]	; (d59f8 <_Z19__fetch_global_Wirev+0x3c>)
   d59e2:	4803      	ldr	r0, [pc, #12]	; (d59f0 <_Z19__fetch_global_Wirev+0x34>)
   d59e4:	f000 f82c 	bl	d5a40 <__aeabi_atexit>
	return wire;
}
   d59e8:	4801      	ldr	r0, [pc, #4]	; (d59f0 <_Z19__fetch_global_Wirev+0x34>)
   d59ea:	bd38      	pop	{r3, r4, r5, pc}
   d59ec:	2003e714 	.word	0x2003e714
   d59f0:	2003e718 	.word	0x2003e718
   d59f4:	2003e3b4 	.word	0x2003e3b4
   d59f8:	000d4c0d 	.word	0x000d4c0d

000d59fc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d59fc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d59fe:	4c0c      	ldr	r4, [pc, #48]	; (d5a30 <_GLOBAL__sub_I_SPI+0x34>)
   d5a00:	4e0c      	ldr	r6, [pc, #48]	; (d5a34 <_GLOBAL__sub_I_SPI+0x38>)
   d5a02:	4d0d      	ldr	r5, [pc, #52]	; (d5a38 <_GLOBAL__sub_I_SPI+0x3c>)
   d5a04:	2100      	movs	r1, #0
   d5a06:	4620      	mov	r0, r4
   d5a08:	f7ff ff86 	bl	d5918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a0c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a0e:	4c0b      	ldr	r4, [pc, #44]	; (d5a3c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a10:	4632      	mov	r2, r6
   d5a12:	4629      	mov	r1, r5
   d5a14:	f000 f814 	bl	d5a40 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a18:	2101      	movs	r1, #1
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f7ff ff7c 	bl	d5918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a20:	4632      	mov	r2, r6
   d5a22:	4629      	mov	r1, r5
   d5a24:	4620      	mov	r0, r4
   d5a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5a2a:	f000 b809 	b.w	d5a40 <__aeabi_atexit>
   d5a2e:	bf00      	nop
   d5a30:	2003e730 	.word	0x2003e730
   d5a34:	2003e3b4 	.word	0x2003e3b4
   d5a38:	000d5909 	.word	0x000d5909
   d5a3c:	2003e740 	.word	0x2003e740

000d5a40 <__aeabi_atexit>:
   d5a40:	460b      	mov	r3, r1
   d5a42:	4601      	mov	r1, r0
   d5a44:	4618      	mov	r0, r3
   d5a46:	f000 bd67 	b.w	d6518 <__cxa_atexit>

000d5a4a <_ZdlPvj>:
   d5a4a:	f7fe bb28 	b.w	d409e <_ZdlPv>

000d5a4e <_ZSt25__throw_bad_function_callv>:
   d5a4e:	b508      	push	{r3, lr}
   d5a50:	f7fe ff2e 	bl	d48b0 <abort>

000d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a54:	4b18      	ldr	r3, [pc, #96]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d1      	lsls	r1, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b16      	ldr	r3, [pc, #88]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d2      	lsls	r2, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b14      	ldr	r3, [pc, #80]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d0      	lsls	r0, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b12      	ldr	r3, [pc, #72]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d1      	lsls	r1, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b10      	ldr	r3, [pc, #64]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d2      	lsls	r2, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b0e      	ldr	r3, [pc, #56]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d0      	lsls	r0, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4b0c      	ldr	r3, [pc, #48]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d1      	lsls	r1, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b0a      	ldr	r3, [pc, #40]	; (d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d2      	lsls	r2, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4770      	bx	lr
   d5ab6:	bf00      	nop
   d5ab8:	2003e76c 	.word	0x2003e76c
   d5abc:	2003e768 	.word	0x2003e768
   d5ac0:	2003e764 	.word	0x2003e764
   d5ac4:	2003e760 	.word	0x2003e760
   d5ac8:	2003e75c 	.word	0x2003e75c
   d5acc:	2003e758 	.word	0x2003e758
   d5ad0:	2003e754 	.word	0x2003e754
   d5ad4:	2003e750 	.word	0x2003e750

000d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ad8:	4b24      	ldr	r3, [pc, #144]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d0      	lsls	r0, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b22      	ldr	r3, [pc, #136]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d1      	lsls	r1, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b20      	ldr	r3, [pc, #128]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d2      	lsls	r2, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b1e      	ldr	r3, [pc, #120]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d0      	lsls	r0, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b1c      	ldr	r3, [pc, #112]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d1      	lsls	r1, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b1a      	ldr	r3, [pc, #104]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d2      	lsls	r2, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b18      	ldr	r3, [pc, #96]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d0      	lsls	r0, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b16      	ldr	r3, [pc, #88]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d1      	lsls	r1, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b14      	ldr	r3, [pc, #80]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d2      	lsls	r2, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b12      	ldr	r3, [pc, #72]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d0      	lsls	r0, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b10      	ldr	r3, [pc, #64]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d1      	lsls	r1, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b0e      	ldr	r3, [pc, #56]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d2      	lsls	r2, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4770      	bx	lr
   d5b6a:	bf00      	nop
   d5b6c:	2003e79c 	.word	0x2003e79c
   d5b70:	2003e798 	.word	0x2003e798
   d5b74:	2003e794 	.word	0x2003e794
   d5b78:	2003e790 	.word	0x2003e790
   d5b7c:	2003e78c 	.word	0x2003e78c
   d5b80:	2003e788 	.word	0x2003e788
   d5b84:	2003e784 	.word	0x2003e784
   d5b88:	2003e780 	.word	0x2003e780
   d5b8c:	2003e77c 	.word	0x2003e77c
   d5b90:	2003e778 	.word	0x2003e778
   d5b94:	2003e774 	.word	0x2003e774
   d5b98:	2003e770 	.word	0x2003e770

000d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b9c:	4b24      	ldr	r3, [pc, #144]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d0      	lsls	r0, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b22      	ldr	r3, [pc, #136]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d1      	lsls	r1, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b20      	ldr	r3, [pc, #128]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d2      	lsls	r2, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b1e      	ldr	r3, [pc, #120]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d0      	lsls	r0, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b1c      	ldr	r3, [pc, #112]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d1      	lsls	r1, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b1a      	ldr	r3, [pc, #104]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d2      	lsls	r2, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b18      	ldr	r3, [pc, #96]	; (d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d0      	lsls	r0, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b16      	ldr	r3, [pc, #88]	; (d5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d1      	lsls	r1, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b14      	ldr	r3, [pc, #80]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d2      	lsls	r2, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b12      	ldr	r3, [pc, #72]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d0      	lsls	r0, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4b10      	ldr	r3, [pc, #64]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	07d1      	lsls	r1, r2, #31
   d5c1a:	bf5c      	itt	pl
   d5c1c:	2201      	movpl	r2, #1
   d5c1e:	601a      	strpl	r2, [r3, #0]
   d5c20:	4b0e      	ldr	r3, [pc, #56]	; (d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d2      	lsls	r2, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4770      	bx	lr
   d5c2e:	bf00      	nop
   d5c30:	2003e7cc 	.word	0x2003e7cc
   d5c34:	2003e7c8 	.word	0x2003e7c8
   d5c38:	2003e7c4 	.word	0x2003e7c4
   d5c3c:	2003e7c0 	.word	0x2003e7c0
   d5c40:	2003e7bc 	.word	0x2003e7bc
   d5c44:	2003e7b8 	.word	0x2003e7b8
   d5c48:	2003e7b4 	.word	0x2003e7b4
   d5c4c:	2003e7b0 	.word	0x2003e7b0
   d5c50:	2003e7ac 	.word	0x2003e7ac
   d5c54:	2003e7a8 	.word	0x2003e7a8
   d5c58:	2003e7a4 	.word	0x2003e7a4
   d5c5c:	2003e7a0 	.word	0x2003e7a0

000d5c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c60:	4b18      	ldr	r3, [pc, #96]	; (d5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d1      	lsls	r1, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b16      	ldr	r3, [pc, #88]	; (d5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d2      	lsls	r2, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b14      	ldr	r3, [pc, #80]	; (d5ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d0      	lsls	r0, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b12      	ldr	r3, [pc, #72]	; (d5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d1      	lsls	r1, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b10      	ldr	r3, [pc, #64]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d2      	lsls	r2, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b0e      	ldr	r3, [pc, #56]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d0      	lsls	r0, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b0c      	ldr	r3, [pc, #48]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d1      	lsls	r1, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b0a      	ldr	r3, [pc, #40]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d2      	lsls	r2, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4770      	bx	lr
   d5cc2:	bf00      	nop
   d5cc4:	2003e7ec 	.word	0x2003e7ec
   d5cc8:	2003e7e8 	.word	0x2003e7e8
   d5ccc:	2003e7e4 	.word	0x2003e7e4
   d5cd0:	2003e7e0 	.word	0x2003e7e0
   d5cd4:	2003e7dc 	.word	0x2003e7dc
   d5cd8:	2003e7d8 	.word	0x2003e7d8
   d5cdc:	2003e7d4 	.word	0x2003e7d4
   d5ce0:	2003e7d0 	.word	0x2003e7d0

000d5ce4 <__aeabi_drsub>:
   d5ce4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5ce8:	e002      	b.n	d5cf0 <__adddf3>
   d5cea:	bf00      	nop

000d5cec <__aeabi_dsub>:
   d5cec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5cf0 <__adddf3>:
   d5cf0:	b530      	push	{r4, r5, lr}
   d5cf2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5cf6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5cfa:	ea94 0f05 	teq	r4, r5
   d5cfe:	bf08      	it	eq
   d5d00:	ea90 0f02 	teqeq	r0, r2
   d5d04:	bf1f      	itttt	ne
   d5d06:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5d0a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5d0e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5d12:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d16:	f000 80e2 	beq.w	d5ede <__adddf3+0x1ee>
   d5d1a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5d1e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5d22:	bfb8      	it	lt
   d5d24:	426d      	neglt	r5, r5
   d5d26:	dd0c      	ble.n	d5d42 <__adddf3+0x52>
   d5d28:	442c      	add	r4, r5
   d5d2a:	ea80 0202 	eor.w	r2, r0, r2
   d5d2e:	ea81 0303 	eor.w	r3, r1, r3
   d5d32:	ea82 0000 	eor.w	r0, r2, r0
   d5d36:	ea83 0101 	eor.w	r1, r3, r1
   d5d3a:	ea80 0202 	eor.w	r2, r0, r2
   d5d3e:	ea81 0303 	eor.w	r3, r1, r3
   d5d42:	2d36      	cmp	r5, #54	; 0x36
   d5d44:	bf88      	it	hi
   d5d46:	bd30      	pophi	{r4, r5, pc}
   d5d48:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d50:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d54:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d58:	d002      	beq.n	d5d60 <__adddf3+0x70>
   d5d5a:	4240      	negs	r0, r0
   d5d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d60:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d68:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5d6c:	d002      	beq.n	d5d74 <__adddf3+0x84>
   d5d6e:	4252      	negs	r2, r2
   d5d70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5d74:	ea94 0f05 	teq	r4, r5
   d5d78:	f000 80a7 	beq.w	d5eca <__adddf3+0x1da>
   d5d7c:	f1a4 0401 	sub.w	r4, r4, #1
   d5d80:	f1d5 0e20 	rsbs	lr, r5, #32
   d5d84:	db0d      	blt.n	d5da2 <__adddf3+0xb2>
   d5d86:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5d8a:	fa22 f205 	lsr.w	r2, r2, r5
   d5d8e:	1880      	adds	r0, r0, r2
   d5d90:	f141 0100 	adc.w	r1, r1, #0
   d5d94:	fa03 f20e 	lsl.w	r2, r3, lr
   d5d98:	1880      	adds	r0, r0, r2
   d5d9a:	fa43 f305 	asr.w	r3, r3, r5
   d5d9e:	4159      	adcs	r1, r3
   d5da0:	e00e      	b.n	d5dc0 <__adddf3+0xd0>
   d5da2:	f1a5 0520 	sub.w	r5, r5, #32
   d5da6:	f10e 0e20 	add.w	lr, lr, #32
   d5daa:	2a01      	cmp	r2, #1
   d5dac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5db0:	bf28      	it	cs
   d5db2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5db6:	fa43 f305 	asr.w	r3, r3, r5
   d5dba:	18c0      	adds	r0, r0, r3
   d5dbc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5dc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dc4:	d507      	bpl.n	d5dd6 <__adddf3+0xe6>
   d5dc6:	f04f 0e00 	mov.w	lr, #0
   d5dca:	f1dc 0c00 	rsbs	ip, ip, #0
   d5dce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5dd2:	eb6e 0101 	sbc.w	r1, lr, r1
   d5dd6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5dda:	d31b      	bcc.n	d5e14 <__adddf3+0x124>
   d5ddc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5de0:	d30c      	bcc.n	d5dfc <__adddf3+0x10c>
   d5de2:	0849      	lsrs	r1, r1, #1
   d5de4:	ea5f 0030 	movs.w	r0, r0, rrx
   d5de8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5dec:	f104 0401 	add.w	r4, r4, #1
   d5df0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5df4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5df8:	f080 809a 	bcs.w	d5f30 <__adddf3+0x240>
   d5dfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5e00:	bf08      	it	eq
   d5e02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e06:	f150 0000 	adcs.w	r0, r0, #0
   d5e0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e0e:	ea41 0105 	orr.w	r1, r1, r5
   d5e12:	bd30      	pop	{r4, r5, pc}
   d5e14:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5e18:	4140      	adcs	r0, r0
   d5e1a:	eb41 0101 	adc.w	r1, r1, r1
   d5e1e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e22:	f1a4 0401 	sub.w	r4, r4, #1
   d5e26:	d1e9      	bne.n	d5dfc <__adddf3+0x10c>
   d5e28:	f091 0f00 	teq	r1, #0
   d5e2c:	bf04      	itt	eq
   d5e2e:	4601      	moveq	r1, r0
   d5e30:	2000      	moveq	r0, #0
   d5e32:	fab1 f381 	clz	r3, r1
   d5e36:	bf08      	it	eq
   d5e38:	3320      	addeq	r3, #32
   d5e3a:	f1a3 030b 	sub.w	r3, r3, #11
   d5e3e:	f1b3 0220 	subs.w	r2, r3, #32
   d5e42:	da0c      	bge.n	d5e5e <__adddf3+0x16e>
   d5e44:	320c      	adds	r2, #12
   d5e46:	dd08      	ble.n	d5e5a <__adddf3+0x16a>
   d5e48:	f102 0c14 	add.w	ip, r2, #20
   d5e4c:	f1c2 020c 	rsb	r2, r2, #12
   d5e50:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e54:	fa21 f102 	lsr.w	r1, r1, r2
   d5e58:	e00c      	b.n	d5e74 <__adddf3+0x184>
   d5e5a:	f102 0214 	add.w	r2, r2, #20
   d5e5e:	bfd8      	it	le
   d5e60:	f1c2 0c20 	rsble	ip, r2, #32
   d5e64:	fa01 f102 	lsl.w	r1, r1, r2
   d5e68:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5e6c:	bfdc      	itt	le
   d5e6e:	ea41 010c 	orrle.w	r1, r1, ip
   d5e72:	4090      	lslle	r0, r2
   d5e74:	1ae4      	subs	r4, r4, r3
   d5e76:	bfa2      	ittt	ge
   d5e78:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5e7c:	4329      	orrge	r1, r5
   d5e7e:	bd30      	popge	{r4, r5, pc}
   d5e80:	ea6f 0404 	mvn.w	r4, r4
   d5e84:	3c1f      	subs	r4, #31
   d5e86:	da1c      	bge.n	d5ec2 <__adddf3+0x1d2>
   d5e88:	340c      	adds	r4, #12
   d5e8a:	dc0e      	bgt.n	d5eaa <__adddf3+0x1ba>
   d5e8c:	f104 0414 	add.w	r4, r4, #20
   d5e90:	f1c4 0220 	rsb	r2, r4, #32
   d5e94:	fa20 f004 	lsr.w	r0, r0, r4
   d5e98:	fa01 f302 	lsl.w	r3, r1, r2
   d5e9c:	ea40 0003 	orr.w	r0, r0, r3
   d5ea0:	fa21 f304 	lsr.w	r3, r1, r4
   d5ea4:	ea45 0103 	orr.w	r1, r5, r3
   d5ea8:	bd30      	pop	{r4, r5, pc}
   d5eaa:	f1c4 040c 	rsb	r4, r4, #12
   d5eae:	f1c4 0220 	rsb	r2, r4, #32
   d5eb2:	fa20 f002 	lsr.w	r0, r0, r2
   d5eb6:	fa01 f304 	lsl.w	r3, r1, r4
   d5eba:	ea40 0003 	orr.w	r0, r0, r3
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	bd30      	pop	{r4, r5, pc}
   d5ec2:	fa21 f004 	lsr.w	r0, r1, r4
   d5ec6:	4629      	mov	r1, r5
   d5ec8:	bd30      	pop	{r4, r5, pc}
   d5eca:	f094 0f00 	teq	r4, #0
   d5ece:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5ed2:	bf06      	itte	eq
   d5ed4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5ed8:	3401      	addeq	r4, #1
   d5eda:	3d01      	subne	r5, #1
   d5edc:	e74e      	b.n	d5d7c <__adddf3+0x8c>
   d5ede:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ee2:	bf18      	it	ne
   d5ee4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ee8:	d029      	beq.n	d5f3e <__adddf3+0x24e>
   d5eea:	ea94 0f05 	teq	r4, r5
   d5eee:	bf08      	it	eq
   d5ef0:	ea90 0f02 	teqeq	r0, r2
   d5ef4:	d005      	beq.n	d5f02 <__adddf3+0x212>
   d5ef6:	ea54 0c00 	orrs.w	ip, r4, r0
   d5efa:	bf04      	itt	eq
   d5efc:	4619      	moveq	r1, r3
   d5efe:	4610      	moveq	r0, r2
   d5f00:	bd30      	pop	{r4, r5, pc}
   d5f02:	ea91 0f03 	teq	r1, r3
   d5f06:	bf1e      	ittt	ne
   d5f08:	2100      	movne	r1, #0
   d5f0a:	2000      	movne	r0, #0
   d5f0c:	bd30      	popne	{r4, r5, pc}
   d5f0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5f12:	d105      	bne.n	d5f20 <__adddf3+0x230>
   d5f14:	0040      	lsls	r0, r0, #1
   d5f16:	4149      	adcs	r1, r1
   d5f18:	bf28      	it	cs
   d5f1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5f1e:	bd30      	pop	{r4, r5, pc}
   d5f20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5f24:	bf3c      	itt	cc
   d5f26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5f2a:	bd30      	popcc	{r4, r5, pc}
   d5f2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5f34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f38:	f04f 0000 	mov.w	r0, #0
   d5f3c:	bd30      	pop	{r4, r5, pc}
   d5f3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f42:	bf1a      	itte	ne
   d5f44:	4619      	movne	r1, r3
   d5f46:	4610      	movne	r0, r2
   d5f48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f4c:	bf1c      	itt	ne
   d5f4e:	460b      	movne	r3, r1
   d5f50:	4602      	movne	r2, r0
   d5f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f56:	bf06      	itte	eq
   d5f58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f5c:	ea91 0f03 	teqeq	r1, r3
   d5f60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f64:	bd30      	pop	{r4, r5, pc}
   d5f66:	bf00      	nop

000d5f68 <__aeabi_ui2d>:
   d5f68:	f090 0f00 	teq	r0, #0
   d5f6c:	bf04      	itt	eq
   d5f6e:	2100      	moveq	r1, #0
   d5f70:	4770      	bxeq	lr
   d5f72:	b530      	push	{r4, r5, lr}
   d5f74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f7c:	f04f 0500 	mov.w	r5, #0
   d5f80:	f04f 0100 	mov.w	r1, #0
   d5f84:	e750      	b.n	d5e28 <__adddf3+0x138>
   d5f86:	bf00      	nop

000d5f88 <__aeabi_i2d>:
   d5f88:	f090 0f00 	teq	r0, #0
   d5f8c:	bf04      	itt	eq
   d5f8e:	2100      	moveq	r1, #0
   d5f90:	4770      	bxeq	lr
   d5f92:	b530      	push	{r4, r5, lr}
   d5f94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5fa0:	bf48      	it	mi
   d5fa2:	4240      	negmi	r0, r0
   d5fa4:	f04f 0100 	mov.w	r1, #0
   d5fa8:	e73e      	b.n	d5e28 <__adddf3+0x138>
   d5faa:	bf00      	nop

000d5fac <__aeabi_f2d>:
   d5fac:	0042      	lsls	r2, r0, #1
   d5fae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5fb2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5fb6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5fba:	bf1f      	itttt	ne
   d5fbc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5fc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fc4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5fc8:	4770      	bxne	lr
   d5fca:	f092 0f00 	teq	r2, #0
   d5fce:	bf14      	ite	ne
   d5fd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fd4:	4770      	bxeq	lr
   d5fd6:	b530      	push	{r4, r5, lr}
   d5fd8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5fdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fe4:	e720      	b.n	d5e28 <__adddf3+0x138>
   d5fe6:	bf00      	nop

000d5fe8 <__aeabi_ul2d>:
   d5fe8:	ea50 0201 	orrs.w	r2, r0, r1
   d5fec:	bf08      	it	eq
   d5fee:	4770      	bxeq	lr
   d5ff0:	b530      	push	{r4, r5, lr}
   d5ff2:	f04f 0500 	mov.w	r5, #0
   d5ff6:	e00a      	b.n	d600e <__aeabi_l2d+0x16>

000d5ff8 <__aeabi_l2d>:
   d5ff8:	ea50 0201 	orrs.w	r2, r0, r1
   d5ffc:	bf08      	it	eq
   d5ffe:	4770      	bxeq	lr
   d6000:	b530      	push	{r4, r5, lr}
   d6002:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6006:	d502      	bpl.n	d600e <__aeabi_l2d+0x16>
   d6008:	4240      	negs	r0, r0
   d600a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d600e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6012:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6016:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d601a:	f43f aedc 	beq.w	d5dd6 <__adddf3+0xe6>
   d601e:	f04f 0203 	mov.w	r2, #3
   d6022:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6026:	bf18      	it	ne
   d6028:	3203      	addne	r2, #3
   d602a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d602e:	bf18      	it	ne
   d6030:	3203      	addne	r2, #3
   d6032:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6036:	f1c2 0320 	rsb	r3, r2, #32
   d603a:	fa00 fc03 	lsl.w	ip, r0, r3
   d603e:	fa20 f002 	lsr.w	r0, r0, r2
   d6042:	fa01 fe03 	lsl.w	lr, r1, r3
   d6046:	ea40 000e 	orr.w	r0, r0, lr
   d604a:	fa21 f102 	lsr.w	r1, r1, r2
   d604e:	4414      	add	r4, r2
   d6050:	e6c1      	b.n	d5dd6 <__adddf3+0xe6>
   d6052:	bf00      	nop

000d6054 <__aeabi_dmul>:
   d6054:	b570      	push	{r4, r5, r6, lr}
   d6056:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d605a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d605e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6062:	bf1d      	ittte	ne
   d6064:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6068:	ea94 0f0c 	teqne	r4, ip
   d606c:	ea95 0f0c 	teqne	r5, ip
   d6070:	f000 f8de 	bleq	d6230 <__aeabi_dmul+0x1dc>
   d6074:	442c      	add	r4, r5
   d6076:	ea81 0603 	eor.w	r6, r1, r3
   d607a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d607e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6082:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6086:	bf18      	it	ne
   d6088:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d608c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6094:	d038      	beq.n	d6108 <__aeabi_dmul+0xb4>
   d6096:	fba0 ce02 	umull	ip, lr, r0, r2
   d609a:	f04f 0500 	mov.w	r5, #0
   d609e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d60a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d60a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d60aa:	f04f 0600 	mov.w	r6, #0
   d60ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   d60b2:	f09c 0f00 	teq	ip, #0
   d60b6:	bf18      	it	ne
   d60b8:	f04e 0e01 	orrne.w	lr, lr, #1
   d60bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d60c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d60c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d60c8:	d204      	bcs.n	d60d4 <__aeabi_dmul+0x80>
   d60ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d60ce:	416d      	adcs	r5, r5
   d60d0:	eb46 0606 	adc.w	r6, r6, r6
   d60d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d60d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d60dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d60e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d60e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d60e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60ec:	bf88      	it	hi
   d60ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60f2:	d81e      	bhi.n	d6132 <__aeabi_dmul+0xde>
   d60f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d60f8:	bf08      	it	eq
   d60fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d60fe:	f150 0000 	adcs.w	r0, r0, #0
   d6102:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6106:	bd70      	pop	{r4, r5, r6, pc}
   d6108:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d610c:	ea46 0101 	orr.w	r1, r6, r1
   d6110:	ea40 0002 	orr.w	r0, r0, r2
   d6114:	ea81 0103 	eor.w	r1, r1, r3
   d6118:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d611c:	bfc2      	ittt	gt
   d611e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6122:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6126:	bd70      	popgt	{r4, r5, r6, pc}
   d6128:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d612c:	f04f 0e00 	mov.w	lr, #0
   d6130:	3c01      	subs	r4, #1
   d6132:	f300 80ab 	bgt.w	d628c <__aeabi_dmul+0x238>
   d6136:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d613a:	bfde      	ittt	le
   d613c:	2000      	movle	r0, #0
   d613e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6142:	bd70      	pople	{r4, r5, r6, pc}
   d6144:	f1c4 0400 	rsb	r4, r4, #0
   d6148:	3c20      	subs	r4, #32
   d614a:	da35      	bge.n	d61b8 <__aeabi_dmul+0x164>
   d614c:	340c      	adds	r4, #12
   d614e:	dc1b      	bgt.n	d6188 <__aeabi_dmul+0x134>
   d6150:	f104 0414 	add.w	r4, r4, #20
   d6154:	f1c4 0520 	rsb	r5, r4, #32
   d6158:	fa00 f305 	lsl.w	r3, r0, r5
   d615c:	fa20 f004 	lsr.w	r0, r0, r4
   d6160:	fa01 f205 	lsl.w	r2, r1, r5
   d6164:	ea40 0002 	orr.w	r0, r0, r2
   d6168:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d616c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6170:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6174:	fa21 f604 	lsr.w	r6, r1, r4
   d6178:	eb42 0106 	adc.w	r1, r2, r6
   d617c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6180:	bf08      	it	eq
   d6182:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6186:	bd70      	pop	{r4, r5, r6, pc}
   d6188:	f1c4 040c 	rsb	r4, r4, #12
   d618c:	f1c4 0520 	rsb	r5, r4, #32
   d6190:	fa00 f304 	lsl.w	r3, r0, r4
   d6194:	fa20 f005 	lsr.w	r0, r0, r5
   d6198:	fa01 f204 	lsl.w	r2, r1, r4
   d619c:	ea40 0002 	orr.w	r0, r0, r2
   d61a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d61a8:	f141 0100 	adc.w	r1, r1, #0
   d61ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61b0:	bf08      	it	eq
   d61b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61b6:	bd70      	pop	{r4, r5, r6, pc}
   d61b8:	f1c4 0520 	rsb	r5, r4, #32
   d61bc:	fa00 f205 	lsl.w	r2, r0, r5
   d61c0:	ea4e 0e02 	orr.w	lr, lr, r2
   d61c4:	fa20 f304 	lsr.w	r3, r0, r4
   d61c8:	fa01 f205 	lsl.w	r2, r1, r5
   d61cc:	ea43 0302 	orr.w	r3, r3, r2
   d61d0:	fa21 f004 	lsr.w	r0, r1, r4
   d61d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61d8:	fa21 f204 	lsr.w	r2, r1, r4
   d61dc:	ea20 0002 	bic.w	r0, r0, r2
   d61e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d61e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61e8:	bf08      	it	eq
   d61ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61ee:	bd70      	pop	{r4, r5, r6, pc}
   d61f0:	f094 0f00 	teq	r4, #0
   d61f4:	d10f      	bne.n	d6216 <__aeabi_dmul+0x1c2>
   d61f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d61fa:	0040      	lsls	r0, r0, #1
   d61fc:	eb41 0101 	adc.w	r1, r1, r1
   d6200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6204:	bf08      	it	eq
   d6206:	3c01      	subeq	r4, #1
   d6208:	d0f7      	beq.n	d61fa <__aeabi_dmul+0x1a6>
   d620a:	ea41 0106 	orr.w	r1, r1, r6
   d620e:	f095 0f00 	teq	r5, #0
   d6212:	bf18      	it	ne
   d6214:	4770      	bxne	lr
   d6216:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d621a:	0052      	lsls	r2, r2, #1
   d621c:	eb43 0303 	adc.w	r3, r3, r3
   d6220:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6224:	bf08      	it	eq
   d6226:	3d01      	subeq	r5, #1
   d6228:	d0f7      	beq.n	d621a <__aeabi_dmul+0x1c6>
   d622a:	ea43 0306 	orr.w	r3, r3, r6
   d622e:	4770      	bx	lr
   d6230:	ea94 0f0c 	teq	r4, ip
   d6234:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6238:	bf18      	it	ne
   d623a:	ea95 0f0c 	teqne	r5, ip
   d623e:	d00c      	beq.n	d625a <__aeabi_dmul+0x206>
   d6240:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6244:	bf18      	it	ne
   d6246:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d624a:	d1d1      	bne.n	d61f0 <__aeabi_dmul+0x19c>
   d624c:	ea81 0103 	eor.w	r1, r1, r3
   d6250:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6254:	f04f 0000 	mov.w	r0, #0
   d6258:	bd70      	pop	{r4, r5, r6, pc}
   d625a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d625e:	bf06      	itte	eq
   d6260:	4610      	moveq	r0, r2
   d6262:	4619      	moveq	r1, r3
   d6264:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6268:	d019      	beq.n	d629e <__aeabi_dmul+0x24a>
   d626a:	ea94 0f0c 	teq	r4, ip
   d626e:	d102      	bne.n	d6276 <__aeabi_dmul+0x222>
   d6270:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6274:	d113      	bne.n	d629e <__aeabi_dmul+0x24a>
   d6276:	ea95 0f0c 	teq	r5, ip
   d627a:	d105      	bne.n	d6288 <__aeabi_dmul+0x234>
   d627c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6280:	bf1c      	itt	ne
   d6282:	4610      	movne	r0, r2
   d6284:	4619      	movne	r1, r3
   d6286:	d10a      	bne.n	d629e <__aeabi_dmul+0x24a>
   d6288:	ea81 0103 	eor.w	r1, r1, r3
   d628c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6290:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6294:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6298:	f04f 0000 	mov.w	r0, #0
   d629c:	bd70      	pop	{r4, r5, r6, pc}
   d629e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d62a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d62a6:	bd70      	pop	{r4, r5, r6, pc}

000d62a8 <__aeabi_ddiv>:
   d62a8:	b570      	push	{r4, r5, r6, lr}
   d62aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d62ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d62b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d62b6:	bf1d      	ittte	ne
   d62b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d62bc:	ea94 0f0c 	teqne	r4, ip
   d62c0:	ea95 0f0c 	teqne	r5, ip
   d62c4:	f000 f8a7 	bleq	d6416 <__aeabi_ddiv+0x16e>
   d62c8:	eba4 0405 	sub.w	r4, r4, r5
   d62cc:	ea81 0e03 	eor.w	lr, r1, r3
   d62d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62d8:	f000 8088 	beq.w	d63ec <__aeabi_ddiv+0x144>
   d62dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d62e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d62e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d62ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d62f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d62f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d62f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d62fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6300:	429d      	cmp	r5, r3
   d6302:	bf08      	it	eq
   d6304:	4296      	cmpeq	r6, r2
   d6306:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d630a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d630e:	d202      	bcs.n	d6316 <__aeabi_ddiv+0x6e>
   d6310:	085b      	lsrs	r3, r3, #1
   d6312:	ea4f 0232 	mov.w	r2, r2, rrx
   d6316:	1ab6      	subs	r6, r6, r2
   d6318:	eb65 0503 	sbc.w	r5, r5, r3
   d631c:	085b      	lsrs	r3, r3, #1
   d631e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6322:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6326:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d632a:	ebb6 0e02 	subs.w	lr, r6, r2
   d632e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6332:	bf22      	ittt	cs
   d6334:	1ab6      	subcs	r6, r6, r2
   d6336:	4675      	movcs	r5, lr
   d6338:	ea40 000c 	orrcs.w	r0, r0, ip
   d633c:	085b      	lsrs	r3, r3, #1
   d633e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6342:	ebb6 0e02 	subs.w	lr, r6, r2
   d6346:	eb75 0e03 	sbcs.w	lr, r5, r3
   d634a:	bf22      	ittt	cs
   d634c:	1ab6      	subcs	r6, r6, r2
   d634e:	4675      	movcs	r5, lr
   d6350:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6354:	085b      	lsrs	r3, r3, #1
   d6356:	ea4f 0232 	mov.w	r2, r2, rrx
   d635a:	ebb6 0e02 	subs.w	lr, r6, r2
   d635e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6362:	bf22      	ittt	cs
   d6364:	1ab6      	subcs	r6, r6, r2
   d6366:	4675      	movcs	r5, lr
   d6368:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d636c:	085b      	lsrs	r3, r3, #1
   d636e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6372:	ebb6 0e02 	subs.w	lr, r6, r2
   d6376:	eb75 0e03 	sbcs.w	lr, r5, r3
   d637a:	bf22      	ittt	cs
   d637c:	1ab6      	subcs	r6, r6, r2
   d637e:	4675      	movcs	r5, lr
   d6380:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6384:	ea55 0e06 	orrs.w	lr, r5, r6
   d6388:	d018      	beq.n	d63bc <__aeabi_ddiv+0x114>
   d638a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d638e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6392:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6396:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d639a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d639e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d63a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d63a6:	d1c0      	bne.n	d632a <__aeabi_ddiv+0x82>
   d63a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63ac:	d10b      	bne.n	d63c6 <__aeabi_ddiv+0x11e>
   d63ae:	ea41 0100 	orr.w	r1, r1, r0
   d63b2:	f04f 0000 	mov.w	r0, #0
   d63b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d63ba:	e7b6      	b.n	d632a <__aeabi_ddiv+0x82>
   d63bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63c0:	bf04      	itt	eq
   d63c2:	4301      	orreq	r1, r0
   d63c4:	2000      	moveq	r0, #0
   d63c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63ca:	bf88      	it	hi
   d63cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63d0:	f63f aeaf 	bhi.w	d6132 <__aeabi_dmul+0xde>
   d63d4:	ebb5 0c03 	subs.w	ip, r5, r3
   d63d8:	bf04      	itt	eq
   d63da:	ebb6 0c02 	subseq.w	ip, r6, r2
   d63de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63e2:	f150 0000 	adcs.w	r0, r0, #0
   d63e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63ea:	bd70      	pop	{r4, r5, r6, pc}
   d63ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d63f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d63f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d63f8:	bfc2      	ittt	gt
   d63fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6402:	bd70      	popgt	{r4, r5, r6, pc}
   d6404:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6408:	f04f 0e00 	mov.w	lr, #0
   d640c:	3c01      	subs	r4, #1
   d640e:	e690      	b.n	d6132 <__aeabi_dmul+0xde>
   d6410:	ea45 0e06 	orr.w	lr, r5, r6
   d6414:	e68d      	b.n	d6132 <__aeabi_dmul+0xde>
   d6416:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d641a:	ea94 0f0c 	teq	r4, ip
   d641e:	bf08      	it	eq
   d6420:	ea95 0f0c 	teqeq	r5, ip
   d6424:	f43f af3b 	beq.w	d629e <__aeabi_dmul+0x24a>
   d6428:	ea94 0f0c 	teq	r4, ip
   d642c:	d10a      	bne.n	d6444 <__aeabi_ddiv+0x19c>
   d642e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6432:	f47f af34 	bne.w	d629e <__aeabi_dmul+0x24a>
   d6436:	ea95 0f0c 	teq	r5, ip
   d643a:	f47f af25 	bne.w	d6288 <__aeabi_dmul+0x234>
   d643e:	4610      	mov	r0, r2
   d6440:	4619      	mov	r1, r3
   d6442:	e72c      	b.n	d629e <__aeabi_dmul+0x24a>
   d6444:	ea95 0f0c 	teq	r5, ip
   d6448:	d106      	bne.n	d6458 <__aeabi_ddiv+0x1b0>
   d644a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d644e:	f43f aefd 	beq.w	d624c <__aeabi_dmul+0x1f8>
   d6452:	4610      	mov	r0, r2
   d6454:	4619      	mov	r1, r3
   d6456:	e722      	b.n	d629e <__aeabi_dmul+0x24a>
   d6458:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d645c:	bf18      	it	ne
   d645e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6462:	f47f aec5 	bne.w	d61f0 <__aeabi_dmul+0x19c>
   d6466:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d646a:	f47f af0d 	bne.w	d6288 <__aeabi_dmul+0x234>
   d646e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6472:	f47f aeeb 	bne.w	d624c <__aeabi_dmul+0x1f8>
   d6476:	e712      	b.n	d629e <__aeabi_dmul+0x24a>

000d6478 <__aeabi_d2f>:
   d6478:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d647c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6480:	bf24      	itt	cs
   d6482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d648a:	d90d      	bls.n	d64a8 <__aeabi_d2f+0x30>
   d648c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d649c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d64a0:	bf08      	it	eq
   d64a2:	f020 0001 	biceq.w	r0, r0, #1
   d64a6:	4770      	bx	lr
   d64a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d64ac:	d121      	bne.n	d64f2 <__aeabi_d2f+0x7a>
   d64ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d64b2:	bfbc      	itt	lt
   d64b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d64b8:	4770      	bxlt	lr
   d64ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d64c2:	f1c2 0218 	rsb	r2, r2, #24
   d64c6:	f1c2 0c20 	rsb	ip, r2, #32
   d64ca:	fa10 f30c 	lsls.w	r3, r0, ip
   d64ce:	fa20 f002 	lsr.w	r0, r0, r2
   d64d2:	bf18      	it	ne
   d64d4:	f040 0001 	orrne.w	r0, r0, #1
   d64d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d64e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d64e4:	ea40 000c 	orr.w	r0, r0, ip
   d64e8:	fa23 f302 	lsr.w	r3, r3, r2
   d64ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d64f0:	e7cc      	b.n	d648c <__aeabi_d2f+0x14>
   d64f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d64f6:	d107      	bne.n	d6508 <__aeabi_d2f+0x90>
   d64f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d64fc:	bf1e      	ittt	ne
   d64fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6506:	4770      	bxne	lr
   d6508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d650c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6514:	4770      	bx	lr
   d6516:	bf00      	nop

000d6518 <__cxa_atexit>:
   d6518:	b510      	push	{r4, lr}
   d651a:	4c05      	ldr	r4, [pc, #20]	; (d6530 <__cxa_atexit+0x18>)
   d651c:	4613      	mov	r3, r2
   d651e:	b12c      	cbz	r4, d652c <__cxa_atexit+0x14>
   d6520:	460a      	mov	r2, r1
   d6522:	4601      	mov	r1, r0
   d6524:	2002      	movs	r0, #2
   d6526:	f3af 8000 	nop.w
   d652a:	bd10      	pop	{r4, pc}
   d652c:	4620      	mov	r0, r4
   d652e:	bd10      	pop	{r4, pc}
   d6530:	00000000 	.word	0x00000000

000d6534 <memcpy>:
   d6534:	b510      	push	{r4, lr}
   d6536:	1e43      	subs	r3, r0, #1
   d6538:	440a      	add	r2, r1
   d653a:	4291      	cmp	r1, r2
   d653c:	d004      	beq.n	d6548 <memcpy+0x14>
   d653e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6542:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6546:	e7f8      	b.n	d653a <memcpy+0x6>
   d6548:	bd10      	pop	{r4, pc}

000d654a <memset>:
   d654a:	4402      	add	r2, r0
   d654c:	4603      	mov	r3, r0
   d654e:	4293      	cmp	r3, r2
   d6550:	d002      	beq.n	d6558 <memset+0xe>
   d6552:	f803 1b01 	strb.w	r1, [r3], #1
   d6556:	e7fa      	b.n	d654e <memset+0x4>
   d6558:	4770      	bx	lr
	...

000d655c <srand>:
   d655c:	b538      	push	{r3, r4, r5, lr}
   d655e:	4b12      	ldr	r3, [pc, #72]	; (d65a8 <srand+0x4c>)
   d6560:	681c      	ldr	r4, [r3, #0]
   d6562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6564:	4605      	mov	r5, r0
   d6566:	b9d3      	cbnz	r3, d659e <srand+0x42>
   d6568:	2018      	movs	r0, #24
   d656a:	f7fe f989 	bl	d4880 <malloc>
   d656e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6572:	63a0      	str	r0, [r4, #56]	; 0x38
   d6574:	8003      	strh	r3, [r0, #0]
   d6576:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d657a:	8043      	strh	r3, [r0, #2]
   d657c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6580:	8083      	strh	r3, [r0, #4]
   d6582:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6586:	80c3      	strh	r3, [r0, #6]
   d6588:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d658c:	8103      	strh	r3, [r0, #8]
   d658e:	2305      	movs	r3, #5
   d6590:	8143      	strh	r3, [r0, #10]
   d6592:	230b      	movs	r3, #11
   d6594:	8183      	strh	r3, [r0, #12]
   d6596:	2201      	movs	r2, #1
   d6598:	2300      	movs	r3, #0
   d659a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d659e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d65a0:	2200      	movs	r2, #0
   d65a2:	611d      	str	r5, [r3, #16]
   d65a4:	615a      	str	r2, [r3, #20]
   d65a6:	bd38      	pop	{r3, r4, r5, pc}
   d65a8:	2003e3b0 	.word	0x2003e3b0

000d65ac <strdup>:
   d65ac:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <strdup+0xc>)
   d65ae:	4601      	mov	r1, r0
   d65b0:	6818      	ldr	r0, [r3, #0]
   d65b2:	f000 b803 	b.w	d65bc <_strdup_r>
   d65b6:	bf00      	nop
   d65b8:	2003e3b0 	.word	0x2003e3b0

000d65bc <_strdup_r>:
   d65bc:	b570      	push	{r4, r5, r6, lr}
   d65be:	4606      	mov	r6, r0
   d65c0:	4608      	mov	r0, r1
   d65c2:	460c      	mov	r4, r1
   d65c4:	f000 f80d 	bl	d65e2 <strlen>
   d65c8:	1c45      	adds	r5, r0, #1
   d65ca:	4629      	mov	r1, r5
   d65cc:	4630      	mov	r0, r6
   d65ce:	f7fe f977 	bl	d48c0 <_malloc_r>
   d65d2:	4606      	mov	r6, r0
   d65d4:	b118      	cbz	r0, d65de <_strdup_r+0x22>
   d65d6:	462a      	mov	r2, r5
   d65d8:	4621      	mov	r1, r4
   d65da:	f7ff ffab 	bl	d6534 <memcpy>
   d65de:	4630      	mov	r0, r6
   d65e0:	bd70      	pop	{r4, r5, r6, pc}

000d65e2 <strlen>:
   d65e2:	4603      	mov	r3, r0
   d65e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d65e8:	2a00      	cmp	r2, #0
   d65ea:	d1fb      	bne.n	d65e4 <strlen+0x2>
   d65ec:	1a18      	subs	r0, r3, r0
   d65ee:	3801      	subs	r0, #1
   d65f0:	4770      	bx	lr

000d65f2 <link_code_end>:
	...

000d65f4 <dynalib_user>:
   d65f4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6604:	0000 0000 6574 706d 7265 7461 7275 0065     ....temperature.
   d6614:	7568 696d 6964 7974 0000 0000               humidity....

000d6620 <_ZTVN5spark12NetworkClassE>:
	...
   d6628:	48e3 000d 48ed 000d 48f7 000d 4901 000d     .H...H...H...I..
   d6638:	490b 000d 4917 000d 4923 000d 492f 000d     .I...I..#I../I..
   d6648:	4937 000d 4941 000d 494b 000d               7I..AI..KI..

000d6654 <_ZTVN5spark9MeshClassE>:
	...
   d665c:	4a8b 000d 4a81 000d 4a77 000d 4a6d 000d     .J...J..wJ..mJ..
   d666c:	4a61 000d 4a55 000d 4a49 000d 4a41 000d     aJ..UJ..IJ..AJ..
   d667c:	4a37 000d 4a2d 000d 494b 000d               7J..-J..KI..

000d6688 <_ZTVN5spark9WiFiClassE>:
	...
   d6690:	4bef 000d 4be5 000d 4bdb 000d 4b91 000d     .K...K...K...K..
   d66a0:	4bcf 000d 4bc3 000d 4bb7 000d 4baf 000d     .K...K...K...K..
   d66b0:	4ba5 000d 4b9b 000d 494b 000d               .K...K..KI..

000d66bc <_ZTV7TwoWire>:
	...
   d66c4:	4c0d 000d 4c57 000d 4c2f 000d 4c0f 000d     .L..WL../L...L..
   d66d4:	4c37 000d 4c3f 000d 4c47 000d 4c4f 000d     7L..?L..GL..OL..

000d66e4 <_ZTV11USARTSerial>:
	...
   d66ec:	4cf5 000d 4d45 000d 4d53 000d 56bd 000d     .L..EM..SM...V..
   d66fc:	4d09 000d 4d2b 000d 4d17 000d 4d3f 000d     .M..+M...M..?M..
   d670c:	4cf7 000d 4cfb 000d                         .L...L..

000d6714 <_ZTV9USBSerial>:
	...
   d671c:	4e03 000d 4e53 000d 4e61 000d 56bd 000d     .N..SN..aN...V..
   d672c:	4e3f 000d 4e05 000d 4e1b 000d 4e4d 000d     ?N...N...N..MN..
   d673c:	4e31 000d 4dff 000d                         1N...M..

000d6744 <_ZTV9IPAddress>:
	...
   d674c:	4f19 000d 4f09 000d 4f0b 000d               .O...O...O..

000d6758 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6760:	4fed 000d 4ff3 000d 5037 000d 5001 000d     .O...O..7P...P..
   d6770:	4fef 000d 005a 2b25 3330 3a64 3025 7532     .O..Z.%+03d:%02u
   d6780:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d6790:	5325 7a25 6100 6373 6974 656d 6200 7561     %S%z.asctime.bau
   d67a0:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d67b0:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d67c0:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d67d0:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d67e0:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d67f0:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d6800:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d6810:	7061 0070 3025 3031 2075 5d00 0020 6425     app.%010u .] .%d
   d6820:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   d6830:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   d6840:	0020 0a0d 6600 6c00 006e 6e66 6300 646f      ....f.ln.fn.cod
   d6850:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   d6860:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   d6870:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

000d6880 <_ZTV8SPIClass>:
	...
   d6888:	5909 000d 590b 000d                         .Y...Y..

000d6890 <_ZTVN5spark13EthernetClassE>:
	...
   d6898:	599f 000d 5995 000d 598b 000d 5981 000d     .Y...Y...Y...Y..
   d68a8:	5975 000d 5969 000d 595d 000d 5955 000d     uY..iY..]Y..UY..
   d68b8:	594b 000d 5941 000d 494b 000d               KY..AY..KI..

000d68c4 <__sf_fake_stdin>:
	...

000d68e4 <__sf_fake_stdout>:
	...

000d6904 <__sf_fake_stderr>:
	...
   d6924:	0043                                        C.

000d6926 <link_const_variable_data_end>:
	...

000d6928 <link_constructors_location>:
   d6928:	000d4199 	.word	0x000d4199
   d692c:	000d4513 	.word	0x000d4513
   d6930:	000d4a19 	.word	0x000d4a19
   d6934:	000d4b41 	.word	0x000d4b41
   d6938:	000d4bf9 	.word	0x000d4bf9
   d693c:	000d5675 	.word	0x000d5675
   d6940:	000d5699 	.word	0x000d5699
   d6944:	000d56ad 	.word	0x000d56ad
   d6948:	000d576d 	.word	0x000d576d
   d694c:	000d58f1 	.word	0x000d58f1
   d6950:	000d59a9 	.word	0x000d59a9
   d6954:	000d59fd 	.word	0x000d59fd
   d6958:	000d5a55 	.word	0x000d5a55
   d695c:	000d5ad9 	.word	0x000d5ad9
   d6960:	000d5b9d 	.word	0x000d5b9d
   d6964:	000d5c61 	.word	0x000d5c61

000d6968 <link_constructors_end>:
	...
