
/home/luexiong/projects/particle-argon-temperature-humidity/target/1.4.4/argon/particle-argon-temperature-humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000036b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000177b4  2**0
                  CONTENTS
  4 .data         000000b8  2003e2a4  000d76d0  0000e2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000494  2003e35c  2003e35c  0001e35c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7788  000d7788  00017788  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d77b0  000d77b0  000177b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ed317  00000000  00000000  000177b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012709  00000000  00000000  00104acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002710  00000000  00000000  001171d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003557d  00000000  00000000  001198e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002ba68  00000000  00000000  0014ee61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010bc4a  00000000  00000000  0017a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00020f2b  00000000  00000000  00286513  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004af0  00000000  00000000  002a743e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d660  00000000  00000000  002abf30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fc89 	bl	d6948 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fc8e 	bl	d695e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2a4 	.word	0x2003e2a4
   d404c:	000d76d0 	.word	0x000d76d0
   d4050:	2003e35c 	.word	0x2003e35c
   d4054:	2003e35c 	.word	0x2003e35c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fb69 	bl	d5734 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d76c8 	.word	0x000d76c8
   d4084:	000d7688 	.word	0x000d7688

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f859 	bl	d4144 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb1b 	b.w	d56d0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bc65 	b.w	d4968 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc6b 	b.w	d4978 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc69 	b.w	d4978 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
bool updated = false;

void setup() {
   d40b8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ba:	f000 ff7f 	bl	d4fbc <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f000 ff6f 	bl	d4fa4 <_ZN9USBSerial5beginEl>
  sensor.begin();
   d40c6:	4802      	ldr	r0, [pc, #8]	; (d40d0 <setup+0x18>)
}
   d40c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_Si7021 sensor = Adafruit_Si7021();
bool updated = false;

void setup() {
  Serial.begin(9600);
  sensor.begin();
   d40cc:	f000 ba47 	b.w	d455e <_ZN15Adafruit_Si70215beginEv>
   d40d0:	2003e360 	.word	0x2003e360

000d40d4 <_Z10isEndOfDayv>:
  if (isEndOfDay() == true) {
    Particle.publish("climateAverageUpdate", "Updating climate data file", PRIVATE);
  }
}

boolean isEndOfDay() {
   d40d4:	b570      	push	{r4, r5, r6, lr}
  int currentHour = Time.hourFormat12(Time.now());
   d40d6:	f001 fbda 	bl	d588e <_ZN9TimeClass3nowEv>

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40da:	4c0e      	ldr	r4, [pc, #56]	; (d4114 <_Z10isEndOfDayv+0x40>)
    Particle.publish("climateAverageUpdate", "Updating climate data file", PRIVATE);
  }
}

boolean isEndOfDay() {
  int currentHour = Time.hourFormat12(Time.now());
   d40dc:	f001 fb9c 	bl	d5818 <_ZN9TimeClass12hourFormat12El>

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40e0:	7823      	ldrb	r3, [r4, #0]
    Particle.publish("climateAverageUpdate", "Updating climate data file", PRIVATE);
  }
}

boolean isEndOfDay() {
  int currentHour = Time.hourFormat12(Time.now());
   d40e2:	4605      	mov	r5, r0
   d40e4:	4626      	mov	r6, r4

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40e6:	b93b      	cbnz	r3, d40f8 <_Z10isEndOfDayv+0x24>
   d40e8:	2808      	cmp	r0, #8
   d40ea:	dd05      	ble.n	d40f8 <_Z10isEndOfDayv+0x24>
   d40ec:	f001 fbdf 	bl	d58ae <_ZN9TimeClass4isPMEv>
   d40f0:	2801      	cmp	r0, #1
   d40f2:	d101      	bne.n	d40f8 <_Z10isEndOfDayv+0x24>
    updated = true;
   d40f4:	7020      	strb	r0, [r4, #0]
    return true;
   d40f6:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (updated == true && currentHour >= 6 && Time.isAM() == true) {
   d40f8:	7833      	ldrb	r3, [r6, #0]
   d40fa:	b10b      	cbz	r3, d4100 <_Z10isEndOfDayv+0x2c>
   d40fc:	2d05      	cmp	r5, #5
   d40fe:	dc01      	bgt.n	d4104 <_Z10isEndOfDayv+0x30>
    updated = false;
    return false;
  }

  return false;
   d4100:	2000      	movs	r0, #0
   d4102:	bd70      	pop	{r4, r5, r6, pc}
  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
    updated = true;
    return true;
  }

  if (updated == true && currentHour >= 6 && Time.isAM() == true) {
   d4104:	f001 fbca 	bl	d589c <_ZN9TimeClass4isAMEv>
   d4108:	2801      	cmp	r0, #1
   d410a:	d1f9      	bne.n	d4100 <_Z10isEndOfDayv+0x2c>
    updated = false;
   d410c:	4b01      	ldr	r3, [pc, #4]	; (d4114 <_Z10isEndOfDayv+0x40>)
   d410e:	2000      	movs	r0, #0
   d4110:	7018      	strb	r0, [r3, #0]
    return false;
  }

  return false;
}
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	2003e36d 	.word	0x2003e36d

000d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4118:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d411a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d411c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d411e:	b17c      	cbz	r4, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4120:	6863      	ldr	r3, [r4, #4]
   d4122:	3b01      	subs	r3, #1
   d4124:	6063      	str	r3, [r4, #4]
   d4126:	b95b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	689b      	ldr	r3, [r3, #8]
   d412e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4130:	68a3      	ldr	r3, [r4, #8]
   d4132:	3b01      	subs	r3, #1
   d4134:	60a3      	str	r3, [r4, #8]
   d4136:	b91b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	68db      	ldr	r3, [r3, #12]
   d413e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4140:	4628      	mov	r0, r5
   d4142:	bd38      	pop	{r3, r4, r5, pc}

000d4144 <loop>:
void setup() {
  Serial.begin(9600);
  sensor.begin();
}

void loop(void) {
   d4144:	b510      	push	{r4, lr}
   d4146:	ed2d 8b02 	vpush	{d8}
  int celsius = sensor.readTemperature();
   d414a:	482b      	ldr	r0, [pc, #172]	; (d41f8 <loop+0xb4>)
   d414c:	4c2b      	ldr	r4, [pc, #172]	; (d41fc <loop+0xb8>)
void setup() {
  Serial.begin(9600);
  sensor.begin();
}

void loop(void) {
   d414e:	b088      	sub	sp, #32
  int celsius = sensor.readTemperature();
   d4150:	f000 f8be 	bl	d42d0 <_ZN15Adafruit_Si702115readTemperatureEv>
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4154:	4828      	ldr	r0, [pc, #160]	; (d41f8 <loop+0xb4>)
  Serial.begin(9600);
  sensor.begin();
}

void loop(void) {
  int celsius = sensor.readTemperature();
   d4156:	eeb0 8a40 	vmov.f32	s16, s0
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d415a:	f000 f873 	bl	d4244 <_ZN15Adafruit_Si702112readHumidityEv>

  Particle.publish("temperature", String(fahrenheit), PRIVATE);
   d415e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d4162:	2305      	movs	r3, #5
   d4164:	ee17 1a90 	vmov	r1, s15
   d4168:	220a      	movs	r2, #10
   d416a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   d416e:	a804      	add	r0, sp, #16
   d4170:	fb91 f1f3 	sdiv	r1, r1, r3
   d4174:	3120      	adds	r1, #32
}

void loop(void) {
  int celsius = sensor.readTemperature();
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4176:	eef0 8a40 	vmov.f32	s17, s0

  Particle.publish("temperature", String(fahrenheit), PRIVATE);
   d417a:	f001 fc69 	bl	d5a50 <_ZN6StringC1Eih>
   d417e:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	9a04      	ldr	r2, [sp, #16]
   d4182:	491f      	ldr	r1, [pc, #124]	; (d4200 <loop+0xbc>)
   d4184:	f88d 3000 	strb.w	r3, [sp]
   d4188:	a802      	add	r0, sp, #8
   d418a:	233c      	movs	r3, #60	; 0x3c
   d418c:	f001 f900 	bl	d5390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4190:	a803      	add	r0, sp, #12
   d4192:	f7ff ffc1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4196:	a804      	add	r0, sp, #16
   d4198:	f001 fc02 	bl	d59a0 <_ZN6StringD1Ev>
  Particle.publish("humidity", String(humidityPercentage), PRIVATE);
   d419c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d41a0:	220a      	movs	r2, #10
   d41a2:	ee17 1a90 	vmov	r1, s15
   d41a6:	a804      	add	r0, sp, #16
   d41a8:	f001 fc52 	bl	d5a50 <_ZN6StringC1Eih>
   d41ac:	7823      	ldrb	r3, [r4, #0]
   d41ae:	9a04      	ldr	r2, [sp, #16]
   d41b0:	4914      	ldr	r1, [pc, #80]	; (d4204 <loop+0xc0>)
   d41b2:	f88d 3000 	strb.w	r3, [sp]
   d41b6:	a802      	add	r0, sp, #8
   d41b8:	233c      	movs	r3, #60	; 0x3c
   d41ba:	f001 f8e9 	bl	d5390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41be:	a803      	add	r0, sp, #12
   d41c0:	f7ff ffaa 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41c4:	a804      	add	r0, sp, #16
   d41c6:	f001 fbeb 	bl	d59a0 <_ZN6StringD1Ev>
  delay(10000);
   d41ca:	f242 7010 	movw	r0, #10000	; 0x2710
   d41ce:	f001 fadf 	bl	d5790 <delay>

  if (isEndOfDay() == true) {
   d41d2:	f7ff ff7f 	bl	d40d4 <_Z10isEndOfDayv>
   d41d6:	b158      	cbz	r0, d41f0 <loop+0xac>
   d41d8:	7823      	ldrb	r3, [r4, #0]
   d41da:	f88d 3000 	strb.w	r3, [sp]
   d41de:	a804      	add	r0, sp, #16
   d41e0:	233c      	movs	r3, #60	; 0x3c
   d41e2:	4a09      	ldr	r2, [pc, #36]	; (d4208 <loop+0xc4>)
   d41e4:	4909      	ldr	r1, [pc, #36]	; (d420c <loop+0xc8>)
   d41e6:	f001 f8d3 	bl	d5390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41ea:	a805      	add	r0, sp, #20
   d41ec:	f7ff ff94 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("climateAverageUpdate", "Updating climate data file", PRIVATE);
  }
}
   d41f0:	b008      	add	sp, #32
   d41f2:	ecbd 8b02 	vpop	{d8}
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	2003e360 	.word	0x2003e360
   d41fc:	2003e36c 	.word	0x2003e36c
   d4200:	000d719c 	.word	0x000d719c
   d4204:	000d71a8 	.word	0x000d71a8
   d4208:	000d71b1 	.word	0x000d71b1
   d420c:	000d71cc 	.word	0x000d71cc

000d4210 <_GLOBAL__sub_I_sensor>:
    updated = false;
    return false;
  }

  return false;
}
   d4210:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4212:	4b05      	ldr	r3, [pc, #20]	; (d4228 <_GLOBAL__sub_I_sensor+0x18>)
   d4214:	2201      	movs	r2, #1
   d4216:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4218:	f000 fad2 	bl	d47c0 <HAL_Pin_Map>
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d421c:	4803      	ldr	r0, [pc, #12]	; (d422c <_GLOBAL__sub_I_sensor+0x1c>)
    updated = false;
    return false;
  }

  return false;
}
   d421e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d4222:	f000 b809 	b.w	d4238 <_ZN15Adafruit_Si7021C1Ev>
   d4226:	bf00      	nop
   d4228:	2003e36c 	.word	0x2003e36c
   d422c:	2003e360 	.word	0x2003e360

000d4230 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4230:	6803      	ldr	r3, [r0, #0]
   d4232:	b2c9      	uxtb	r1, r1
   d4234:	689b      	ldr	r3, [r3, #8]
   d4236:	4718      	bx	r3

000d4238 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d4238:	2240      	movs	r2, #64	; 0x40
   d423a:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d423c:	2200      	movs	r2, #0
   d423e:	6042      	str	r2, [r0, #4]
   d4240:	6002      	str	r2, [r0, #0]
}
   d4242:	4770      	bx	lr

000d4244 <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d4244:	b510      	push	{r4, lr}
   d4246:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4248:	f001 fcca 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d424c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4250:	f000 fdae 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d4254:	f001 fcc4 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4258:	6803      	ldr	r3, [r0, #0]
   d425a:	21f5      	movs	r1, #245	; 0xf5
   d425c:	689b      	ldr	r3, [r3, #8]
   d425e:	4798      	blx	r3
  Wire.endTransmission(false);
   d4260:	f001 fcbe 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4264:	2100      	movs	r1, #0
   d4266:	f000 fda6 	bl	d4db6 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d426a:	2019      	movs	r0, #25
   d426c:	f001 fa90 	bl	d5790 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4270:	f001 fcb6 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4274:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4278:	2203      	movs	r2, #3
   d427a:	f000 fd90 	bl	d4d9e <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
   d427e:	f001 fcaf 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4282:	6803      	ldr	r3, [r0, #0]
   d4284:	695b      	ldr	r3, [r3, #20]
   d4286:	4798      	blx	r3
   d4288:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d428a:	f001 fca9 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d428e:	6803      	ldr	r3, [r0, #0]
   d4290:	695b      	ldr	r3, [r3, #20]
   d4292:	4798      	blx	r3
   d4294:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4298:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d429a:	f001 fca1 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d429e:	6803      	ldr	r3, [r0, #0]
   d42a0:	695b      	ldr	r3, [r3, #20]
   d42a2:	4798      	blx	r3

  float humidity = hum;
   d42a4:	b2a3      	uxth	r3, r4
   d42a6:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d42aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; d42c4 <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d42ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d42b2:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d42b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d42ba:	ed9f 7a03 	vldr	s14, [pc, #12]	; d42c8 <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d42be:	eea7 0a87 	vfma.f32	s0, s15, s14
   d42c2:	bd10      	pop	{r4, pc}
   d42c4:	42fa0000 	.word	0x42fa0000
   d42c8:	37800000 	.word	0x37800000
   d42cc:	00000000 	.word	0x00000000

000d42d0 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d42d0:	b510      	push	{r4, lr}
   d42d2:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d42d4:	f001 fc84 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d42d8:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d42dc:	f000 fd68 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d42e0:	f001 fc7e 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d42e4:	6803      	ldr	r3, [r0, #0]
   d42e6:	21f3      	movs	r1, #243	; 0xf3
   d42e8:	689b      	ldr	r3, [r3, #8]
   d42ea:	4798      	blx	r3
  Wire.endTransmission(false);
   d42ec:	f001 fc78 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d42f0:	2100      	movs	r1, #0
   d42f2:	f000 fd60 	bl	d4db6 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d42f6:	2019      	movs	r0, #25
   d42f8:	f001 fa4a 	bl	d5790 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d42fc:	f001 fc70 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4300:	2203      	movs	r2, #3
   d4302:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4306:	f000 fd4a 	bl	d4d9e <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
   d430a:	f001 fc69 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d430e:	6803      	ldr	r3, [r0, #0]
   d4310:	695b      	ldr	r3, [r3, #20]
   d4312:	4798      	blx	r3
   d4314:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d4316:	f001 fc63 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d431a:	6803      	ldr	r3, [r0, #0]
   d431c:	695b      	ldr	r3, [r3, #20]
   d431e:	4798      	blx	r3
   d4320:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4324:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4326:	f001 fc5b 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d432a:	6803      	ldr	r3, [r0, #0]
   d432c:	695b      	ldr	r3, [r3, #20]
   d432e:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d4330:	b2a0      	uxth	r0, r4
   d4332:	ee07 0a90 	vmov	s15, r0
   d4336:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d433a:	ee17 0a90 	vmov	r0, s15
   d433e:	f001 ff47 	bl	d61d0 <__aeabi_f2d>
   d4342:	a310      	add	r3, pc, #64	; (adr r3, d4384 <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d4344:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4348:	f001 ff96 	bl	d6278 <__aeabi_dmul>
   d434c:	f002 f9a6 	bl	d669c <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d4350:	eddf 7a0b 	vldr	s15, [pc, #44]	; d4380 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d4354:	ee07 0a10 	vmov	s14, r0
   d4358:	ee67 7a27 	vmul.f32	s15, s14, s15
   d435c:	ee17 0a90 	vmov	r0, s15
   d4360:	f001 ff36 	bl	d61d0 <__aeabi_f2d>
   d4364:	a304      	add	r3, pc, #16	; (adr r3, d4378 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d4366:	e9d3 2300 	ldrd	r2, r3, [r3]
   d436a:	f001 fdd1 	bl	d5f10 <__aeabi_dsub>

  return temperature;
   d436e:	f002 f995 	bl	d669c <__aeabi_d2f>
}
   d4372:	ee00 0a10 	vmov	s0, r0
   d4376:	bd10      	pop	{r4, pc}
   d4378:	cccccccd 	.word	0xcccccccd
   d437c:	40476ccc 	.word	0x40476ccc
   d4380:	37800000 	.word	0x37800000
   d4384:	3d70a3d7 	.word	0x3d70a3d7
   d4388:	4065f70a 	.word	0x4065f70a

000d438c <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d438c:	b510      	push	{r4, lr}
   d438e:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4390:	f001 fc26 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4394:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4398:	f000 fd0a 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d439c:	f001 fc20 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43a0:	6803      	ldr	r3, [r0, #0]
   d43a2:	21fe      	movs	r1, #254	; 0xfe
   d43a4:	689b      	ldr	r3, [r3, #8]
   d43a6:	4798      	blx	r3
  Wire.endTransmission();
   d43a8:	f001 fc1a 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43ac:	f000 fd07 	bl	d4dbe <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d43b0:	2032      	movs	r0, #50	; 0x32
}
   d43b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d43b6:	f001 b9eb 	b.w	d5790 <delay>

000d43ba <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d43ba:	b510      	push	{r4, lr}
   d43bc:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d43be:	f001 fc0f 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43c2:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d43c6:	f000 fcf3 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d43ca:	f001 fc09 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43ce:	2100      	movs	r1, #0
   d43d0:	f7ff ff2e 	bl	d4230 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d43d4:	f001 fc04 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43d8:	210f      	movs	r1, #15
   d43da:	f7ff ff29 	bl	d4230 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d43de:	f001 fbff 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43e2:	f000 fcec 	bl	d4dbe <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d43e6:	f001 fbfb 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43ea:	2208      	movs	r2, #8
   d43ec:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d43f0:	f000 fcd5 	bl	d4d9e <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
   d43f4:	f001 fbf4 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d43f8:	6803      	ldr	r3, [r0, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	4798      	blx	r3
   d43fe:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4400:	f001 fbee 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4404:	6803      	ldr	r3, [r0, #0]
   d4406:	695b      	ldr	r3, [r3, #20]
   d4408:	4798      	blx	r3
  sernum_a <<= 8;
   d440a:	6823      	ldr	r3, [r4, #0]
   d440c:	021b      	lsls	r3, r3, #8
   d440e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4410:	f001 fbe6 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4414:	6803      	ldr	r3, [r0, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	4798      	blx	r3
   d441a:	6823      	ldr	r3, [r4, #0]
   d441c:	4318      	orrs	r0, r3
   d441e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4420:	f001 fbde 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4424:	6803      	ldr	r3, [r0, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	4798      	blx	r3
  sernum_a <<= 8;
   d442a:	6823      	ldr	r3, [r4, #0]
   d442c:	021b      	lsls	r3, r3, #8
   d442e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4430:	f001 fbd6 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4434:	6803      	ldr	r3, [r0, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	4798      	blx	r3
   d443a:	6823      	ldr	r3, [r4, #0]
   d443c:	4318      	orrs	r0, r3
   d443e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4440:	f001 fbce 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4444:	6803      	ldr	r3, [r0, #0]
   d4446:	695b      	ldr	r3, [r3, #20]
   d4448:	4798      	blx	r3
  sernum_a <<= 8;
   d444a:	6823      	ldr	r3, [r4, #0]
   d444c:	021b      	lsls	r3, r3, #8
   d444e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4450:	f001 fbc6 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4454:	6803      	ldr	r3, [r0, #0]
   d4456:	695b      	ldr	r3, [r3, #20]
   d4458:	4798      	blx	r3
   d445a:	6823      	ldr	r3, [r4, #0]
   d445c:	4318      	orrs	r0, r3
   d445e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4460:	f001 fbbe 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4464:	6803      	ldr	r3, [r0, #0]
   d4466:	695b      	ldr	r3, [r3, #20]
   d4468:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d446a:	f001 fbb9 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d446e:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4472:	f000 fc9d 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d4476:	f001 fbb3 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d447a:	2100      	movs	r1, #0
   d447c:	f7ff fed8 	bl	d4230 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d4480:	f001 fbae 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4484:	21c9      	movs	r1, #201	; 0xc9
   d4486:	f7ff fed3 	bl	d4230 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d448a:	f001 fba9 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d448e:	f000 fc96 	bl	d4dbe <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4492:	f001 fba5 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4496:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d449a:	2208      	movs	r2, #8
   d449c:	f000 fc7f 	bl	d4d9e <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
   d44a0:	f001 fb9e 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44a4:	6803      	ldr	r3, [r0, #0]
   d44a6:	695b      	ldr	r3, [r3, #20]
   d44a8:	4798      	blx	r3
   d44aa:	6060      	str	r0, [r4, #4]
  Wire.read();
   d44ac:	f001 fb98 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44b0:	6803      	ldr	r3, [r0, #0]
   d44b2:	695b      	ldr	r3, [r3, #20]
   d44b4:	4798      	blx	r3
  sernum_b <<= 8;
   d44b6:	6863      	ldr	r3, [r4, #4]
   d44b8:	021b      	lsls	r3, r3, #8
   d44ba:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d44bc:	f001 fb90 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44c0:	6803      	ldr	r3, [r0, #0]
   d44c2:	695b      	ldr	r3, [r3, #20]
   d44c4:	4798      	blx	r3
   d44c6:	6863      	ldr	r3, [r4, #4]
   d44c8:	4318      	orrs	r0, r3
   d44ca:	6060      	str	r0, [r4, #4]
  Wire.read();
   d44cc:	f001 fb88 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44d0:	6803      	ldr	r3, [r0, #0]
   d44d2:	695b      	ldr	r3, [r3, #20]
   d44d4:	4798      	blx	r3
  sernum_b <<= 8;
   d44d6:	6863      	ldr	r3, [r4, #4]
   d44d8:	021b      	lsls	r3, r3, #8
   d44da:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d44dc:	f001 fb80 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44e0:	6803      	ldr	r3, [r0, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	4798      	blx	r3
   d44e6:	6863      	ldr	r3, [r4, #4]
   d44e8:	4318      	orrs	r0, r3
   d44ea:	6060      	str	r0, [r4, #4]
  Wire.read();
   d44ec:	f001 fb78 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d44f0:	6803      	ldr	r3, [r0, #0]
   d44f2:	695b      	ldr	r3, [r3, #20]
   d44f4:	4798      	blx	r3
  sernum_b <<= 8;
   d44f6:	6863      	ldr	r3, [r4, #4]
   d44f8:	021b      	lsls	r3, r3, #8
   d44fa:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d44fc:	f001 fb70 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4500:	6803      	ldr	r3, [r0, #0]
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	4798      	blx	r3
   d4506:	6863      	ldr	r3, [r4, #4]
   d4508:	4318      	orrs	r0, r3
   d450a:	6060      	str	r0, [r4, #4]
  Wire.read();
   d450c:	f001 fb68 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4510:	6803      	ldr	r3, [r0, #0]
}
   d4512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	4718      	bx	r3

000d451a <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d451a:	b538      	push	{r3, r4, r5, lr}
   d451c:	4604      	mov	r4, r0
   d451e:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d4520:	f001 fb5e 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4524:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4528:	f000 fc42 	bl	d4db0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d452c:	f001 fb58 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4530:	6803      	ldr	r3, [r0, #0]
   d4532:	4629      	mov	r1, r5
   d4534:	689b      	ldr	r3, [r3, #8]
   d4536:	4798      	blx	r3
  Wire.endTransmission(false);
   d4538:	f001 fb52 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d453c:	2100      	movs	r1, #0
   d453e:	f000 fc3a 	bl	d4db6 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d4542:	f001 fb4d 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4546:	2201      	movs	r2, #1
   d4548:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d454c:	f000 fc27 	bl	d4d9e <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
   d4550:	f001 fb46 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4554:	6803      	ldr	r3, [r0, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d455a:	b2c0      	uxtb	r0, r0
   d455c:	bd38      	pop	{r3, r4, r5, pc}

000d455e <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d455e:	b510      	push	{r4, lr}
   d4560:	4604      	mov	r4, r0
  Wire.begin();
   d4562:	f001 fb3d 	bl	d5be0 <_Z19__fetch_global_Wirev>
   d4566:	f000 fc0b 	bl	d4d80 <_ZN7TwoWire5beginEv>

  reset();
   d456a:	4620      	mov	r0, r4
   d456c:	f7ff ff0e 	bl	d438c <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4570:	21e7      	movs	r1, #231	; 0xe7
   d4572:	4620      	mov	r0, r4
   d4574:	f7ff ffd1 	bl	d451a <_ZN15Adafruit_Si702113readRegister8Eh>
   d4578:	283a      	cmp	r0, #58	; 0x3a
   d457a:	d104      	bne.n	d4586 <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff ff1c 	bl	d43ba <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d4582:	2001      	movs	r0, #1
   d4584:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4586:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d4588:	bd10      	pop	{r4, pc}

000d458a <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
   d458a:	f000 b919 	b.w	d47c0 <HAL_Pin_Map>
	...

000d4590 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_USB_USART_Init+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	681b      	ldr	r3, [r3, #0]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003024c 	.word	0x0003024c

000d45a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USB_USART_Begin+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	685b      	ldr	r3, [r3, #4]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003024c 	.word	0x0003024c

000d45b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Available_Data+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	691b      	ldr	r3, [r3, #16]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Receive_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	699b      	ldr	r3, [r3, #24]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Send_Data+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	69db      	ldr	r3, [r3, #28]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Flush_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6a1b      	ldr	r3, [r3, #32]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_I2C_Begin+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	68db      	ldr	r3, [r3, #12]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030228 	.word	0x00030228

000d4610 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_I2C_Request_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	695b      	ldr	r3, [r3, #20]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030228 	.word	0x00030228

000d4620 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_I2C_Begin_Transmission+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	699b      	ldr	r3, [r3, #24]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030228 	.word	0x00030228

000d4630 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_I2C_End_Transmission+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	69db      	ldr	r3, [r3, #28]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030228 	.word	0x00030228

000d4640 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_I2C_Write_Data+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6a1b      	ldr	r3, [r3, #32]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030228 	.word	0x00030228

000d4650 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_I2C_Available_Data+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030228 	.word	0x00030228

000d4660 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_I2C_Read_Data+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030228 	.word	0x00030228

000d4670 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_I2C_Peek_Data+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030228 	.word	0x00030228

000d4680 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_I2C_Flush_Data+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030228 	.word	0x00030228

000d4690 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_I2C_Init+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030228 	.word	0x00030228

000d46a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_USART_Init+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	681b      	ldr	r3, [r3, #0]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003023c 	.word	0x0003023c

000d46b0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_USART_Write_Data+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	68db      	ldr	r3, [r3, #12]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003023c 	.word	0x0003023c

000d46c0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_USART_Available_Data+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	691b      	ldr	r3, [r3, #16]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003023c 	.word	0x0003023c

000d46d0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_USART_Read_Data+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	695b      	ldr	r3, [r3, #20]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003023c 	.word	0x0003023c

000d46e0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USART_Peek_Data+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	699b      	ldr	r3, [r3, #24]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003023c 	.word	0x0003023c

000d46f0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USART_Flush_Data+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	69db      	ldr	r3, [r3, #28]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003023c 	.word	0x0003023c

000d4700 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USART_Available_Data_For_Write+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003023c 	.word	0x0003023c

000d4710 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <inet_inet_ntop+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030264 	.word	0x00030264

000d4720 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <os_thread_is_current+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	689b      	ldr	r3, [r3, #8]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030248 	.word	0x00030248

000d4730 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <os_thread_join+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	691b      	ldr	r3, [r3, #16]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030248 	.word	0x00030248

000d4740 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <os_thread_cleanup+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030248 	.word	0x00030248

000d4750 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <os_mutex_create+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030248 	.word	0x00030248

000d4760 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <os_mutex_recursive_create+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030248 	.word	0x00030248

000d4770 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_RNG_GetRandomNumber+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030218 	.word	0x00030218

000d4780 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030218 	.word	0x00030218

000d4790 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_RTC_Get_UnixTime+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	69db      	ldr	r3, [r3, #28]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030218 	.word	0x00030218

000d47a0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_RTC_Time_Is_Valid+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030218 	.word	0x00030218

000d47b0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_SPI_Init+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	69db      	ldr	r3, [r3, #28]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030230 	.word	0x00030230

000d47c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_Pin_Map+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	681b      	ldr	r3, [r3, #0]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003022c 	.word	0x0003022c

000d47d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <netdb_freeaddrinfo+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	689b      	ldr	r3, [r3, #8]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030268 	.word	0x00030268

000d47e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <netdb_getaddrinfo+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	68db      	ldr	r3, [r3, #12]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030268 	.word	0x00030268

000d47f0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <spark_process+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	689b      	ldr	r3, [r3, #8]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030244 	.word	0x00030244

000d4800 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <spark_cloud_flag_connected+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	695b      	ldr	r3, [r3, #20]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030244 	.word	0x00030244

000d4810 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <spark_send_event+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030244 	.word	0x00030244

000d4820 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <spark_sync_time_pending+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030244 	.word	0x00030244

000d4830 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030244 	.word	0x00030244

000d4840 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <network_connect+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	685b      	ldr	r3, [r3, #4]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030240 	.word	0x00030240

000d4850 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <network_connecting+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	689b      	ldr	r3, [r3, #8]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030240 	.word	0x00030240

000d4860 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <network_disconnect+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	68db      	ldr	r3, [r3, #12]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030240 	.word	0x00030240

000d4870 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <network_ready+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	691b      	ldr	r3, [r3, #16]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030240 	.word	0x00030240

000d4880 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <network_on+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	695b      	ldr	r3, [r3, #20]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030240 	.word	0x00030240

000d4890 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <network_off+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	699b      	ldr	r3, [r3, #24]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030240 	.word	0x00030240

000d48a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <network_listen+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	69db      	ldr	r3, [r3, #28]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030240 	.word	0x00030240

000d48b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <network_listening+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6a1b      	ldr	r3, [r3, #32]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030240 	.word	0x00030240

000d48c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <network_set_listen_timeout+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030240 	.word	0x00030240

000d48d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <network_get_listen_timeout+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030240 	.word	0x00030240

000d48e0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <system_mode+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	681b      	ldr	r3, [r3, #0]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030220 	.word	0x00030220

000d48f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <set_system_mode+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030220 	.word	0x00030220

000d4900 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <system_delay_ms+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	695b      	ldr	r3, [r3, #20]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030220 	.word	0x00030220

000d4910 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <application_thread_current+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030220 	.word	0x00030220

000d4920 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <application_thread_invoke+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030220 	.word	0x00030220

000d4930 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <system_thread_get_state+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030220 	.word	0x00030220

000d4940 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b03      	ldr	r3, [pc, #12]	; (d4950 <system_ctrl_set_app_request_handler+0x10>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d494a:	9301      	str	r3, [sp, #4]
   d494c:	bd08      	pop	{r3, pc}
   d494e:	0000      	.short	0x0000
   d4950:	00030220 	.word	0x00030220

000d4954 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b03      	ldr	r3, [pc, #12]	; (d4964 <system_ctrl_set_result+0x10>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d495e:	9301      	str	r3, [sp, #4]
   d4960:	bd08      	pop	{r3, pc}
   d4962:	0000      	.short	0x0000
   d4964:	00030220 	.word	0x00030220

000d4968 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <malloc+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	681b      	ldr	r3, [r3, #0]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003021c 	.word	0x0003021c

000d4978 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <free+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	685b      	ldr	r3, [r3, #4]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003021c 	.word	0x0003021c

000d4988 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <realloc+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	689b      	ldr	r3, [r3, #8]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003021c 	.word	0x0003021c

000d4998 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <siscanf+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	699b      	ldr	r3, [r3, #24]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003021c 	.word	0x0003021c

000d49a8 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <abort+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003021c 	.word	0x0003021c

000d49b8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <_malloc_r+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003021c 	.word	0x0003021c

000d49c8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49c8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49ca:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49cc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49ce:	b113      	cbz	r3, d49d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49d0:	2203      	movs	r2, #3
   d49d2:	4601      	mov	r1, r0
   d49d4:	4798      	blx	r3
    }
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}

000d49da <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d49da:	2300      	movs	r3, #0
   d49dc:	461a      	mov	r2, r3
   d49de:	6840      	ldr	r0, [r0, #4]
   d49e0:	f7ff bf2e 	b.w	d4840 <network_connect>

000d49e4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d49e4:	2200      	movs	r2, #0
   d49e6:	2102      	movs	r1, #2
   d49e8:	6840      	ldr	r0, [r0, #4]
   d49ea:	f7ff bf39 	b.w	d4860 <network_disconnect>

000d49ee <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d49ee:	2200      	movs	r2, #0
   d49f0:	4611      	mov	r1, r2
   d49f2:	6840      	ldr	r0, [r0, #4]
   d49f4:	f7ff bf2c 	b.w	d4850 <network_connecting>

000d49f8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d49f8:	2200      	movs	r2, #0
   d49fa:	4611      	mov	r1, r2
   d49fc:	6840      	ldr	r0, [r0, #4]
   d49fe:	f7ff bf37 	b.w	d4870 <network_ready>

000d4a02 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4a02:	2300      	movs	r3, #0
   d4a04:	461a      	mov	r2, r3
   d4a06:	4619      	mov	r1, r3
   d4a08:	6840      	ldr	r0, [r0, #4]
   d4a0a:	f7ff bf39 	b.w	d4880 <network_on>

000d4a0e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4a0e:	2300      	movs	r3, #0
   d4a10:	461a      	mov	r2, r3
   d4a12:	4619      	mov	r1, r3
   d4a14:	6840      	ldr	r0, [r0, #4]
   d4a16:	f7ff bf3b 	b.w	d4890 <network_off>

000d4a1a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4a1a:	2200      	movs	r2, #0
   d4a1c:	f081 0101 	eor.w	r1, r1, #1
   d4a20:	6840      	ldr	r0, [r0, #4]
   d4a22:	f7ff bf3d 	b.w	d48a0 <network_listen>

000d4a26 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4a26:	2200      	movs	r2, #0
   d4a28:	6840      	ldr	r0, [r0, #4]
   d4a2a:	f7ff bf49 	b.w	d48c0 <network_set_listen_timeout>

000d4a2e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4a2e:	2200      	movs	r2, #0
   d4a30:	4611      	mov	r1, r2
   d4a32:	6840      	ldr	r0, [r0, #4]
   d4a34:	f7ff bf4c 	b.w	d48d0 <network_get_listen_timeout>

000d4a38 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4a38:	2200      	movs	r2, #0
   d4a3a:	4611      	mov	r1, r2
   d4a3c:	6840      	ldr	r0, [r0, #4]
   d4a3e:	f7ff bf37 	b.w	d48b0 <network_listening>

000d4a42 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4a46:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4a48:	b095      	sub	sp, #84	; 0x54
   d4a4a:	4616      	mov	r6, r2
   d4a4c:	460d      	mov	r5, r1
   d4a4e:	4607      	mov	r7, r0
    IPAddress addr;
   d4a50:	f000 fb14 	bl	d507c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4a54:	4621      	mov	r1, r4
   d4a56:	2220      	movs	r2, #32
   d4a58:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4a5a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4a5c:	f001 ff7f 	bl	d695e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4a60:	2340      	movs	r3, #64	; 0x40
   d4a62:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4a64:	4621      	mov	r1, r4
   d4a66:	466b      	mov	r3, sp
   d4a68:	aa0c      	add	r2, sp, #48	; 0x30
   d4a6a:	4630      	mov	r0, r6
   d4a6c:	f7ff feb8 	bl	d47e0 <netdb_getaddrinfo>
    if (!r) {
   d4a70:	4604      	mov	r4, r0
   d4a72:	2800      	cmp	r0, #0
   d4a74:	d144      	bne.n	d4b00 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4a76:	4602      	mov	r2, r0
   d4a78:	2101      	movs	r1, #1
   d4a7a:	6868      	ldr	r0, [r5, #4]
   d4a7c:	f7ff fef8 	bl	d4870 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4a80:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4a82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4a84:	4622      	mov	r2, r4
   d4a86:	6868      	ldr	r0, [r5, #4]
   d4a88:	f7ff fef2 	bl	d4870 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4a8c:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4a8e:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4a90:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4a92:	2e00      	cmp	r6, #0
   d4a94:	d034      	beq.n	d4b00 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4a96:	2900      	cmp	r1, #0
   d4a98:	d132      	bne.n	d4b00 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4a9a:	6873      	ldr	r3, [r6, #4]
   d4a9c:	2b02      	cmp	r3, #2
   d4a9e:	d002      	beq.n	d4aa6 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4aa0:	2b0a      	cmp	r3, #10
   d4aa2:	d009      	beq.n	d4ab8 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4aa4:	e02a      	b.n	d4afc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4aa6:	f1b8 0f00 	cmp.w	r8, #0
   d4aaa:	d027      	beq.n	d4afc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4aac:	6971      	ldr	r1, [r6, #20]
   d4aae:	4638      	mov	r0, r7
   d4ab0:	3104      	adds	r1, #4
   d4ab2:	f000 fb10 	bl	d50d6 <_ZN9IPAddressaSEPKh>
   d4ab6:	e020      	b.n	d4afa <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ab8:	f1b9 0f00 	cmp.w	r9, #0
   d4abc:	d01e      	beq.n	d4afc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4abe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4ac0:	2211      	movs	r2, #17
   d4ac2:	a801      	add	r0, sp, #4
   d4ac4:	f001 ff4b 	bl	d695e <memset>
                    a.v = 6;
   d4ac8:	2306      	movs	r3, #6
   d4aca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ace:	ad01      	add	r5, sp, #4
   d4ad0:	f104 0308 	add.w	r3, r4, #8
   d4ad4:	3418      	adds	r4, #24
   d4ad6:	6818      	ldr	r0, [r3, #0]
   d4ad8:	6859      	ldr	r1, [r3, #4]
   d4ada:	462a      	mov	r2, r5
   d4adc:	c203      	stmia	r2!, {r0, r1}
   d4ade:	3308      	adds	r3, #8
   d4ae0:	42a3      	cmp	r3, r4
   d4ae2:	4615      	mov	r5, r2
   d4ae4:	d1f7      	bne.n	d4ad6 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4ae6:	a901      	add	r1, sp, #4
   d4ae8:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4aea:	ad07      	add	r5, sp, #28
   d4aec:	f000 fad4 	bl	d5098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4af2:	1d3c      	adds	r4, r7, #4
   d4af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4af6:	682b      	ldr	r3, [r5, #0]
   d4af8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4afa:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4afc:	69f6      	ldr	r6, [r6, #28]
   d4afe:	e7c8      	b.n	d4a92 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4b00:	9800      	ldr	r0, [sp, #0]
   d4b02:	f7ff fe65 	bl	d47d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4b06:	4638      	mov	r0, r7
   d4b08:	b015      	add	sp, #84	; 0x54
   d4b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4b10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b10:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4b12:	4a03      	ldr	r2, [pc, #12]	; (d4b20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4b14:	601a      	str	r2, [r3, #0]
   d4b16:	2200      	movs	r2, #0
   d4b18:	605a      	str	r2, [r3, #4]
   d4b1a:	4770      	bx	lr
   d4b1c:	2003e370 	.word	0x2003e370
   d4b20:	000d71ec 	.word	0x000d71ec

000d4b24 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b24:	2200      	movs	r2, #0
   d4b26:	4611      	mov	r1, r2
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	f7ff bec1 	b.w	d48b0 <network_listening>

000d4b2e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b2e:	2200      	movs	r2, #0
   d4b30:	4611      	mov	r1, r2
   d4b32:	6840      	ldr	r0, [r0, #4]
   d4b34:	f7ff becc 	b.w	d48d0 <network_get_listen_timeout>

000d4b38 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b38:	2200      	movs	r2, #0
   d4b3a:	6840      	ldr	r0, [r0, #4]
   d4b3c:	f7ff bec0 	b.w	d48c0 <network_set_listen_timeout>

000d4b40 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b40:	2200      	movs	r2, #0
   d4b42:	f081 0101 	eor.w	r1, r1, #1
   d4b46:	6840      	ldr	r0, [r0, #4]
   d4b48:	f7ff beaa 	b.w	d48a0 <network_listen>

000d4b4c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4b4c:	2300      	movs	r3, #0
   d4b4e:	461a      	mov	r2, r3
   d4b50:	2101      	movs	r1, #1
   d4b52:	6840      	ldr	r0, [r0, #4]
   d4b54:	f7ff be9c 	b.w	d4890 <network_off>

000d4b58 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b58:	2300      	movs	r3, #0
   d4b5a:	461a      	mov	r2, r3
   d4b5c:	4619      	mov	r1, r3
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff be8e 	b.w	d4880 <network_on>

000d4b64 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b64:	2200      	movs	r2, #0
   d4b66:	4611      	mov	r1, r2
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	f7ff be81 	b.w	d4870 <network_ready>

000d4b6e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b6e:	2200      	movs	r2, #0
   d4b70:	4611      	mov	r1, r2
   d4b72:	6840      	ldr	r0, [r0, #4]
   d4b74:	f7ff be6c 	b.w	d4850 <network_connecting>

000d4b78 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b78:	2200      	movs	r2, #0
   d4b7a:	2102      	movs	r1, #2
   d4b7c:	6840      	ldr	r0, [r0, #4]
   d4b7e:	f7ff be6f 	b.w	d4860 <network_disconnect>

000d4b82 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b82:	2300      	movs	r3, #0
   d4b84:	461a      	mov	r2, r3
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	f7ff be5a 	b.w	d4840 <network_connect>

000d4b8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4b8c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b8e:	4605      	mov	r5, r0
   d4b90:	b188      	cbz	r0, d4bb6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b92:	6804      	ldr	r4, [r0, #0]
   d4b94:	b14c      	cbz	r4, d4baa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4b96:	68a3      	ldr	r3, [r4, #8]
   d4b98:	b11b      	cbz	r3, d4ba2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b9a:	2203      	movs	r2, #3
   d4b9c:	4621      	mov	r1, r4
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ba2:	2110      	movs	r1, #16
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	f001 f862 	bl	d5c6e <_ZdlPvj>
   d4baa:	4628      	mov	r0, r5
   d4bac:	2114      	movs	r1, #20
      }
   d4bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bb2:	f001 b85c 	b.w	d5c6e <_ZdlPvj>
   d4bb6:	bd38      	pop	{r3, r4, r5, pc}

000d4bb8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4bb8:	b110      	cbz	r0, d4bc0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4bba:	6803      	ldr	r3, [r0, #0]
   d4bbc:	685b      	ldr	r3, [r3, #4]
   d4bbe:	4718      	bx	r3
   d4bc0:	4770      	bx	lr

000d4bc2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4bc2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4bc4:	6803      	ldr	r3, [r0, #0]
   d4bc6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4bc8:	b1bb      	cbz	r3, d4bfa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4bca:	6858      	ldr	r0, [r3, #4]
   d4bcc:	f7ff fda8 	bl	d4720 <os_thread_is_current>
   d4bd0:	b978      	cbnz	r0, d4bf2 <_ZN6ThreadD1Ev+0x30>
   d4bd2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4bd4:	7c5a      	ldrb	r2, [r3, #17]
   d4bd6:	b912      	cbnz	r2, d4bde <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4bd8:	6858      	ldr	r0, [r3, #4]
   d4bda:	f7ff fda9 	bl	d4730 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4bde:	6823      	ldr	r3, [r4, #0]
   d4be0:	6858      	ldr	r0, [r3, #4]
   d4be2:	f7ff fdad 	bl	d4740 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4be6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4be8:	2300      	movs	r3, #0
   d4bea:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4bec:	b128      	cbz	r0, d4bfa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4bee:	f7ff ffcd 	bl	d4b8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bf2:	6820      	ldr	r0, [r4, #0]
   d4bf4:	b108      	cbz	r0, d4bfa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4bf6:	f7ff ffc9 	bl	d4b8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	bd10      	pop	{r4, pc}
	...

000d4c00 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4c00:	b538      	push	{r3, r4, r5, lr}
   d4c02:	4b0c      	ldr	r3, [pc, #48]	; (d4c34 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4c04:	6003      	str	r3, [r0, #0]
   d4c06:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c08:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4c0c:	b108      	cbz	r0, d4c12 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4c0e:	f7ff fa48 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c12:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4c16:	b135      	cbz	r5, d4c26 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c18:	4628      	mov	r0, r5
   d4c1a:	f7ff ffd2 	bl	d4bc2 <_ZN6ThreadD1Ev>
   d4c1e:	2104      	movs	r1, #4
   d4c20:	4628      	mov	r0, r5
   d4c22:	f001 f824 	bl	d5c6e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c26:	68a0      	ldr	r0, [r4, #8]
   d4c28:	b108      	cbz	r0, d4c2e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4c2a:	f7ff ffc5 	bl	d4bb8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4c2e:	4620      	mov	r0, r4
   d4c30:	bd38      	pop	{r3, r4, r5, pc}
   d4c32:	bf00      	nop
   d4c34:	000d7220 	.word	0x000d7220

000d4c38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4c38:	b538      	push	{r3, r4, r5, lr}
   d4c3a:	4c0e      	ldr	r4, [pc, #56]	; (d4c74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4c3c:	4b0e      	ldr	r3, [pc, #56]	; (d4c78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4c3e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c40:	2500      	movs	r5, #0
   d4c42:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4c44:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4c48:	6063      	str	r3, [r4, #4]
   d4c4a:	60a5      	str	r5, [r4, #8]
   d4c4c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c50:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4c54:	f7ff fd84 	bl	d4760 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4c58:	4b08      	ldr	r3, [pc, #32]	; (d4c7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4c5a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c5e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4c62:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4c64:	4620      	mov	r0, r4
   d4c66:	4a06      	ldr	r2, [pc, #24]	; (d4c80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4c68:	4906      	ldr	r1, [pc, #24]	; (d4c84 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4c6e:	f000 bff9 	b.w	d5c64 <__aeabi_atexit>
   d4c72:	bf00      	nop
   d4c74:	2003e378 	.word	0x2003e378
   d4c78:	000d71ec 	.word	0x000d71ec
   d4c7c:	000d7220 	.word	0x000d7220
   d4c80:	2003e35c 	.word	0x2003e35c
   d4c84:	000d4c01 	.word	0x000d4c01

000d4c88 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4c88:	2200      	movs	r2, #0
   d4c8a:	4611      	mov	r1, r2
   d4c8c:	6840      	ldr	r0, [r0, #4]
   d4c8e:	f7ff bdef 	b.w	d4870 <network_ready>

000d4c92 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c92:	2200      	movs	r2, #0
   d4c94:	4611      	mov	r1, r2
   d4c96:	6840      	ldr	r0, [r0, #4]
   d4c98:	f7ff be0a 	b.w	d48b0 <network_listening>

000d4c9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c9c:	2200      	movs	r2, #0
   d4c9e:	4611      	mov	r1, r2
   d4ca0:	6840      	ldr	r0, [r0, #4]
   d4ca2:	f7ff be15 	b.w	d48d0 <network_get_listen_timeout>

000d4ca6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ca6:	2200      	movs	r2, #0
   d4ca8:	6840      	ldr	r0, [r0, #4]
   d4caa:	f7ff be09 	b.w	d48c0 <network_set_listen_timeout>

000d4cae <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cae:	2200      	movs	r2, #0
   d4cb0:	f081 0101 	eor.w	r1, r1, #1
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	f7ff bdf3 	b.w	d48a0 <network_listen>

000d4cba <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4cba:	2300      	movs	r3, #0
   d4cbc:	461a      	mov	r2, r3
   d4cbe:	4619      	mov	r1, r3
   d4cc0:	6840      	ldr	r0, [r0, #4]
   d4cc2:	f7ff bde5 	b.w	d4890 <network_off>

000d4cc6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	461a      	mov	r2, r3
   d4cca:	4619      	mov	r1, r3
   d4ccc:	6840      	ldr	r0, [r0, #4]
   d4cce:	f7ff bdd7 	b.w	d4880 <network_on>

000d4cd2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cd2:	2200      	movs	r2, #0
   d4cd4:	4611      	mov	r1, r2
   d4cd6:	6840      	ldr	r0, [r0, #4]
   d4cd8:	f7ff bdba 	b.w	d4850 <network_connecting>

000d4cdc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cdc:	2200      	movs	r2, #0
   d4cde:	2102      	movs	r1, #2
   d4ce0:	6840      	ldr	r0, [r0, #4]
   d4ce2:	f7ff bdbd 	b.w	d4860 <network_disconnect>

000d4ce6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ce6:	2300      	movs	r3, #0
   d4ce8:	461a      	mov	r2, r3
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	f7ff bda8 	b.w	d4840 <network_connect>

000d4cf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4cf0:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4cf2:	2204      	movs	r2, #4
   d4cf4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4cf6:	4a02      	ldr	r2, [pc, #8]	; (d4d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4cf8:	601a      	str	r2, [r3, #0]
   d4cfa:	4770      	bx	lr
   d4cfc:	2003e54c 	.word	0x2003e54c
   d4d00:	000d7254 	.word	0x000d7254

000d4d04 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4d04:	4770      	bx	lr

000d4d06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d08:	4606      	mov	r6, r0
   d4d0a:	4615      	mov	r5, r2
   d4d0c:	460c      	mov	r4, r1
   d4d0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d10:	42bc      	cmp	r4, r7
   d4d12:	d006      	beq.n	d4d22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d14:	6833      	ldr	r3, [r6, #0]
   d4d16:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d1a:	689b      	ldr	r3, [r3, #8]
   d4d1c:	4630      	mov	r0, r6
   d4d1e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d20:	e7f6      	b.n	d4d10 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d22:	4628      	mov	r0, r5
   d4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d26 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d26:	2200      	movs	r2, #0
   d4d28:	7c00      	ldrb	r0, [r0, #16]
   d4d2a:	f7ff bc89 	b.w	d4640 <HAL_I2C_Write_Data>

000d4d2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d2e:	2100      	movs	r1, #0
   d4d30:	7c00      	ldrb	r0, [r0, #16]
   d4d32:	f7ff bc8d 	b.w	d4650 <HAL_I2C_Available_Data>

000d4d36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d36:	2100      	movs	r1, #0
   d4d38:	7c00      	ldrb	r0, [r0, #16]
   d4d3a:	f7ff bc91 	b.w	d4660 <HAL_I2C_Read_Data>

000d4d3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4d3e:	2100      	movs	r1, #0
   d4d40:	7c00      	ldrb	r0, [r0, #16]
   d4d42:	f7ff bc95 	b.w	d4670 <HAL_I2C_Peek_Data>

000d4d46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d46:	2100      	movs	r1, #0
   d4d48:	7c00      	ldrb	r0, [r0, #16]
   d4d4a:	f7ff bc99 	b.w	d4680 <HAL_I2C_Flush_Data>

000d4d4e <_ZN7TwoWireD0Ev>:
   d4d4e:	b510      	push	{r4, lr}
   d4d50:	2114      	movs	r1, #20
   d4d52:	4604      	mov	r4, r0
   d4d54:	f000 ff8b 	bl	d5c6e <_ZdlPvj>
   d4d58:	4620      	mov	r0, r4
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4d5c:	b510      	push	{r4, lr}
   d4d5e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d64:	4608      	mov	r0, r1
   d4d66:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d68:	2100      	movs	r1, #0
   d4d6a:	4b04      	ldr	r3, [pc, #16]	; (d4d7c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4d6c:	7420      	strb	r0, [r4, #16]
   d4d6e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4d70:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4d72:	f7ff fc8d 	bl	d4690 <HAL_I2C_Init>

}
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd10      	pop	{r4, pc}
   d4d7a:	bf00      	nop
   d4d7c:	000d7288 	.word	0x000d7288

000d4d80 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4d80:	2300      	movs	r3, #0
   d4d82:	461a      	mov	r2, r3
   d4d84:	4619      	mov	r1, r3
   d4d86:	7c00      	ldrb	r0, [r0, #16]
   d4d88:	f7ff bc3a 	b.w	d4600 <HAL_I2C_Begin>

000d4d8c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4d8c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4d8e:	2400      	movs	r4, #0
   d4d90:	7c00      	ldrb	r0, [r0, #16]
   d4d92:	9400      	str	r4, [sp, #0]
   d4d94:	f7ff fc3c 	bl	d4610 <HAL_I2C_Request_Data>
  return result;
}
   d4d98:	b2c0      	uxtb	r0, r0
   d4d9a:	b002      	add	sp, #8
   d4d9c:	bd10      	pop	{r4, pc}

000d4d9e <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4d9e:	2301      	movs	r3, #1
   d4da0:	b2d2      	uxtb	r2, r2
   d4da2:	b2c9      	uxtb	r1, r1
   d4da4:	f7ff bff2 	b.w	d4d8c <_ZN7TwoWire11requestFromEhhh>

000d4da8 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4da8:	2200      	movs	r2, #0
   d4daa:	7c00      	ldrb	r0, [r0, #16]
   d4dac:	f7ff bc38 	b.w	d4620 <HAL_I2C_Begin_Transmission>

000d4db0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4db0:	b2c9      	uxtb	r1, r1
   d4db2:	f7ff bff9 	b.w	d4da8 <_ZN7TwoWire17beginTransmissionEh>

000d4db6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4db6:	2200      	movs	r2, #0
   d4db8:	7c00      	ldrb	r0, [r0, #16]
   d4dba:	f7ff bc39 	b.w	d4630 <HAL_I2C_End_Transmission>

000d4dbe <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4dbe:	2101      	movs	r1, #1
   d4dc0:	f7ff bff9 	b.w	d4db6 <_ZN7TwoWire15endTransmissionEh>

000d4dc4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4dc4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dc6:	6883      	ldr	r3, [r0, #8]
   d4dc8:	4604      	mov	r4, r0
   d4dca:	b90b      	cbnz	r3, d4dd0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4dcc:	f000 ff51 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dd0:	68c3      	ldr	r3, [r0, #12]
   d4dd2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4dd4:	68a3      	ldr	r3, [r4, #8]
   d4dd6:	b11b      	cbz	r3, d4de0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dd8:	2203      	movs	r2, #3
   d4dda:	4621      	mov	r1, r4
   d4ddc:	4620      	mov	r0, r4
   d4dde:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4de0:	4620      	mov	r0, r4
   d4de2:	2110      	movs	r1, #16
}
   d4de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4de8:	f000 bf41 	b.w	d5c6e <_ZdlPvj>

000d4dec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4dec:	4770      	bx	lr

000d4dee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dee:	7441      	strb	r1, [r0, #17]
   d4df0:	4770      	bx	lr

000d4df2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4df2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4df4:	7c00      	ldrb	r0, [r0, #16]
   d4df6:	f7ff fc83 	bl	d4700 <HAL_USART_Available_Data_For_Write>
}
   d4dfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dfe:	bd08      	pop	{r3, pc}

000d4e00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e02:	7c00      	ldrb	r0, [r0, #16]
   d4e04:	f7ff fc5c 	bl	d46c0 <HAL_USART_Available_Data>
}
   d4e08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e0c:	bd08      	pop	{r3, pc}

000d4e0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e10:	7c00      	ldrb	r0, [r0, #16]
   d4e12:	f7ff fc65 	bl	d46e0 <HAL_USART_Peek_Data>
}
   d4e16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e1a:	bf28      	it	cs
   d4e1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e20:	bd08      	pop	{r3, pc}

000d4e22 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4e24:	7c00      	ldrb	r0, [r0, #16]
   d4e26:	f7ff fc53 	bl	d46d0 <HAL_USART_Read_Data>
}
   d4e2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e2e:	bf28      	it	cs
   d4e30:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e34:	bd08      	pop	{r3, pc}

000d4e36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4e36:	7c00      	ldrb	r0, [r0, #16]
   d4e38:	f7ff bc5a 	b.w	d46f0 <HAL_USART_Flush_Data>

000d4e3c <_ZN11USARTSerialD0Ev>:
   d4e3c:	b510      	push	{r4, lr}
   d4e3e:	2114      	movs	r1, #20
   d4e40:	4604      	mov	r4, r0
   d4e42:	f000 ff14 	bl	d5c6e <_ZdlPvj>
   d4e46:	4620      	mov	r0, r4
   d4e48:	bd10      	pop	{r4, pc}

000d4e4a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4e4a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e4c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4e4e:	4604      	mov	r4, r0
   d4e50:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e52:	b925      	cbnz	r5, d4e5e <_ZN11USARTSerial5writeEh+0x14>
   d4e54:	7c00      	ldrb	r0, [r0, #16]
   d4e56:	f7ff fc53 	bl	d4700 <HAL_USART_Available_Data_For_Write>
   d4e5a:	2800      	cmp	r0, #0
   d4e5c:	dd05      	ble.n	d4e6a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e5e:	4631      	mov	r1, r6
   d4e60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e66:	f7ff bc23 	b.w	d46b0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e6a:	4628      	mov	r0, r5
   d4e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e70:	b510      	push	{r4, lr}
   d4e72:	4604      	mov	r4, r0
   d4e74:	4608      	mov	r0, r1
   d4e76:	4611      	mov	r1, r2
   d4e78:	2200      	movs	r2, #0
   d4e7a:	6062      	str	r2, [r4, #4]
   d4e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e80:	60a2      	str	r2, [r4, #8]
   d4e82:	4a05      	ldr	r2, [pc, #20]	; (d4e98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e84:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e86:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e88:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e8a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e8c:	461a      	mov	r2, r3
   d4e8e:	f7ff fc07 	bl	d46a0 <HAL_USART_Init>
}
   d4e92:	4620      	mov	r0, r4
   d4e94:	bd10      	pop	{r4, pc}
   d4e96:	bf00      	nop
   d4e98:	000d72b0 	.word	0x000d72b0

000d4e9c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e9c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e9e:	4d0c      	ldr	r5, [pc, #48]	; (d4ed0 <_Z22__fetch_global_Serial1v+0x34>)
   d4ea0:	6829      	ldr	r1, [r5, #0]
   d4ea2:	f011 0401 	ands.w	r4, r1, #1
   d4ea6:	d111      	bne.n	d4ecc <_Z22__fetch_global_Serial1v+0x30>
   d4ea8:	4628      	mov	r0, r5
   d4eaa:	f7ff f8fc 	bl	d40a6 <__cxa_guard_acquire>
   d4eae:	b168      	cbz	r0, d4ecc <_Z22__fetch_global_Serial1v+0x30>
   d4eb0:	4a08      	ldr	r2, [pc, #32]	; (d4ed4 <_Z22__fetch_global_Serial1v+0x38>)
   d4eb2:	4b09      	ldr	r3, [pc, #36]	; (d4ed8 <_Z22__fetch_global_Serial1v+0x3c>)
   d4eb4:	4809      	ldr	r0, [pc, #36]	; (d4edc <_Z22__fetch_global_Serial1v+0x40>)
   d4eb6:	4621      	mov	r1, r4
   d4eb8:	f7ff ffda 	bl	d4e70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4ebc:	4628      	mov	r0, r5
   d4ebe:	f7ff f8f7 	bl	d40b0 <__cxa_guard_release>
   d4ec2:	4a07      	ldr	r2, [pc, #28]	; (d4ee0 <_Z22__fetch_global_Serial1v+0x44>)
   d4ec4:	4907      	ldr	r1, [pc, #28]	; (d4ee4 <_Z22__fetch_global_Serial1v+0x48>)
   d4ec6:	4805      	ldr	r0, [pc, #20]	; (d4edc <_Z22__fetch_global_Serial1v+0x40>)
   d4ec8:	f000 fecc 	bl	d5c64 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ecc:	4803      	ldr	r0, [pc, #12]	; (d4edc <_Z22__fetch_global_Serial1v+0x40>)
   d4ece:	bd38      	pop	{r3, r4, r5, pc}
   d4ed0:	2003e5ec 	.word	0x2003e5ec
   d4ed4:	2003e5f0 	.word	0x2003e5f0
   d4ed8:	2003e568 	.word	0x2003e568
   d4edc:	2003e554 	.word	0x2003e554
   d4ee0:	2003e35c 	.word	0x2003e35c
   d4ee4:	000d4ded 	.word	0x000d4ded

000d4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ee8:	680b      	ldr	r3, [r1, #0]
   d4eea:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4eec:	b113      	cbz	r3, d4ef4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4eee:	685a      	ldr	r2, [r3, #4]
   d4ef0:	3201      	adds	r2, #1
   d4ef2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4ef4:	4770      	bx	lr

000d4ef6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ef6:	7441      	strb	r1, [r0, #17]
   d4ef8:	4770      	bx	lr

000d4efa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4efa:	4770      	bx	lr

000d4efc <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4efc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4efe:	2100      	movs	r1, #0
   d4f00:	7c00      	ldrb	r0, [r0, #16]
   d4f02:	f7ff fb65 	bl	d45d0 <HAL_USB_USART_Receive_Data>
}
   d4f06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f0a:	bf28      	it	cs
   d4f0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f10:	bd08      	pop	{r3, pc}

000d4f12 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4f12:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f14:	2101      	movs	r1, #1
   d4f16:	7c00      	ldrb	r0, [r0, #16]
   d4f18:	f7ff fb5a 	bl	d45d0 <HAL_USB_USART_Receive_Data>
}
   d4f1c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f20:	bf28      	it	cs
   d4f22:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f26:	bd08      	pop	{r3, pc}

000d4f28 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4f28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f2a:	7c00      	ldrb	r0, [r0, #16]
   d4f2c:	f7ff fb48 	bl	d45c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f34:	bd08      	pop	{r3, pc}

000d4f36 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4f36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f38:	7c00      	ldrb	r0, [r0, #16]
   d4f3a:	f7ff fb39 	bl	d45b0 <HAL_USB_USART_Available_Data>
}
   d4f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f42:	bd08      	pop	{r3, pc}

000d4f44 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f44:	7c00      	ldrb	r0, [r0, #16]
   d4f46:	f7ff bb53 	b.w	d45f0 <HAL_USB_USART_Flush_Data>

000d4f4a <_ZN9USBSerialD0Ev>:
   d4f4a:	b510      	push	{r4, lr}
   d4f4c:	2114      	movs	r1, #20
   d4f4e:	4604      	mov	r4, r0
   d4f50:	f000 fe8d 	bl	d5c6e <_ZdlPvj>
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd10      	pop	{r4, pc}

000d4f58 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f58:	b538      	push	{r3, r4, r5, lr}
   d4f5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f5c:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f5e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f60:	f7ff fb2e 	bl	d45c0 <HAL_USB_USART_Available_Data_For_Write>
   d4f64:	2800      	cmp	r0, #0
   d4f66:	dc01      	bgt.n	d4f6c <_ZN9USBSerial5writeEh+0x14>
   d4f68:	7c60      	ldrb	r0, [r4, #17]
   d4f6a:	b128      	cbz	r0, d4f78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f6c:	4629      	mov	r1, r5
   d4f6e:	7c20      	ldrb	r0, [r4, #16]
   d4f70:	f7ff fb36 	bl	d45e0 <HAL_USB_USART_Send_Data>
   d4f74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4604      	mov	r4, r0
   d4f80:	2300      	movs	r3, #0
   d4f82:	6063      	str	r3, [r4, #4]
   d4f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f88:	60a3      	str	r3, [r4, #8]
   d4f8a:	4b05      	ldr	r3, [pc, #20]	; (d4fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f8c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f8e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f90:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f92:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f94:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f96:	4611      	mov	r1, r2
   d4f98:	f7ff fafa 	bl	d4590 <HAL_USB_USART_Init>
}
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	bd10      	pop	{r4, pc}
   d4fa0:	000d72e0 	.word	0x000d72e0

000d4fa4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4fa4:	2200      	movs	r2, #0
   d4fa6:	7c00      	ldrb	r0, [r0, #16]
   d4fa8:	f7ff bafa 	b.w	d45a0 <HAL_USB_USART_Begin>

000d4fac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4fac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4fae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4fb0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4fb2:	2100      	movs	r1, #0
   d4fb4:	f001 fcd3 	bl	d695e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4fbc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fbe:	4d0e      	ldr	r5, [pc, #56]	; (d4ff8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4fc0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4fc2:	a801      	add	r0, sp, #4
   d4fc4:	f7ff fff2 	bl	d4fac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fc8:	6829      	ldr	r1, [r5, #0]
   d4fca:	f011 0401 	ands.w	r4, r1, #1
   d4fce:	d110      	bne.n	d4ff2 <_Z16_fetch_usbserialv+0x36>
   d4fd0:	4628      	mov	r0, r5
   d4fd2:	f7ff f868 	bl	d40a6 <__cxa_guard_acquire>
   d4fd6:	b160      	cbz	r0, d4ff2 <_Z16_fetch_usbserialv+0x36>
   d4fd8:	aa01      	add	r2, sp, #4
   d4fda:	4621      	mov	r1, r4
   d4fdc:	4807      	ldr	r0, [pc, #28]	; (d4ffc <_Z16_fetch_usbserialv+0x40>)
   d4fde:	f7ff ffcd 	bl	d4f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4fe2:	4628      	mov	r0, r5
   d4fe4:	f7ff f864 	bl	d40b0 <__cxa_guard_release>
   d4fe8:	4a05      	ldr	r2, [pc, #20]	; (d5000 <_Z16_fetch_usbserialv+0x44>)
   d4fea:	4906      	ldr	r1, [pc, #24]	; (d5004 <_Z16_fetch_usbserialv+0x48>)
   d4fec:	4803      	ldr	r0, [pc, #12]	; (d4ffc <_Z16_fetch_usbserialv+0x40>)
   d4fee:	f000 fe39 	bl	d5c64 <__aeabi_atexit>
	return _usbserial;
}
   d4ff2:	4802      	ldr	r0, [pc, #8]	; (d4ffc <_Z16_fetch_usbserialv+0x40>)
   d4ff4:	b007      	add	sp, #28
   d4ff6:	bd30      	pop	{r4, r5, pc}
   d4ff8:	2003e674 	.word	0x2003e674
   d4ffc:	2003e678 	.word	0x2003e678
   d5000:	2003e35c 	.word	0x2003e35c
   d5004:	000d4efb 	.word	0x000d4efb

000d5008 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5008:	4770      	bx	lr

000d500a <_ZN9IPAddressD0Ev>:
   d500a:	b510      	push	{r4, lr}
   d500c:	2118      	movs	r1, #24
   d500e:	4604      	mov	r4, r0
   d5010:	f000 fe2d 	bl	d5c6e <_ZdlPvj>
   d5014:	4620      	mov	r0, r4
   d5016:	bd10      	pop	{r4, pc}

000d5018 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5018:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d501a:	7d03      	ldrb	r3, [r0, #20]
   d501c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d501e:	b08d      	sub	sp, #52	; 0x34
   d5020:	460e      	mov	r6, r1
   d5022:	f100 0704 	add.w	r7, r0, #4
   d5026:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d502a:	d002      	beq.n	d5032 <_ZNK9IPAddress7printToER5Print+0x1a>
   d502c:	f100 0508 	add.w	r5, r0, #8
   d5030:	e018      	b.n	d5064 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5032:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5034:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5036:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d503a:	232f      	movs	r3, #47	; 0x2f
   d503c:	462a      	mov	r2, r5
   d503e:	200a      	movs	r0, #10
   d5040:	f7ff fb66 	bl	d4710 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5044:	4628      	mov	r0, r5
   d5046:	f001 fce8 	bl	d6a1a <strlen>
   d504a:	6833      	ldr	r3, [r6, #0]
   d504c:	4602      	mov	r2, r0
   d504e:	68db      	ldr	r3, [r3, #12]
   d5050:	4629      	mov	r1, r5
   d5052:	4630      	mov	r0, r6
   d5054:	4798      	blx	r3
   d5056:	e00f      	b.n	d5078 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5058:	b124      	cbz	r4, d5064 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d505a:	212e      	movs	r1, #46	; 0x2e
   d505c:	4630      	mov	r0, r6
   d505e:	f000 fc65 	bl	d592c <_ZN5Print5printEc>
   d5062:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5068:	220a      	movs	r2, #10
   d506a:	4630      	mov	r0, r6
   d506c:	f000 fc8e 	bl	d598c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5070:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5072:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5074:	d1f0      	bne.n	d5058 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5076:	4620      	mov	r0, r4
    }
    return n;
}
   d5078:	b00d      	add	sp, #52	; 0x34
   d507a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d507c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d507c:	b510      	push	{r4, lr}
   d507e:	4b05      	ldr	r3, [pc, #20]	; (d5094 <_ZN9IPAddressC1Ev+0x18>)
   d5080:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5082:	2211      	movs	r2, #17
   d5084:	f840 3b04 	str.w	r3, [r0], #4
   d5088:	2100      	movs	r1, #0
   d508a:	f001 fc68 	bl	d695e <memset>
{
    clear();
}
   d508e:	4620      	mov	r0, r4
   d5090:	bd10      	pop	{r4, pc}
   d5092:	bf00      	nop
   d5094:	000d7310 	.word	0x000d7310

000d5098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5098:	4603      	mov	r3, r0
   d509a:	4a07      	ldr	r2, [pc, #28]	; (d50b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d509c:	b510      	push	{r4, lr}
   d509e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d50a2:	f101 0210 	add.w	r2, r1, #16
   d50a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d50aa:	f843 4b04 	str.w	r4, [r3], #4
   d50ae:	4291      	cmp	r1, r2
   d50b0:	d1f9      	bne.n	d50a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50b2:	780a      	ldrb	r2, [r1, #0]
   d50b4:	701a      	strb	r2, [r3, #0]
}
   d50b6:	bd10      	pop	{r4, pc}
   d50b8:	000d7310 	.word	0x000d7310

000d50bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50ce:	2304      	movs	r3, #4
   d50d0:	6041      	str	r1, [r0, #4]
   d50d2:	7503      	strb	r3, [r0, #20]
   d50d4:	bd10      	pop	{r4, pc}

000d50d6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50d8:	780d      	ldrb	r5, [r1, #0]
   d50da:	788b      	ldrb	r3, [r1, #2]
   d50dc:	784a      	ldrb	r2, [r1, #1]
   d50de:	78c9      	ldrb	r1, [r1, #3]
   d50e0:	9100      	str	r1, [sp, #0]
   d50e2:	4629      	mov	r1, r5
   d50e4:	f7ff ffea 	bl	d50bc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50e8:	b003      	add	sp, #12
   d50ea:	bd30      	pop	{r4, r5, pc}

000d50ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50ec:	4770      	bx	lr

000d50ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d50ee:	2000      	movs	r0, #0
   d50f0:	4770      	bx	lr

000d50f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50f2:	b510      	push	{r4, lr}
   d50f4:	2110      	movs	r1, #16
   d50f6:	4604      	mov	r4, r0
   d50f8:	f000 fdb9 	bl	d5c6e <_ZdlPvj>
   d50fc:	4620      	mov	r0, r4
   d50fe:	bd10      	pop	{r4, pc}

000d5100 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5100:	b508      	push	{r3, lr}
      { delete this; }
   d5102:	b108      	cbz	r0, d5108 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5104:	f7ff fff5 	bl	d50f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5108:	bd08      	pop	{r3, pc}

000d510a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d510a:	2200      	movs	r2, #0
   d510c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d510e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5110:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5114:	8082      	strh	r2, [r0, #4]
   d5116:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d511a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d511c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d511e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5120:	680c      	ldr	r4, [r1, #0]
   d5122:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5124:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5128:	b510      	push	{r4, lr}
   d512a:	4604      	mov	r4, r0
    free((void*)msg_);
   d512c:	6800      	ldr	r0, [r0, #0]
   d512e:	f7ff fc23 	bl	d4978 <free>
}
   d5132:	4620      	mov	r0, r4
   d5134:	bd10      	pop	{r4, pc}

000d5136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5136:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5138:	68c4      	ldr	r4, [r0, #12]
   d513a:	b1f4      	cbz	r4, d517a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d513c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d513e:	2b02      	cmp	r3, #2
   d5140:	d103      	bne.n	d514a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5142:	f104 000c 	add.w	r0, r4, #12
   d5146:	f7ff ffef 	bl	d5128 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d514a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d514c:	b135      	cbz	r5, d515c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d514e:	4628      	mov	r0, r5
   d5150:	f7ff fc3a 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
   d5154:	2110      	movs	r1, #16
   d5156:	4628      	mov	r0, r5
   d5158:	f000 fd89 	bl	d5c6e <_ZdlPvj>
   d515c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d515e:	b135      	cbz	r5, d516e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5160:	4628      	mov	r0, r5
   d5162:	f7ff fc31 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
   d5166:	2110      	movs	r1, #16
   d5168:	4628      	mov	r0, r5
   d516a:	f000 fd80 	bl	d5c6e <_ZdlPvj>
   d516e:	4620      	mov	r0, r4
   d5170:	2114      	movs	r1, #20
   d5172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5176:	f000 bd7a 	b.w	d5c6e <_ZdlPvj>
   d517a:	bd38      	pop	{r3, r4, r5, pc}

000d517c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d517c:	b513      	push	{r0, r1, r4, lr}
   d517e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5180:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5184:	2300      	movs	r3, #0
   d5186:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5188:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d518a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d518c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d518e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5190:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5192:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5194:	f7fe ffc0 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5198:	4620      	mov	r0, r4
   d519a:	b002      	add	sp, #8
   d519c:	bd10      	pop	{r4, pc}

000d519e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d519e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51a0:	460c      	mov	r4, r1
   d51a2:	ad02      	add	r5, sp, #8
   d51a4:	f854 3b04 	ldr.w	r3, [r4], #4
   d51a8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d51ac:	4606      	mov	r6, r0
   d51ae:	460f      	mov	r7, r1
   d51b0:	a801      	add	r0, sp, #4
   d51b2:	4621      	mov	r1, r4
   d51b4:	f7ff fe98 	bl	d4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d51b8:	4629      	mov	r1, r5
   d51ba:	4630      	mov	r0, r6
   d51bc:	f7ff ffde 	bl	d517c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51c0:	a801      	add	r0, sp, #4
   d51c2:	f7fe ffa9 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51c6:	4620      	mov	r0, r4
   d51c8:	f7fe ffa6 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d51cc:	4638      	mov	r0, r7
   d51ce:	2108      	movs	r1, #8
   d51d0:	f000 fd4d 	bl	d5c6e <_ZdlPvj>
        return p;
    }
   d51d4:	4630      	mov	r0, r6
   d51d6:	b003      	add	sp, #12
   d51d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51da <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d51da:	b513      	push	{r0, r1, r4, lr}
   d51dc:	460b      	mov	r3, r1
   d51de:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51e0:	c803      	ldmia	r0, {r0, r1}
   d51e2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51ee:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d51f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d51f6:	b002      	add	sp, #8
   d51f8:	bd10      	pop	{r4, pc}
	...

000d51fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51fc:	b538      	push	{r3, r4, r5, lr}
   d51fe:	2300      	movs	r3, #0
   d5200:	4604      	mov	r4, r0
   d5202:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5204:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5206:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5208:	f7fe ff47 	bl	d409a <_Znwj>
   d520c:	b128      	cbz	r0, d521a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d520e:	2301      	movs	r3, #1
   d5210:	6043      	str	r3, [r0, #4]
   d5212:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5214:	4b02      	ldr	r3, [pc, #8]	; (d5220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5216:	6003      	str	r3, [r0, #0]
   d5218:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d521a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d521c:	4620      	mov	r0, r4
   d521e:	bd38      	pop	{r3, r4, r5, pc}
   d5220:	000d7324 	.word	0x000d7324

000d5224 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5224:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5226:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5228:	b90a      	cbnz	r2, d522e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d522a:	f000 fd22 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d522e:	68c3      	ldr	r3, [r0, #12]
    }
   d5230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5234:	4718      	bx	r3

000d5236 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5236:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5238:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d523a:	f100 0110 	add.w	r1, r0, #16
   d523e:	f7ff fff1 	bl	d5224 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5242:	bd08      	pop	{r3, pc}

000d5244 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5244:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5246:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5248:	b90a      	cbnz	r2, d524e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d524a:	f000 fd12 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d524e:	68c3      	ldr	r3, [r0, #12]
    }
   d5250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5254:	4718      	bx	r3

000d5256 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5256:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5258:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d525a:	f100 0110 	add.w	r1, r0, #16
   d525e:	f7ff fff1 	bl	d5244 <_ZNKSt8functionIFvRKbEEclES1_>
   d5262:	bd08      	pop	{r3, pc}

000d5264 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5264:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5266:	2300      	movs	r3, #0
   d5268:	6083      	str	r3, [r0, #8]
   d526a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d526c:	4604      	mov	r4, r0
   d526e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5270:	b12b      	cbz	r3, d527e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5272:	2202      	movs	r2, #2
   d5274:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5276:	68eb      	ldr	r3, [r5, #12]
   d5278:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d527a:	68ab      	ldr	r3, [r5, #8]
   d527c:	60a3      	str	r3, [r4, #8]
	}
    }
   d527e:	4620      	mov	r0, r4
   d5280:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5284:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5286:	b089      	sub	sp, #36	; 0x24
   d5288:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d528a:	4668      	mov	r0, sp
   d528c:	f7ff ff3d 	bl	d510a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5290:	2300      	movs	r3, #0
   d5292:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5296:	f04f 0202 	mov.w	r2, #2
   d529a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d529e:	2b00      	cmp	r3, #0
   d52a0:	d103      	bne.n	d52aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d52a2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d52a6:	2900      	cmp	r1, #0
   d52a8:	d1f7      	bne.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d52aa:	d002      	beq.n	d52b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d52ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d52b0:	e063      	b.n	d537a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d52b2:	f114 050c 	adds.w	r5, r4, #12
   d52b6:	d003      	beq.n	d52c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d52b8:	4669      	mov	r1, sp
   d52ba:	4628      	mov	r0, r5
   d52bc:	f7ff ff25 	bl	d510a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d52c0:	f3bf 8f5f 	dmb	sy
   d52c4:	2301      	movs	r3, #1
   d52c6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d52c8:	2000      	movs	r0, #0
   d52ca:	f104 0308 	add.w	r3, r4, #8
   d52ce:	f3bf 8f5f 	dmb	sy
   d52d2:	e853 6f00 	ldrex	r6, [r3]
   d52d6:	e843 0200 	strex	r2, r0, [r3]
   d52da:	2a00      	cmp	r2, #0
   d52dc:	d1f9      	bne.n	d52d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d52de:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52e2:	2e00      	cmp	r6, #0
   d52e4:	d049      	beq.n	d537a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52e6:	f7ff fb13 	bl	d4910 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52ea:	b120      	cbz	r0, d52f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52ec:	4629      	mov	r1, r5
   d52ee:	4630      	mov	r0, r6
   d52f0:	f7ff ff98 	bl	d5224 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d52f4:	e03a      	b.n	d536c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52f6:	4631      	mov	r1, r6
   d52f8:	a802      	add	r0, sp, #8
   d52fa:	f7ff ffb3 	bl	d5264 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52fe:	68e0      	ldr	r0, [r4, #12]
   d5300:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5304:	b108      	cbz	r0, d530a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5306:	f001 fb6d 	bl	d69e4 <strdup>
   d530a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d530c:	2010      	movs	r0, #16
   d530e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5312:	f7fe fec2 	bl	d409a <_Znwj>
   d5316:	4605      	mov	r5, r0
   d5318:	b1e8      	cbz	r0, d5356 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d531a:	2700      	movs	r7, #0
   d531c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d531e:	2018      	movs	r0, #24
   d5320:	f7fe febb 	bl	d409a <_Znwj>
   d5324:	4604      	mov	r4, r0
   d5326:	b188      	cbz	r0, d534c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5328:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d532a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d532c:	a802      	add	r0, sp, #8
   d532e:	f7ff ff54 	bl	d51da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5332:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5334:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5336:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5338:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d533a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d533c:	a906      	add	r1, sp, #24
   d533e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5340:	60e3      	str	r3, [r4, #12]
   d5342:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5346:	9205      	str	r2, [sp, #20]
   d5348:	f7ff fedf 	bl	d510a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d534c:	4b0d      	ldr	r3, [pc, #52]	; (d5384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d534e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5350:	4b0d      	ldr	r3, [pc, #52]	; (d5388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5352:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5354:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5356:	a806      	add	r0, sp, #24
   d5358:	f7ff fee6 	bl	d5128 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535c:	a802      	add	r0, sp, #8
   d535e:	f7ff fb33 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5362:	2200      	movs	r2, #0
   d5364:	4629      	mov	r1, r5
   d5366:	4809      	ldr	r0, [pc, #36]	; (d538c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5368:	f7ff fada 	bl	d4920 <application_thread_invoke>
   d536c:	4630      	mov	r0, r6
   d536e:	f7ff fb2b 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5372:	2110      	movs	r1, #16
   d5374:	4630      	mov	r0, r6
   d5376:	f000 fc7a 	bl	d5c6e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d537a:	4668      	mov	r0, sp
   d537c:	f7ff fed4 	bl	d5128 <_ZN8particle5ErrorD1Ev>
    }
   d5380:	b009      	add	sp, #36	; 0x24
   d5382:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5384:	000d5237 	.word	0x000d5237
   d5388:	000d54ad 	.word	0x000d54ad
   d538c:	000d4dc5 	.word	0x000d4dc5

000d5390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5394:	b08b      	sub	sp, #44	; 0x2c
   d5396:	4606      	mov	r6, r0
   d5398:	460f      	mov	r7, r1
   d539a:	4690      	mov	r8, r2
   d539c:	4699      	mov	r9, r3
   d539e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53a2:	f7ff fa2d 	bl	d4800 <spark_cloud_flag_connected>
   d53a6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d53a8:	4683      	mov	fp, r0
   d53aa:	bb30      	cbnz	r0, d53fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d53ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d53b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d53b2:	a905      	add	r1, sp, #20
   d53b4:	4628      	mov	r0, r5
   d53b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d53ba:	f7ff fea6 	bl	d510a <_ZN8particle5ErrorC1EOS0_>
   d53be:	2014      	movs	r0, #20
   d53c0:	f7fe fe6b 	bl	d409a <_Znwj>
   d53c4:	4604      	mov	r4, r0
   d53c6:	b158      	cbz	r0, d53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d53c8:	2302      	movs	r3, #2
   d53ca:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d53cc:	2301      	movs	r3, #1
   d53ce:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d53d0:	f8c0 b004 	str.w	fp, [r0, #4]
   d53d4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d53d8:	4629      	mov	r1, r5
   d53da:	300c      	adds	r0, #12
   d53dc:	f7ff fe95 	bl	d510a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d53e0:	4630      	mov	r0, r6
   d53e2:	4621      	mov	r1, r4
   d53e4:	f840 4b04 	str.w	r4, [r0], #4
   d53e8:	f7ff ff08 	bl	d51fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d53ec:	4628      	mov	r0, r5
   d53ee:	f7ff fe9b 	bl	d5128 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d53f2:	a805      	add	r0, sp, #20
   d53f4:	f7ff fe98 	bl	d5128 <_ZN8particle5ErrorD1Ev>
   d53f8:	e052      	b.n	d54a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d53fa:	2400      	movs	r4, #0
   d53fc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d53fe:	2014      	movs	r0, #20
   d5400:	606c      	str	r4, [r5, #4]
   d5402:	60ac      	str	r4, [r5, #8]
   d5404:	9307      	str	r3, [sp, #28]
   d5406:	f7fe fe48 	bl	d409a <_Znwj>
   d540a:	4601      	mov	r1, r0
   d540c:	b118      	cbz	r0, d5416 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d540e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5410:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5412:	6044      	str	r4, [r0, #4]
   d5414:	6084      	str	r4, [r0, #8]
   d5416:	a804      	add	r0, sp, #16
   d5418:	9103      	str	r1, [sp, #12]
   d541a:	f7ff feef 	bl	d51fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d541e:	4b22      	ldr	r3, [pc, #136]	; (d54a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5420:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5422:	2008      	movs	r0, #8
   d5424:	f7fe fe39 	bl	d409a <_Znwj>
   d5428:	4604      	mov	r4, r0
   d542a:	b128      	cbz	r0, d5438 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d542c:	9b03      	ldr	r3, [sp, #12]
   d542e:	f840 3b04 	str.w	r3, [r0], #4
   d5432:	a904      	add	r1, sp, #16
   d5434:	f7ff fd58 	bl	d4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5438:	9500      	str	r5, [sp, #0]
   d543a:	fa5f f38a 	uxtb.w	r3, sl
   d543e:	464a      	mov	r2, r9
   d5440:	4641      	mov	r1, r8
   d5442:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5444:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5446:	f7ff f9e3 	bl	d4810 <spark_send_event>
   d544a:	b920      	cbnz	r0, d5456 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d544c:	9b03      	ldr	r3, [sp, #12]
   d544e:	785b      	ldrb	r3, [r3, #1]
   d5450:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5454:	b183      	cbz	r3, d5478 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5456:	9b03      	ldr	r3, [sp, #12]
   d5458:	9305      	str	r3, [sp, #20]
   d545a:	a904      	add	r1, sp, #16
   d545c:	a806      	add	r0, sp, #24
   d545e:	f7ff fd43 	bl	d4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5462:	a905      	add	r1, sp, #20
   d5464:	4630      	mov	r0, r6
   d5466:	f7ff fe89 	bl	d517c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d546a:	a806      	add	r0, sp, #24
   d546c:	f7fe fe54 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5470:	a804      	add	r0, sp, #16
   d5472:	f7fe fe51 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5476:	e013      	b.n	d54a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5478:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d547c:	a905      	add	r1, sp, #20
   d547e:	a803      	add	r0, sp, #12
   d5480:	9205      	str	r2, [sp, #20]
   d5482:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5486:	f7ff fefd 	bl	d5284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d548a:	a805      	add	r0, sp, #20
   d548c:	f7ff fe4c 	bl	d5128 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5490:	a805      	add	r0, sp, #20
   d5492:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5494:	f7ff fe83 	bl	d519e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5498:	a806      	add	r0, sp, #24
   d549a:	f7fe fe3d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d549e:	e7da      	b.n	d5456 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d54a0:	4630      	mov	r0, r6
   d54a2:	b00b      	add	sp, #44	; 0x2c
   d54a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d54a8:	000d561d 	.word	0x000d561d

000d54ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d54ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d54ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d54b2:	d006      	beq.n	d54c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d54b4:	2a03      	cmp	r2, #3
   d54b6:	d017      	beq.n	d54e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d54b8:	2a01      	cmp	r2, #1
   d54ba:	d122      	bne.n	d5502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54be:	6003      	str	r3, [r0, #0]
	      break;
   d54c0:	e01f      	b.n	d5502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54c2:	2018      	movs	r0, #24
   d54c4:	680e      	ldr	r6, [r1, #0]
   d54c6:	f7fe fde8 	bl	d409a <_Znwj>
   d54ca:	4605      	mov	r5, r0
   d54cc:	b150      	cbz	r0, d54e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d54ce:	4631      	mov	r1, r6
   d54d0:	f7ff fec8 	bl	d5264 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d54d4:	6930      	ldr	r0, [r6, #16]
   d54d6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d54da:	b108      	cbz	r0, d54e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d54dc:	f001 fa82 	bl	d69e4 <strdup>
   d54e0:	6128      	str	r0, [r5, #16]
   d54e2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54e4:	6025      	str	r5, [r4, #0]
   d54e6:	e00c      	b.n	d5502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54e8:	6804      	ldr	r4, [r0, #0]
   d54ea:	b154      	cbz	r4, d5502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d54ec:	f104 0010 	add.w	r0, r4, #16
   d54f0:	f7ff fe1a 	bl	d5128 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54f4:	4620      	mov	r0, r4
   d54f6:	f7ff fa67 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54fa:	2118      	movs	r1, #24
   d54fc:	4620      	mov	r0, r4
   d54fe:	f000 fbb6 	bl	d5c6e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5502:	2000      	movs	r0, #0
   d5504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5506 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5506:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5508:	2300      	movs	r3, #0
   d550a:	6083      	str	r3, [r0, #8]
   d550c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d550e:	4604      	mov	r4, r0
   d5510:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5512:	b12b      	cbz	r3, d5520 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5514:	2202      	movs	r2, #2
   d5516:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5518:	68eb      	ldr	r3, [r5, #12]
   d551a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d551c:	68ab      	ldr	r3, [r5, #8]
   d551e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5520:	4620      	mov	r0, r4
   d5522:	bd38      	pop	{r3, r4, r5, pc}

000d5524 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5524:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5526:	b570      	push	{r4, r5, r6, lr}
   d5528:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d552a:	d006      	beq.n	d553a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d552c:	2a03      	cmp	r2, #3
   d552e:	d011      	beq.n	d5554 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5530:	2a01      	cmp	r2, #1
   d5532:	d118      	bne.n	d5566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5534:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5536:	6003      	str	r3, [r0, #0]
	      break;
   d5538:	e015      	b.n	d5566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d553a:	2014      	movs	r0, #20
   d553c:	680e      	ldr	r6, [r1, #0]
   d553e:	f7fe fdac 	bl	d409a <_Znwj>
   d5542:	4605      	mov	r5, r0
   d5544:	b120      	cbz	r0, d5550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5546:	4631      	mov	r1, r6
   d5548:	f7ff ffdd 	bl	d5506 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d554c:	7c33      	ldrb	r3, [r6, #16]
   d554e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5550:	6025      	str	r5, [r4, #0]
   d5552:	e008      	b.n	d5566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5554:	6804      	ldr	r4, [r0, #0]
   d5556:	b134      	cbz	r4, d5566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff fa35 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d555e:	2114      	movs	r1, #20
   d5560:	4620      	mov	r0, r4
   d5562:	f000 fb84 	bl	d5c6e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5566:	2000      	movs	r0, #0
   d5568:	bd70      	pop	{r4, r5, r6, pc}
	...

000d556c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d556c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d556e:	2300      	movs	r3, #0
   d5570:	b087      	sub	sp, #28
   d5572:	460c      	mov	r4, r1
   d5574:	f3bf 8f5f 	dmb	sy
   d5578:	e850 6f00 	ldrex	r6, [r0]
   d557c:	e840 3200 	strex	r2, r3, [r0]
   d5580:	2a00      	cmp	r2, #0
   d5582:	d1f9      	bne.n	d5578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5584:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5588:	2e00      	cmp	r6, #0
   d558a:	d03f      	beq.n	d560c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d558c:	4618      	mov	r0, r3
   d558e:	f7ff f9bf 	bl	d4910 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5592:	4607      	mov	r7, r0
   d5594:	b120      	cbz	r0, d55a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5596:	4621      	mov	r1, r4
   d5598:	4630      	mov	r0, r6
   d559a:	f7ff fe53 	bl	d5244 <_ZNKSt8functionIFvRKbEEclES1_>
   d559e:	e02e      	b.n	d55fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d55a0:	4631      	mov	r1, r6
   d55a2:	a801      	add	r0, sp, #4
   d55a4:	f7ff ffaf 	bl	d5506 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d55a8:	7823      	ldrb	r3, [r4, #0]
   d55aa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d55ae:	2010      	movs	r0, #16
   d55b0:	f7fe fd73 	bl	d409a <_Znwj>
   d55b4:	4605      	mov	r5, r0
   d55b6:	b1d0      	cbz	r0, d55ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55ba:	2014      	movs	r0, #20
   d55bc:	f7fe fd6d 	bl	d409a <_Znwj>
   d55c0:	4604      	mov	r4, r0
   d55c2:	b178      	cbz	r0, d55e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55c4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55c6:	4601      	mov	r1, r0
   d55c8:	a801      	add	r0, sp, #4
   d55ca:	f7ff fe06 	bl	d51da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55ce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d55d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55d6:	9203      	str	r2, [sp, #12]
   d55d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55da:	60e3      	str	r3, [r4, #12]
   d55dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55e0:	9204      	str	r2, [sp, #16]
   d55e2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55e4:	4b0a      	ldr	r3, [pc, #40]	; (d5610 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d55e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55e8:	4b0a      	ldr	r3, [pc, #40]	; (d5614 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55ea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55ec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55ee:	a801      	add	r0, sp, #4
   d55f0:	f7ff f9ea 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55f4:	2200      	movs	r2, #0
   d55f6:	4629      	mov	r1, r5
   d55f8:	4807      	ldr	r0, [pc, #28]	; (d5618 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d55fa:	f7ff f991 	bl	d4920 <application_thread_invoke>
   d55fe:	4630      	mov	r0, r6
   d5600:	f7ff f9e2 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5604:	2110      	movs	r1, #16
   d5606:	4630      	mov	r0, r6
   d5608:	f000 fb31 	bl	d5c6e <_ZdlPvj>
        }
    }
   d560c:	b007      	add	sp, #28
   d560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5610:	000d5257 	.word	0x000d5257
   d5614:	000d5525 	.word	0x000d5525
   d5618:	000d4dc5 	.word	0x000d4dc5

000d561c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d561c:	b530      	push	{r4, r5, lr}
   d561e:	b085      	sub	sp, #20
   d5620:	4604      	mov	r4, r0
   d5622:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5624:	4668      	mov	r0, sp
   d5626:	4611      	mov	r1, r2
   d5628:	f7ff fdb9 	bl	d519e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d562c:	b17c      	cbz	r4, d564e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d562e:	b224      	sxth	r4, r4
   d5630:	4628      	mov	r0, r5
   d5632:	b10d      	cbz	r5, d5638 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5634:	f001 f9d6 	bl	d69e4 <strdup>
   d5638:	9002      	str	r0, [sp, #8]
   d563a:	a902      	add	r1, sp, #8
   d563c:	4668      	mov	r0, sp
   d563e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5642:	f7ff fe1f 	bl	d5284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5646:	a802      	add	r0, sp, #8
   d5648:	f7ff fd6e 	bl	d5128 <_ZN8particle5ErrorD1Ev>
   d564c:	e01d      	b.n	d568a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d564e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5650:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5654:	f04f 0201 	mov.w	r2, #1
   d5658:	e8d0 3f4f 	ldrexb	r3, [r0]
   d565c:	42a3      	cmp	r3, r4
   d565e:	d103      	bne.n	d5668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5660:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5664:	2900      	cmp	r1, #0
   d5666:	d1f7      	bne.n	d5658 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5668:	d002      	beq.n	d5670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d566a:	f88d 3008 	strb.w	r3, [sp, #8]
   d566e:	e00c      	b.n	d568a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5670:	f110 010c 	adds.w	r1, r0, #12
   d5674:	f04f 0301 	mov.w	r3, #1
   d5678:	bf18      	it	ne
   d567a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d567c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5680:	3004      	adds	r0, #4
   d5682:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5686:	f7ff ff71 	bl	d556c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d568a:	a801      	add	r0, sp, #4
   d568c:	f7fe fd44 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5690:	b005      	add	sp, #20
   d5692:	bd30      	pop	{r4, r5, pc}

000d5694 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5694:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5696:	4b0c      	ldr	r3, [pc, #48]	; (d56c8 <serialEventRun+0x34>)
   d5698:	b133      	cbz	r3, d56a8 <serialEventRun+0x14>
   d569a:	f7ff fc8f 	bl	d4fbc <_Z16_fetch_usbserialv>
   d569e:	6803      	ldr	r3, [r0, #0]
   d56a0:	691b      	ldr	r3, [r3, #16]
   d56a2:	4798      	blx	r3
   d56a4:	2800      	cmp	r0, #0
   d56a6:	dc09      	bgt.n	d56bc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d56a8:	4b08      	ldr	r3, [pc, #32]	; (d56cc <serialEventRun+0x38>)
   d56aa:	b163      	cbz	r3, d56c6 <serialEventRun+0x32>
   d56ac:	f7ff fbf6 	bl	d4e9c <_Z22__fetch_global_Serial1v>
   d56b0:	6803      	ldr	r3, [r0, #0]
   d56b2:	691b      	ldr	r3, [r3, #16]
   d56b4:	4798      	blx	r3
   d56b6:	2800      	cmp	r0, #0
   d56b8:	dc03      	bgt.n	d56c2 <serialEventRun+0x2e>
   d56ba:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d56bc:	f3af 8000 	nop.w
   d56c0:	e7f2      	b.n	d56a8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d56c2:	f3af 8000 	nop.w
   d56c6:	bd08      	pop	{r3, pc}
	...

000d56d0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d56d0:	b508      	push	{r3, lr}
	serialEventRun();
   d56d2:	f7ff ffdf 	bl	d5694 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d56d6:	f7ff f853 	bl	d4780 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56da:	4b01      	ldr	r3, [pc, #4]	; (d56e0 <_post_loop+0x10>)
   d56dc:	6018      	str	r0, [r3, #0]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	2003e704 	.word	0x2003e704

000d56e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56e6:	2300      	movs	r3, #0
   d56e8:	9300      	str	r3, [sp, #0]
   d56ea:	461a      	mov	r2, r3
   d56ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56f0:	f7ff f930 	bl	d4954 <system_ctrl_set_result>
}
   d56f4:	b003      	add	sp, #12
   d56f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d56fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56fe:	8843      	ldrh	r3, [r0, #2]
   d5700:	2b0a      	cmp	r3, #10
   d5702:	d008      	beq.n	d5716 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5704:	2b50      	cmp	r3, #80	; 0x50
   d5706:	d109      	bne.n	d571c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5708:	4b09      	ldr	r3, [pc, #36]	; (d5730 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d570a:	681b      	ldr	r3, [r3, #0]
   d570c:	b13b      	cbz	r3, d571e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d570e:	b003      	add	sp, #12
   d5710:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5714:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5716:	f7ff ffe5 	bl	d56e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d571a:	e006      	b.n	d572a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d571c:	2300      	movs	r3, #0
   d571e:	9300      	str	r3, [sp, #0]
   d5720:	461a      	mov	r2, r3
   d5722:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5726:	f7ff f915 	bl	d4954 <system_ctrl_set_result>
        break;
    }
}
   d572a:	b003      	add	sp, #12
   d572c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5730:	2003e68c 	.word	0x2003e68c

000d5734 <module_user_init_hook>:

void module_user_init_hook()
{
   d5734:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5736:	f7ff f81b 	bl	d4770 <HAL_RNG_GetRandomNumber>
   d573a:	4604      	mov	r4, r0
    srand(seed);
   d573c:	f001 f918 	bl	d6970 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5740:	4b07      	ldr	r3, [pc, #28]	; (d5760 <module_user_init_hook+0x2c>)
   d5742:	b113      	cbz	r3, d574a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5744:	4620      	mov	r0, r4
   d5746:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d574a:	2100      	movs	r1, #0
   d574c:	4804      	ldr	r0, [pc, #16]	; (d5760 <module_user_init_hook+0x2c>)
   d574e:	f7ff f86f 	bl	d4830 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5752:	2100      	movs	r1, #0
   d5754:	4803      	ldr	r0, [pc, #12]	; (d5764 <module_user_init_hook+0x30>)
}
   d5756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d575a:	f7ff b8f1 	b.w	d4940 <system_ctrl_set_app_request_handler>
   d575e:	bf00      	nop
   d5760:	00000000 	.word	0x00000000
   d5764:	000d56fd 	.word	0x000d56fd

000d5768 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5768:	b510      	push	{r4, lr}
   d576a:	4604      	mov	r4, r0
   d576c:	f7ff f92c 	bl	d49c8 <_ZNSt14_Function_baseD1Ev>
   d5770:	4620      	mov	r0, r4
   d5772:	bd10      	pop	{r4, pc}

000d5774 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5774:	4803      	ldr	r0, [pc, #12]	; (d5784 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5776:	4a04      	ldr	r2, [pc, #16]	; (d5788 <_GLOBAL__sub_I_RGB+0x14>)
   d5778:	4904      	ldr	r1, [pc, #16]	; (d578c <_GLOBAL__sub_I_RGB+0x18>)
   d577a:	2300      	movs	r3, #0
   d577c:	6083      	str	r3, [r0, #8]
   d577e:	f000 ba71 	b.w	d5c64 <__aeabi_atexit>
   d5782:	bf00      	nop
   d5784:	2003e690 	.word	0x2003e690
   d5788:	2003e35c 	.word	0x2003e35c
   d578c:	000d5769 	.word	0x000d5769

000d5790 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5790:	2100      	movs	r1, #0
   d5792:	f7ff b8b5 	b.w	d4900 <system_delay_ms>
	...

000d5798 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5798:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d579a:	4b14      	ldr	r3, [pc, #80]	; (d57ec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d579c:	4f14      	ldr	r7, [pc, #80]	; (d57f0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d579e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d57a0:	4b14      	ldr	r3, [pc, #80]	; (d57f4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d57a2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d57a4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d57a6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d57a8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d57aa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d57ac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d57ae:	d01b      	beq.n	d57e8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d57b0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d57b2:	ad01      	add	r5, sp, #4
   d57b4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d57b8:	f000 ffce 	bl	d6758 <localtime>
	calendar_time->tm_year += 1900;
   d57bc:	6943      	ldr	r3, [r0, #20]
   d57be:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d57c2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d57c4:	4604      	mov	r4, r0
   d57c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d57c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d57ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d57cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d57ce:	f8d4 e000 	ldr.w	lr, [r4]
   d57d2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d57d6:	ad01      	add	r5, sp, #4
   d57d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57da:	4c07      	ldr	r4, [pc, #28]	; (d57f8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d57dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d57e2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d57e4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d57e8:	b00b      	add	sp, #44	; 0x2c
   d57ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57ec:	2003e6d0 	.word	0x2003e6d0
   d57f0:	2003e6cc 	.word	0x2003e6cc
   d57f4:	2003e6c8 	.word	0x2003e6c8
   d57f8:	2003e6a0 	.word	0x2003e6a0

000d57fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d57fc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d57fe:	2000      	movs	r0, #0
   d5800:	f7ff f80e 	bl	d4820 <spark_sync_time_pending>
   d5804:	b128      	cbz	r0, d5812 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5806:	f7fe fffb 	bl	d4800 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d580a:	f080 0001 	eor.w	r0, r0, #1
   d580e:	b2c0      	uxtb	r0, r0
   d5810:	bd08      	pop	{r3, pc}
   d5812:	2001      	movs	r0, #1
    }
   d5814:	bd08      	pop	{r3, pc}
	...

000d5818 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d5818:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d581a:	f7ff ffbd 	bl	d5798 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d581e:	4b04      	ldr	r3, [pc, #16]	; (d5830 <_ZN9TimeClass12hourFormat12El+0x18>)
   d5820:	6898      	ldr	r0, [r3, #8]
   d5822:	b118      	cbz	r0, d582c <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d5824:	280c      	cmp	r0, #12
   d5826:	dd02      	ble.n	d582e <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d5828:	380c      	subs	r0, #12
   d582a:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d582c:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d582e:	bd08      	pop	{r3, pc}
   d5830:	2003e6a0 	.word	0x2003e6a0

000d5834 <_ZN9TimeClass4isPMEl>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   d5834:	b508      	push	{r3, lr}
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5836:	f7ff ffaf 	bl	d5798 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
   d583a:	4b03      	ldr	r3, [pc, #12]	; (d5848 <_ZN9TimeClass4isPMEl+0x14>)
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
	return (hour(t) >= 12);
   d583c:	6898      	ldr	r0, [r3, #8]
}
   d583e:	280b      	cmp	r0, #11
   d5840:	bfd4      	ite	le
   d5842:	2000      	movle	r0, #0
   d5844:	2001      	movgt	r0, #1
   d5846:	bd08      	pop	{r3, pc}
   d5848:	2003e6a0 	.word	0x2003e6a0

000d584c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d584c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d584e:	2000      	movs	r0, #0
   d5850:	f7fe ffa6 	bl	d47a0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5854:	4604      	mov	r4, r0
   d5856:	b968      	cbnz	r0, d5874 <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5858:	f7ff f842 	bl	d48e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d585c:	2801      	cmp	r0, #1
   d585e:	d10b      	bne.n	d5878 <_ZN9TimeClass7isValidEv+0x2c>
   d5860:	4620      	mov	r0, r4
   d5862:	f7ff f865 	bl	d4930 <system_thread_get_state>
   d5866:	b938      	cbnz	r0, d5878 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5868:	f7ff ffc8 	bl	d57fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d586c:	b930      	cbnz	r0, d587c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d586e:	f7fe ffbf 	bl	d47f0 <spark_process>
   d5872:	e7f9      	b.n	d5868 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5874:	2001      	movs	r0, #1
   d5876:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5878:	2000      	movs	r0, #0
   d587a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d587c:	f7ff ffbe 	bl	d57fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5880:	2000      	movs	r0, #0
   d5882:	f7fe ff8d 	bl	d47a0 <HAL_RTC_Time_Is_Valid>
   d5886:	3000      	adds	r0, #0
   d5888:	bf18      	it	ne
   d588a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d588c:	bd10      	pop	{r4, pc}

000d588e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d588e:	b508      	push	{r3, lr}
    (void)isValid();
   d5890:	f7ff ffdc 	bl	d584c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5898:	f7fe bf7a 	b.w	d4790 <HAL_RTC_Get_UnixTime>

000d589c <_ZN9TimeClass4isAMEv>:
		return calendar_time_cache.tm_hour ;
}

/* returns true if time now is AM */
uint8_t TimeClass::isAM()
{
   d589c:	b508      	push	{r3, lr}
	return !isPM(now());
   d589e:	f7ff fff6 	bl	d588e <_ZN9TimeClass3nowEv>
   d58a2:	f7ff ffc7 	bl	d5834 <_ZN9TimeClass4isPMEl>
}
   d58a6:	fab0 f080 	clz	r0, r0
   d58aa:	0940      	lsrs	r0, r0, #5
   d58ac:	bd08      	pop	{r3, pc}

000d58ae <_ZN9TimeClass4isPMEv>:
	return !isPM(t);
}

/* returns true if time now is PM */
uint8_t TimeClass::isPM()
{
   d58ae:	b508      	push	{r3, lr}
	return isPM(now());
   d58b0:	f7ff ffed 	bl	d588e <_ZN9TimeClass3nowEv>
}
   d58b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* returns true if time now is PM */
uint8_t TimeClass::isPM()
{
	return isPM(now());
   d58b8:	f7ff bfbc 	b.w	d5834 <_ZN9TimeClass4isPMEl>

000d58bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58bc:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58be:	681a      	ldr	r2, [r3, #0]
   d58c0:	4b02      	ldr	r3, [pc, #8]	; (d58cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58c2:	601a      	str	r2, [r3, #0]
   d58c4:	4770      	bx	lr
   d58c6:	bf00      	nop
   d58c8:	2003e2a4 	.word	0x2003e2a4
   d58cc:	2003e6c4 	.word	0x2003e6c4

000d58d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d58d0:	4b01      	ldr	r3, [pc, #4]	; (d58d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d58d2:	4a02      	ldr	r2, [pc, #8]	; (d58dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d58d4:	601a      	str	r2, [r3, #0]
   d58d6:	4770      	bx	lr
   d58d8:	2003e6d4 	.word	0x2003e6d4
   d58dc:	000d73d2 	.word	0x000d73d2

000d58e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d58e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58e2:	4606      	mov	r6, r0
   d58e4:	460d      	mov	r5, r1
   d58e6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d58e8:	2400      	movs	r4, #0
  while (size--) {
   d58ea:	42bd      	cmp	r5, r7
   d58ec:	d00c      	beq.n	d5908 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d58ee:	6833      	ldr	r3, [r6, #0]
   d58f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58f4:	689b      	ldr	r3, [r3, #8]
   d58f6:	4630      	mov	r0, r6
   d58f8:	4798      	blx	r3
     if (chunk>=0)
   d58fa:	2800      	cmp	r0, #0
   d58fc:	db01      	blt.n	d5902 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d58fe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5900:	e7f3      	b.n	d58ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5902:	2c00      	cmp	r4, #0
   d5904:	bf08      	it	eq
   d5906:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5908:	4620      	mov	r0, r4
   d590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d590c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d590c:	b570      	push	{r4, r5, r6, lr}
   d590e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5910:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5912:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5914:	b149      	cbz	r1, d592a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5916:	f001 f880 	bl	d6a1a <strlen>
   d591a:	682b      	ldr	r3, [r5, #0]
   d591c:	4602      	mov	r2, r0
   d591e:	4621      	mov	r1, r4
   d5920:	4628      	mov	r0, r5
   d5922:	68db      	ldr	r3, [r3, #12]
    }
   d5924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5928:	4718      	bx	r3
    }
   d592a:	bd70      	pop	{r4, r5, r6, pc}

000d592c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d592c:	6803      	ldr	r3, [r0, #0]
   d592e:	689b      	ldr	r3, [r3, #8]
   d5930:	4718      	bx	r3

000d5932 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5932:	b530      	push	{r4, r5, lr}
   d5934:	b08b      	sub	sp, #44	; 0x2c
   d5936:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5938:	2100      	movs	r1, #0
   d593a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d593e:	2a01      	cmp	r2, #1
   d5940:	bf98      	it	ls
   d5942:	220a      	movls	r2, #10
   d5944:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5948:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d594c:	fb05 3312 	mls	r3, r5, r2, r3
   d5950:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5954:	2b09      	cmp	r3, #9
   d5956:	bf94      	ite	ls
   d5958:	3330      	addls	r3, #48	; 0x30
   d595a:	3337      	addhi	r3, #55	; 0x37
   d595c:	b2db      	uxtb	r3, r3
   d595e:	4621      	mov	r1, r4
   d5960:	f804 3901 	strb.w	r3, [r4], #-1
   d5964:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5966:	2d00      	cmp	r5, #0
   d5968:	d1ee      	bne.n	d5948 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d596a:	f7ff ffcf 	bl	d590c <_ZN5Print5writeEPKc>
}
   d596e:	b00b      	add	sp, #44	; 0x2c
   d5970:	bd30      	pop	{r4, r5, pc}

000d5972 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5972:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5974:	b92a      	cbnz	r2, d5982 <_ZN5Print5printEmi+0x10>
   d5976:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5978:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d597c:	689b      	ldr	r3, [r3, #8]
   d597e:	b2c9      	uxtb	r1, r1
   d5980:	4718      	bx	r3
  else return printNumber(n, base);
   d5982:	b2d2      	uxtb	r2, r2
}
   d5984:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5988:	f7ff bfd3 	b.w	d5932 <_ZN5Print11printNumberEmh>

000d598c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d598c:	f7ff bff1 	b.w	d5972 <_ZN5Print5printEmi>

000d5990 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5990:	4802      	ldr	r0, [pc, #8]	; (d599c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5992:	2300      	movs	r3, #0
   d5994:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5996:	f7fe bee3 	b.w	d4760 <os_mutex_recursive_create>
   d599a:	bf00      	nop
   d599c:	2003e6d8 	.word	0x2003e6d8

000d59a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d59a0:	b510      	push	{r4, lr}
   d59a2:	4604      	mov	r4, r0
{
	free(buffer);
   d59a4:	6800      	ldr	r0, [r0, #0]
   d59a6:	f7fe ffe7 	bl	d4978 <free>
}
   d59aa:	4620      	mov	r0, r4
   d59ac:	bd10      	pop	{r4, pc}

000d59ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d59ae:	b510      	push	{r4, lr}
   d59b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d59b2:	6800      	ldr	r0, [r0, #0]
   d59b4:	b108      	cbz	r0, d59ba <_ZN6String10invalidateEv+0xc>
   d59b6:	f7fe ffdf 	bl	d4978 <free>
	buffer = NULL;
   d59ba:	2300      	movs	r3, #0
   d59bc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d59be:	60a3      	str	r3, [r4, #8]
   d59c0:	6063      	str	r3, [r4, #4]
   d59c2:	bd10      	pop	{r4, pc}

000d59c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d59c4:	b538      	push	{r3, r4, r5, lr}
   d59c6:	4604      	mov	r4, r0
   d59c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d59ca:	6800      	ldr	r0, [r0, #0]
   d59cc:	3101      	adds	r1, #1
   d59ce:	f7fe ffdb 	bl	d4988 <realloc>
	if (newbuffer) {
   d59d2:	b110      	cbz	r0, d59da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d59d4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d59d8:	2001      	movs	r0, #1
	}
	return 0;
}
   d59da:	bd38      	pop	{r3, r4, r5, pc}

000d59dc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d59de:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d59e2:	b113      	cbz	r3, d59ea <_ZN6String7reserveEj+0xe>
   d59e4:	6843      	ldr	r3, [r0, #4]
   d59e6:	428b      	cmp	r3, r1
   d59e8:	d207      	bcs.n	d59fa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d59ea:	4620      	mov	r0, r4
   d59ec:	f7ff ffea 	bl	d59c4 <_ZN6String12changeBufferEj>
   d59f0:	b120      	cbz	r0, d59fc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d59f2:	68a3      	ldr	r3, [r4, #8]
   d59f4:	b90b      	cbnz	r3, d59fa <_ZN6String7reserveEj+0x1e>
   d59f6:	6822      	ldr	r2, [r4, #0]
   d59f8:	7013      	strb	r3, [r2, #0]
   d59fa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d59fc:	bd10      	pop	{r4, pc}

000d59fe <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59fe:	b570      	push	{r4, r5, r6, lr}
   d5a00:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5a02:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a04:	4604      	mov	r4, r0
   d5a06:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5a08:	f7ff ffe8 	bl	d59dc <_ZN6String7reserveEj>
   d5a0c:	b918      	cbnz	r0, d5a16 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5a0e:	4620      	mov	r0, r4
   d5a10:	f7ff ffcd 	bl	d59ae <_ZN6String10invalidateEv>
		return *this;
   d5a14:	e009      	b.n	d5a2a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5a16:	462a      	mov	r2, r5
   d5a18:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5a1a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5a1c:	6820      	ldr	r0, [r4, #0]
   d5a1e:	f000 ff93 	bl	d6948 <memcpy>
	buffer[len] = 0;
   d5a22:	6822      	ldr	r2, [r4, #0]
   d5a24:	68a3      	ldr	r3, [r4, #8]
   d5a26:	2100      	movs	r1, #0
   d5a28:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	bd70      	pop	{r4, r5, r6, pc}

000d5a2e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5a2e:	b538      	push	{r3, r4, r5, lr}
   d5a30:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5a32:	460c      	mov	r4, r1
   d5a34:	b141      	cbz	r1, d5a48 <_ZN6StringaSEPKc+0x1a>
   d5a36:	4608      	mov	r0, r1
   d5a38:	f000 ffef 	bl	d6a1a <strlen>
   d5a3c:	4621      	mov	r1, r4
   d5a3e:	4602      	mov	r2, r0
   d5a40:	4628      	mov	r0, r5
   d5a42:	f7ff ffdc 	bl	d59fe <_ZN6String4copyEPKcj>
   d5a46:	e001      	b.n	d5a4c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5a48:	f7ff ffb1 	bl	d59ae <_ZN6String10invalidateEv>

	return *this;
}
   d5a4c:	4628      	mov	r0, r5
   d5a4e:	bd38      	pop	{r3, r4, r5, pc}

000d5a50 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5a50:	b510      	push	{r4, lr}
   d5a52:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a54:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5a56:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a58:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5a5a:	6063      	str	r3, [r4, #4]
	len = 0;
   d5a5c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5a5e:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5a60:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5a62:	a901      	add	r1, sp, #4
   d5a64:	f000 f840 	bl	d5ae8 <itoa>
	*this = buf;
   d5a68:	a901      	add	r1, sp, #4
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	f7ff ffdf 	bl	d5a2e <_ZN6StringaSEPKc>
}
   d5a70:	4620      	mov	r0, r4
   d5a72:	b00a      	add	sp, #40	; 0x28
   d5a74:	bd10      	pop	{r4, pc}

000d5a76 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5a76:	b510      	push	{r4, lr}
   d5a78:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5a7a:	f000 ffce 	bl	d6a1a <strlen>
   d5a7e:	3801      	subs	r0, #1
   d5a80:	1823      	adds	r3, r4, r0
   d5a82:	4620      	mov	r0, r4
	while(i<j){
   d5a84:	4298      	cmp	r0, r3
   d5a86:	d206      	bcs.n	d5a96 <_Z11str_reversePc+0x20>
		c = *i;
   d5a88:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5a8a:	7819      	ldrb	r1, [r3, #0]
   d5a8c:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5a90:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5a94:	e7f6      	b.n	d5a84 <_Z11str_reversePc+0xe>
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5a98:	b570      	push	{r4, r5, r6, lr}
   d5a9a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5a9c:	1e91      	subs	r1, r2, #2
   d5a9e:	2922      	cmp	r1, #34	; 0x22
   d5aa0:	d820      	bhi.n	d5ae4 <ultoa+0x4c>
   d5aa2:	4625      	mov	r5, r4
   d5aa4:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5aa6:	b910      	cbnz	r0, d5aae <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5aa8:	4423      	add	r3, r4
            *ptr++ = '0';
   d5aaa:	2230      	movs	r2, #48	; 0x30
   d5aac:	e00e      	b.n	d5acc <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5aae:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5ab2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5ab6:	b2c1      	uxtb	r1, r0
   d5ab8:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5abc:	2809      	cmp	r0, #9
                *ptr += '0';
   d5abe:	bf94      	ite	ls
   d5ac0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5ac2:	3157      	addhi	r1, #87	; 0x57
   d5ac4:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5ac8:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5aca:	e7eb      	b.n	d5aa4 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5acc:	4299      	cmp	r1, r3
   d5ace:	d202      	bcs.n	d5ad6 <ultoa+0x3e>
            *ptr++ = '0';
   d5ad0:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5ad4:	e7fa      	b.n	d5acc <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5ad6:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5ad8:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5ada:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5adc:	f7ff ffcb 	bl	d5a76 <_Z11str_reversePc>
	return buffer;
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5ae4:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5ae6:	bd70      	pop	{r4, r5, r6, pc}

000d5ae8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5ae8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5aea:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5aec:	460c      	mov	r4, r1
   d5aee:	4615      	mov	r5, r2
	if(a<0){
   d5af0:	da0b      	bge.n	d5b0a <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5af6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5afa:	bf14      	ite	ne
   d5afc:	4258      	negne	r0, r3
   d5afe:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5b00:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5b02:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5b04:	462a      	mov	r2, r5
   d5b06:	4419      	add	r1, r3
   d5b08:	e000      	b.n	d5b0c <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5b0a:	2301      	movs	r3, #1
   d5b0c:	f7ff ffc4 	bl	d5a98 <ultoa>
	}
	return buffer;
}
   d5b10:	4620      	mov	r0, r4
   d5b12:	bd38      	pop	{r3, r4, r5, pc}

000d5b14 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5b14:	4b04      	ldr	r3, [pc, #16]	; (d5b28 <_GLOBAL__sub_I_System+0x14>)
   d5b16:	2000      	movs	r0, #0
   d5b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b1c:	7018      	strb	r0, [r3, #0]
   d5b1e:	8058      	strh	r0, [r3, #2]
   d5b20:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b22:	f7fe bee5 	b.w	d48f0 <set_system_mode>
   d5b26:	bf00      	nop
   d5b28:	2003e6dc 	.word	0x2003e6dc

000d5b2c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5b2c:	4770      	bx	lr

000d5b2e <_ZN8SPIClassD0Ev>:
   d5b2e:	b510      	push	{r4, lr}
   d5b30:	2110      	movs	r1, #16
   d5b32:	4604      	mov	r4, r0
   d5b34:	f000 f89b 	bl	d5c6e <_ZdlPvj>
   d5b38:	4620      	mov	r0, r4
   d5b3a:	bd10      	pop	{r4, pc}

000d5b3c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5b3c:	b570      	push	{r4, r5, r6, lr}
   d5b3e:	4b08      	ldr	r3, [pc, #32]	; (d5b60 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5b40:	6003      	str	r3, [r0, #0]
   d5b42:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5b44:	2500      	movs	r5, #0
   d5b46:	460e      	mov	r6, r1
   d5b48:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5b4c:	f7fe fe00 	bl	d4750 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5b50:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5b52:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5b54:	f7fe fe2c 	bl	d47b0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5b58:	60a5      	str	r5, [r4, #8]
}
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	bd70      	pop	{r4, r5, r6, pc}
   d5b5e:	bf00      	nop
   d5b60:	000d7448 	.word	0x000d7448

000d5b64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b64:	2200      	movs	r2, #0
   d5b66:	4611      	mov	r1, r2
   d5b68:	6840      	ldr	r0, [r0, #4]
   d5b6a:	f7fe bea1 	b.w	d48b0 <network_listening>

000d5b6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b6e:	2200      	movs	r2, #0
   d5b70:	4611      	mov	r1, r2
   d5b72:	6840      	ldr	r0, [r0, #4]
   d5b74:	f7fe beac 	b.w	d48d0 <network_get_listen_timeout>

000d5b78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b78:	2200      	movs	r2, #0
   d5b7a:	6840      	ldr	r0, [r0, #4]
   d5b7c:	f7fe bea0 	b.w	d48c0 <network_set_listen_timeout>

000d5b80 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b80:	2200      	movs	r2, #0
   d5b82:	f081 0101 	eor.w	r1, r1, #1
   d5b86:	6840      	ldr	r0, [r0, #4]
   d5b88:	f7fe be8a 	b.w	d48a0 <network_listen>

000d5b8c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b8c:	2300      	movs	r3, #0
   d5b8e:	461a      	mov	r2, r3
   d5b90:	4619      	mov	r1, r3
   d5b92:	6840      	ldr	r0, [r0, #4]
   d5b94:	f7fe be7c 	b.w	d4890 <network_off>

000d5b98 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b98:	2300      	movs	r3, #0
   d5b9a:	461a      	mov	r2, r3
   d5b9c:	4619      	mov	r1, r3
   d5b9e:	6840      	ldr	r0, [r0, #4]
   d5ba0:	f7fe be6e 	b.w	d4880 <network_on>

000d5ba4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ba4:	2200      	movs	r2, #0
   d5ba6:	4611      	mov	r1, r2
   d5ba8:	6840      	ldr	r0, [r0, #4]
   d5baa:	f7fe be61 	b.w	d4870 <network_ready>

000d5bae <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bae:	2200      	movs	r2, #0
   d5bb0:	4611      	mov	r1, r2
   d5bb2:	6840      	ldr	r0, [r0, #4]
   d5bb4:	f7fe be4c 	b.w	d4850 <network_connecting>

000d5bb8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bb8:	2200      	movs	r2, #0
   d5bba:	2102      	movs	r1, #2
   d5bbc:	6840      	ldr	r0, [r0, #4]
   d5bbe:	f7fe be4f 	b.w	d4860 <network_disconnect>

000d5bc2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5bc2:	2300      	movs	r3, #0
   d5bc4:	461a      	mov	r2, r3
   d5bc6:	6840      	ldr	r0, [r0, #4]
   d5bc8:	f7fe be3a 	b.w	d4840 <network_connect>

000d5bcc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5bcc:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5bce:	2203      	movs	r2, #3
   d5bd0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5bd2:	4a02      	ldr	r2, [pc, #8]	; (d5bdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5bd4:	601a      	str	r2, [r3, #0]
   d5bd6:	4770      	bx	lr
   d5bd8:	2003e6e4 	.word	0x2003e6e4
   d5bdc:	000d7458 	.word	0x000d7458

000d5be0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5be0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5be2:	4d0b      	ldr	r5, [pc, #44]	; (d5c10 <_Z19__fetch_global_Wirev+0x30>)
   d5be4:	6829      	ldr	r1, [r5, #0]
   d5be6:	f011 0401 	ands.w	r4, r1, #1
   d5bea:	d10f      	bne.n	d5c0c <_Z19__fetch_global_Wirev+0x2c>
   d5bec:	4628      	mov	r0, r5
   d5bee:	f7fe fa5a 	bl	d40a6 <__cxa_guard_acquire>
   d5bf2:	b158      	cbz	r0, d5c0c <_Z19__fetch_global_Wirev+0x2c>
   d5bf4:	4621      	mov	r1, r4
   d5bf6:	4807      	ldr	r0, [pc, #28]	; (d5c14 <_Z19__fetch_global_Wirev+0x34>)
   d5bf8:	f7ff f8b0 	bl	d4d5c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7fe fa57 	bl	d40b0 <__cxa_guard_release>
   d5c02:	4a05      	ldr	r2, [pc, #20]	; (d5c18 <_Z19__fetch_global_Wirev+0x38>)
   d5c04:	4905      	ldr	r1, [pc, #20]	; (d5c1c <_Z19__fetch_global_Wirev+0x3c>)
   d5c06:	4803      	ldr	r0, [pc, #12]	; (d5c14 <_Z19__fetch_global_Wirev+0x34>)
   d5c08:	f000 f82c 	bl	d5c64 <__aeabi_atexit>
	return wire;
}
   d5c0c:	4801      	ldr	r0, [pc, #4]	; (d5c14 <_Z19__fetch_global_Wirev+0x34>)
   d5c0e:	bd38      	pop	{r3, r4, r5, pc}
   d5c10:	2003e6ec 	.word	0x2003e6ec
   d5c14:	2003e6f0 	.word	0x2003e6f0
   d5c18:	2003e35c 	.word	0x2003e35c
   d5c1c:	000d4d05 	.word	0x000d4d05

000d5c20 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c20:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5c22:	4c0c      	ldr	r4, [pc, #48]	; (d5c54 <_GLOBAL__sub_I_SPI+0x34>)
   d5c24:	4e0c      	ldr	r6, [pc, #48]	; (d5c58 <_GLOBAL__sub_I_SPI+0x38>)
   d5c26:	4d0d      	ldr	r5, [pc, #52]	; (d5c5c <_GLOBAL__sub_I_SPI+0x3c>)
   d5c28:	2100      	movs	r1, #0
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	f7ff ff86 	bl	d5b3c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c30:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c32:	4c0b      	ldr	r4, [pc, #44]	; (d5c60 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5c34:	4632      	mov	r2, r6
   d5c36:	4629      	mov	r1, r5
   d5c38:	f000 f814 	bl	d5c64 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c3c:	2101      	movs	r1, #1
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7ff ff7c 	bl	d5b3c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c44:	4632      	mov	r2, r6
   d5c46:	4629      	mov	r1, r5
   d5c48:	4620      	mov	r0, r4
   d5c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5c4e:	f000 b809 	b.w	d5c64 <__aeabi_atexit>
   d5c52:	bf00      	nop
   d5c54:	2003e708 	.word	0x2003e708
   d5c58:	2003e35c 	.word	0x2003e35c
   d5c5c:	000d5b2d 	.word	0x000d5b2d
   d5c60:	2003e718 	.word	0x2003e718

000d5c64 <__aeabi_atexit>:
   d5c64:	460b      	mov	r3, r1
   d5c66:	4601      	mov	r1, r0
   d5c68:	4618      	mov	r0, r3
   d5c6a:	f000 bd67 	b.w	d673c <__cxa_atexit>

000d5c6e <_ZdlPvj>:
   d5c6e:	f7fe ba16 	b.w	d409e <_ZdlPv>

000d5c72 <_ZSt25__throw_bad_function_callv>:
   d5c72:	b508      	push	{r3, lr}
   d5c74:	f7fe fe98 	bl	d49a8 <abort>

000d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c78:	4b18      	ldr	r3, [pc, #96]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d1      	lsls	r1, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b16      	ldr	r3, [pc, #88]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d2      	lsls	r2, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b14      	ldr	r3, [pc, #80]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d0      	lsls	r0, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b12      	ldr	r3, [pc, #72]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d1      	lsls	r1, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b10      	ldr	r3, [pc, #64]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d2      	lsls	r2, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b0e      	ldr	r3, [pc, #56]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d0      	lsls	r0, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b0c      	ldr	r3, [pc, #48]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d1      	lsls	r1, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b0a      	ldr	r3, [pc, #40]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d2      	lsls	r2, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4770      	bx	lr
   d5cda:	bf00      	nop
   d5cdc:	2003e744 	.word	0x2003e744
   d5ce0:	2003e740 	.word	0x2003e740
   d5ce4:	2003e73c 	.word	0x2003e73c
   d5ce8:	2003e738 	.word	0x2003e738
   d5cec:	2003e734 	.word	0x2003e734
   d5cf0:	2003e730 	.word	0x2003e730
   d5cf4:	2003e72c 	.word	0x2003e72c
   d5cf8:	2003e728 	.word	0x2003e728

000d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5cfc:	4b24      	ldr	r3, [pc, #144]	; (d5d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d0      	lsls	r0, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b22      	ldr	r3, [pc, #136]	; (d5d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d1      	lsls	r1, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b20      	ldr	r3, [pc, #128]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d2      	lsls	r2, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b1e      	ldr	r3, [pc, #120]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d0      	lsls	r0, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b1c      	ldr	r3, [pc, #112]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d1      	lsls	r1, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b1a      	ldr	r3, [pc, #104]	; (d5da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d2      	lsls	r2, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b18      	ldr	r3, [pc, #96]	; (d5da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d0      	lsls	r0, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b16      	ldr	r3, [pc, #88]	; (d5dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b14      	ldr	r3, [pc, #80]	; (d5db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b12      	ldr	r3, [pc, #72]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d0      	lsls	r0, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b10      	ldr	r3, [pc, #64]	; (d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d1      	lsls	r1, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b0e      	ldr	r3, [pc, #56]	; (d5dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d2      	lsls	r2, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4770      	bx	lr
   d5d8e:	bf00      	nop
   d5d90:	2003e774 	.word	0x2003e774
   d5d94:	2003e770 	.word	0x2003e770
   d5d98:	2003e76c 	.word	0x2003e76c
   d5d9c:	2003e768 	.word	0x2003e768
   d5da0:	2003e764 	.word	0x2003e764
   d5da4:	2003e760 	.word	0x2003e760
   d5da8:	2003e75c 	.word	0x2003e75c
   d5dac:	2003e758 	.word	0x2003e758
   d5db0:	2003e754 	.word	0x2003e754
   d5db4:	2003e750 	.word	0x2003e750
   d5db8:	2003e74c 	.word	0x2003e74c
   d5dbc:	2003e748 	.word	0x2003e748

000d5dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5dc0:	4b24      	ldr	r3, [pc, #144]	; (d5e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5dc2:	681a      	ldr	r2, [r3, #0]
   d5dc4:	07d0      	lsls	r0, r2, #31
   d5dc6:	bf5c      	itt	pl
   d5dc8:	2201      	movpl	r2, #1
   d5dca:	601a      	strpl	r2, [r3, #0]
   d5dcc:	4b22      	ldr	r3, [pc, #136]	; (d5e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5dce:	681a      	ldr	r2, [r3, #0]
   d5dd0:	07d1      	lsls	r1, r2, #31
   d5dd2:	bf5c      	itt	pl
   d5dd4:	2201      	movpl	r2, #1
   d5dd6:	601a      	strpl	r2, [r3, #0]
   d5dd8:	4b20      	ldr	r3, [pc, #128]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5dda:	681a      	ldr	r2, [r3, #0]
   d5ddc:	07d2      	lsls	r2, r2, #31
   d5dde:	bf5c      	itt	pl
   d5de0:	2201      	movpl	r2, #1
   d5de2:	601a      	strpl	r2, [r3, #0]
   d5de4:	4b1e      	ldr	r3, [pc, #120]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5de6:	681a      	ldr	r2, [r3, #0]
   d5de8:	07d0      	lsls	r0, r2, #31
   d5dea:	bf5c      	itt	pl
   d5dec:	2201      	movpl	r2, #1
   d5dee:	601a      	strpl	r2, [r3, #0]
   d5df0:	4b1c      	ldr	r3, [pc, #112]	; (d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5df2:	681a      	ldr	r2, [r3, #0]
   d5df4:	07d1      	lsls	r1, r2, #31
   d5df6:	bf5c      	itt	pl
   d5df8:	2201      	movpl	r2, #1
   d5dfa:	601a      	strpl	r2, [r3, #0]
   d5dfc:	4b1a      	ldr	r3, [pc, #104]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5dfe:	681a      	ldr	r2, [r3, #0]
   d5e00:	07d2      	lsls	r2, r2, #31
   d5e02:	bf5c      	itt	pl
   d5e04:	2201      	movpl	r2, #1
   d5e06:	601a      	strpl	r2, [r3, #0]
   d5e08:	4b18      	ldr	r3, [pc, #96]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5e0a:	681a      	ldr	r2, [r3, #0]
   d5e0c:	07d0      	lsls	r0, r2, #31
   d5e0e:	bf5c      	itt	pl
   d5e10:	2201      	movpl	r2, #1
   d5e12:	601a      	strpl	r2, [r3, #0]
   d5e14:	4b16      	ldr	r3, [pc, #88]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5e16:	681a      	ldr	r2, [r3, #0]
   d5e18:	07d1      	lsls	r1, r2, #31
   d5e1a:	bf5c      	itt	pl
   d5e1c:	2201      	movpl	r2, #1
   d5e1e:	601a      	strpl	r2, [r3, #0]
   d5e20:	4b14      	ldr	r3, [pc, #80]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5e22:	681a      	ldr	r2, [r3, #0]
   d5e24:	07d2      	lsls	r2, r2, #31
   d5e26:	bf5c      	itt	pl
   d5e28:	2201      	movpl	r2, #1
   d5e2a:	601a      	strpl	r2, [r3, #0]
   d5e2c:	4b12      	ldr	r3, [pc, #72]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5e2e:	681a      	ldr	r2, [r3, #0]
   d5e30:	07d0      	lsls	r0, r2, #31
   d5e32:	bf5c      	itt	pl
   d5e34:	2201      	movpl	r2, #1
   d5e36:	601a      	strpl	r2, [r3, #0]
   d5e38:	4b10      	ldr	r3, [pc, #64]	; (d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5e3a:	681a      	ldr	r2, [r3, #0]
   d5e3c:	07d1      	lsls	r1, r2, #31
   d5e3e:	bf5c      	itt	pl
   d5e40:	2201      	movpl	r2, #1
   d5e42:	601a      	strpl	r2, [r3, #0]
   d5e44:	4b0e      	ldr	r3, [pc, #56]	; (d5e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5e46:	681a      	ldr	r2, [r3, #0]
   d5e48:	07d2      	lsls	r2, r2, #31
   d5e4a:	bf5c      	itt	pl
   d5e4c:	2201      	movpl	r2, #1
   d5e4e:	601a      	strpl	r2, [r3, #0]
   d5e50:	4770      	bx	lr
   d5e52:	bf00      	nop
   d5e54:	2003e7a4 	.word	0x2003e7a4
   d5e58:	2003e7a0 	.word	0x2003e7a0
   d5e5c:	2003e79c 	.word	0x2003e79c
   d5e60:	2003e798 	.word	0x2003e798
   d5e64:	2003e794 	.word	0x2003e794
   d5e68:	2003e790 	.word	0x2003e790
   d5e6c:	2003e78c 	.word	0x2003e78c
   d5e70:	2003e788 	.word	0x2003e788
   d5e74:	2003e784 	.word	0x2003e784
   d5e78:	2003e780 	.word	0x2003e780
   d5e7c:	2003e77c 	.word	0x2003e77c
   d5e80:	2003e778 	.word	0x2003e778

000d5e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e84:	4b18      	ldr	r3, [pc, #96]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e86:	681a      	ldr	r2, [r3, #0]
   d5e88:	07d1      	lsls	r1, r2, #31
   d5e8a:	bf5c      	itt	pl
   d5e8c:	2201      	movpl	r2, #1
   d5e8e:	601a      	strpl	r2, [r3, #0]
   d5e90:	4b16      	ldr	r3, [pc, #88]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e92:	681a      	ldr	r2, [r3, #0]
   d5e94:	07d2      	lsls	r2, r2, #31
   d5e96:	bf5c      	itt	pl
   d5e98:	2201      	movpl	r2, #1
   d5e9a:	601a      	strpl	r2, [r3, #0]
   d5e9c:	4b14      	ldr	r3, [pc, #80]	; (d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e9e:	681a      	ldr	r2, [r3, #0]
   d5ea0:	07d0      	lsls	r0, r2, #31
   d5ea2:	bf5c      	itt	pl
   d5ea4:	2201      	movpl	r2, #1
   d5ea6:	601a      	strpl	r2, [r3, #0]
   d5ea8:	4b12      	ldr	r3, [pc, #72]	; (d5ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5eaa:	681a      	ldr	r2, [r3, #0]
   d5eac:	07d1      	lsls	r1, r2, #31
   d5eae:	bf5c      	itt	pl
   d5eb0:	2201      	movpl	r2, #1
   d5eb2:	601a      	strpl	r2, [r3, #0]
   d5eb4:	4b10      	ldr	r3, [pc, #64]	; (d5ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5eb6:	681a      	ldr	r2, [r3, #0]
   d5eb8:	07d2      	lsls	r2, r2, #31
   d5eba:	bf5c      	itt	pl
   d5ebc:	2201      	movpl	r2, #1
   d5ebe:	601a      	strpl	r2, [r3, #0]
   d5ec0:	4b0e      	ldr	r3, [pc, #56]	; (d5efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ec2:	681a      	ldr	r2, [r3, #0]
   d5ec4:	07d0      	lsls	r0, r2, #31
   d5ec6:	bf5c      	itt	pl
   d5ec8:	2201      	movpl	r2, #1
   d5eca:	601a      	strpl	r2, [r3, #0]
   d5ecc:	4b0c      	ldr	r3, [pc, #48]	; (d5f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ece:	681a      	ldr	r2, [r3, #0]
   d5ed0:	07d1      	lsls	r1, r2, #31
   d5ed2:	bf5c      	itt	pl
   d5ed4:	2201      	movpl	r2, #1
   d5ed6:	601a      	strpl	r2, [r3, #0]
   d5ed8:	4b0a      	ldr	r3, [pc, #40]	; (d5f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5eda:	681a      	ldr	r2, [r3, #0]
   d5edc:	07d2      	lsls	r2, r2, #31
   d5ede:	bf5c      	itt	pl
   d5ee0:	2201      	movpl	r2, #1
   d5ee2:	601a      	strpl	r2, [r3, #0]
   d5ee4:	4770      	bx	lr
   d5ee6:	bf00      	nop
   d5ee8:	2003e7c4 	.word	0x2003e7c4
   d5eec:	2003e7c0 	.word	0x2003e7c0
   d5ef0:	2003e7bc 	.word	0x2003e7bc
   d5ef4:	2003e7b8 	.word	0x2003e7b8
   d5ef8:	2003e7b4 	.word	0x2003e7b4
   d5efc:	2003e7b0 	.word	0x2003e7b0
   d5f00:	2003e7ac 	.word	0x2003e7ac
   d5f04:	2003e7a8 	.word	0x2003e7a8

000d5f08 <__aeabi_drsub>:
   d5f08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5f0c:	e002      	b.n	d5f14 <__adddf3>
   d5f0e:	bf00      	nop

000d5f10 <__aeabi_dsub>:
   d5f10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5f14 <__adddf3>:
   d5f14:	b530      	push	{r4, r5, lr}
   d5f16:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5f1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5f1e:	ea94 0f05 	teq	r4, r5
   d5f22:	bf08      	it	eq
   d5f24:	ea90 0f02 	teqeq	r0, r2
   d5f28:	bf1f      	itttt	ne
   d5f2a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5f2e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5f32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5f36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f3a:	f000 80e2 	beq.w	d6102 <__adddf3+0x1ee>
   d5f3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5f42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5f46:	bfb8      	it	lt
   d5f48:	426d      	neglt	r5, r5
   d5f4a:	dd0c      	ble.n	d5f66 <__adddf3+0x52>
   d5f4c:	442c      	add	r4, r5
   d5f4e:	ea80 0202 	eor.w	r2, r0, r2
   d5f52:	ea81 0303 	eor.w	r3, r1, r3
   d5f56:	ea82 0000 	eor.w	r0, r2, r0
   d5f5a:	ea83 0101 	eor.w	r1, r3, r1
   d5f5e:	ea80 0202 	eor.w	r2, r0, r2
   d5f62:	ea81 0303 	eor.w	r3, r1, r3
   d5f66:	2d36      	cmp	r5, #54	; 0x36
   d5f68:	bf88      	it	hi
   d5f6a:	bd30      	pophi	{r4, r5, pc}
   d5f6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5f74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5f78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5f7c:	d002      	beq.n	d5f84 <__adddf3+0x70>
   d5f7e:	4240      	negs	r0, r0
   d5f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5f88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f90:	d002      	beq.n	d5f98 <__adddf3+0x84>
   d5f92:	4252      	negs	r2, r2
   d5f94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f98:	ea94 0f05 	teq	r4, r5
   d5f9c:	f000 80a7 	beq.w	d60ee <__adddf3+0x1da>
   d5fa0:	f1a4 0401 	sub.w	r4, r4, #1
   d5fa4:	f1d5 0e20 	rsbs	lr, r5, #32
   d5fa8:	db0d      	blt.n	d5fc6 <__adddf3+0xb2>
   d5faa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5fae:	fa22 f205 	lsr.w	r2, r2, r5
   d5fb2:	1880      	adds	r0, r0, r2
   d5fb4:	f141 0100 	adc.w	r1, r1, #0
   d5fb8:	fa03 f20e 	lsl.w	r2, r3, lr
   d5fbc:	1880      	adds	r0, r0, r2
   d5fbe:	fa43 f305 	asr.w	r3, r3, r5
   d5fc2:	4159      	adcs	r1, r3
   d5fc4:	e00e      	b.n	d5fe4 <__adddf3+0xd0>
   d5fc6:	f1a5 0520 	sub.w	r5, r5, #32
   d5fca:	f10e 0e20 	add.w	lr, lr, #32
   d5fce:	2a01      	cmp	r2, #1
   d5fd0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5fd4:	bf28      	it	cs
   d5fd6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5fda:	fa43 f305 	asr.w	r3, r3, r5
   d5fde:	18c0      	adds	r0, r0, r3
   d5fe0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fe8:	d507      	bpl.n	d5ffa <__adddf3+0xe6>
   d5fea:	f04f 0e00 	mov.w	lr, #0
   d5fee:	f1dc 0c00 	rsbs	ip, ip, #0
   d5ff2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5ff6:	eb6e 0101 	sbc.w	r1, lr, r1
   d5ffa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5ffe:	d31b      	bcc.n	d6038 <__adddf3+0x124>
   d6000:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6004:	d30c      	bcc.n	d6020 <__adddf3+0x10c>
   d6006:	0849      	lsrs	r1, r1, #1
   d6008:	ea5f 0030 	movs.w	r0, r0, rrx
   d600c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6010:	f104 0401 	add.w	r4, r4, #1
   d6014:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6018:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d601c:	f080 809a 	bcs.w	d6154 <__adddf3+0x240>
   d6020:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6024:	bf08      	it	eq
   d6026:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d602a:	f150 0000 	adcs.w	r0, r0, #0
   d602e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6032:	ea41 0105 	orr.w	r1, r1, r5
   d6036:	bd30      	pop	{r4, r5, pc}
   d6038:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d603c:	4140      	adcs	r0, r0
   d603e:	eb41 0101 	adc.w	r1, r1, r1
   d6042:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6046:	f1a4 0401 	sub.w	r4, r4, #1
   d604a:	d1e9      	bne.n	d6020 <__adddf3+0x10c>
   d604c:	f091 0f00 	teq	r1, #0
   d6050:	bf04      	itt	eq
   d6052:	4601      	moveq	r1, r0
   d6054:	2000      	moveq	r0, #0
   d6056:	fab1 f381 	clz	r3, r1
   d605a:	bf08      	it	eq
   d605c:	3320      	addeq	r3, #32
   d605e:	f1a3 030b 	sub.w	r3, r3, #11
   d6062:	f1b3 0220 	subs.w	r2, r3, #32
   d6066:	da0c      	bge.n	d6082 <__adddf3+0x16e>
   d6068:	320c      	adds	r2, #12
   d606a:	dd08      	ble.n	d607e <__adddf3+0x16a>
   d606c:	f102 0c14 	add.w	ip, r2, #20
   d6070:	f1c2 020c 	rsb	r2, r2, #12
   d6074:	fa01 f00c 	lsl.w	r0, r1, ip
   d6078:	fa21 f102 	lsr.w	r1, r1, r2
   d607c:	e00c      	b.n	d6098 <__adddf3+0x184>
   d607e:	f102 0214 	add.w	r2, r2, #20
   d6082:	bfd8      	it	le
   d6084:	f1c2 0c20 	rsble	ip, r2, #32
   d6088:	fa01 f102 	lsl.w	r1, r1, r2
   d608c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6090:	bfdc      	itt	le
   d6092:	ea41 010c 	orrle.w	r1, r1, ip
   d6096:	4090      	lslle	r0, r2
   d6098:	1ae4      	subs	r4, r4, r3
   d609a:	bfa2      	ittt	ge
   d609c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d60a0:	4329      	orrge	r1, r5
   d60a2:	bd30      	popge	{r4, r5, pc}
   d60a4:	ea6f 0404 	mvn.w	r4, r4
   d60a8:	3c1f      	subs	r4, #31
   d60aa:	da1c      	bge.n	d60e6 <__adddf3+0x1d2>
   d60ac:	340c      	adds	r4, #12
   d60ae:	dc0e      	bgt.n	d60ce <__adddf3+0x1ba>
   d60b0:	f104 0414 	add.w	r4, r4, #20
   d60b4:	f1c4 0220 	rsb	r2, r4, #32
   d60b8:	fa20 f004 	lsr.w	r0, r0, r4
   d60bc:	fa01 f302 	lsl.w	r3, r1, r2
   d60c0:	ea40 0003 	orr.w	r0, r0, r3
   d60c4:	fa21 f304 	lsr.w	r3, r1, r4
   d60c8:	ea45 0103 	orr.w	r1, r5, r3
   d60cc:	bd30      	pop	{r4, r5, pc}
   d60ce:	f1c4 040c 	rsb	r4, r4, #12
   d60d2:	f1c4 0220 	rsb	r2, r4, #32
   d60d6:	fa20 f002 	lsr.w	r0, r0, r2
   d60da:	fa01 f304 	lsl.w	r3, r1, r4
   d60de:	ea40 0003 	orr.w	r0, r0, r3
   d60e2:	4629      	mov	r1, r5
   d60e4:	bd30      	pop	{r4, r5, pc}
   d60e6:	fa21 f004 	lsr.w	r0, r1, r4
   d60ea:	4629      	mov	r1, r5
   d60ec:	bd30      	pop	{r4, r5, pc}
   d60ee:	f094 0f00 	teq	r4, #0
   d60f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d60f6:	bf06      	itte	eq
   d60f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d60fc:	3401      	addeq	r4, #1
   d60fe:	3d01      	subne	r5, #1
   d6100:	e74e      	b.n	d5fa0 <__adddf3+0x8c>
   d6102:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6106:	bf18      	it	ne
   d6108:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d610c:	d029      	beq.n	d6162 <__adddf3+0x24e>
   d610e:	ea94 0f05 	teq	r4, r5
   d6112:	bf08      	it	eq
   d6114:	ea90 0f02 	teqeq	r0, r2
   d6118:	d005      	beq.n	d6126 <__adddf3+0x212>
   d611a:	ea54 0c00 	orrs.w	ip, r4, r0
   d611e:	bf04      	itt	eq
   d6120:	4619      	moveq	r1, r3
   d6122:	4610      	moveq	r0, r2
   d6124:	bd30      	pop	{r4, r5, pc}
   d6126:	ea91 0f03 	teq	r1, r3
   d612a:	bf1e      	ittt	ne
   d612c:	2100      	movne	r1, #0
   d612e:	2000      	movne	r0, #0
   d6130:	bd30      	popne	{r4, r5, pc}
   d6132:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6136:	d105      	bne.n	d6144 <__adddf3+0x230>
   d6138:	0040      	lsls	r0, r0, #1
   d613a:	4149      	adcs	r1, r1
   d613c:	bf28      	it	cs
   d613e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6142:	bd30      	pop	{r4, r5, pc}
   d6144:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6148:	bf3c      	itt	cc
   d614a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d614e:	bd30      	popcc	{r4, r5, pc}
   d6150:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6154:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6158:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d615c:	f04f 0000 	mov.w	r0, #0
   d6160:	bd30      	pop	{r4, r5, pc}
   d6162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6166:	bf1a      	itte	ne
   d6168:	4619      	movne	r1, r3
   d616a:	4610      	movne	r0, r2
   d616c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6170:	bf1c      	itt	ne
   d6172:	460b      	movne	r3, r1
   d6174:	4602      	movne	r2, r0
   d6176:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d617a:	bf06      	itte	eq
   d617c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6180:	ea91 0f03 	teqeq	r1, r3
   d6184:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6188:	bd30      	pop	{r4, r5, pc}
   d618a:	bf00      	nop

000d618c <__aeabi_ui2d>:
   d618c:	f090 0f00 	teq	r0, #0
   d6190:	bf04      	itt	eq
   d6192:	2100      	moveq	r1, #0
   d6194:	4770      	bxeq	lr
   d6196:	b530      	push	{r4, r5, lr}
   d6198:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d619c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61a0:	f04f 0500 	mov.w	r5, #0
   d61a4:	f04f 0100 	mov.w	r1, #0
   d61a8:	e750      	b.n	d604c <__adddf3+0x138>
   d61aa:	bf00      	nop

000d61ac <__aeabi_i2d>:
   d61ac:	f090 0f00 	teq	r0, #0
   d61b0:	bf04      	itt	eq
   d61b2:	2100      	moveq	r1, #0
   d61b4:	4770      	bxeq	lr
   d61b6:	b530      	push	{r4, r5, lr}
   d61b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d61c4:	bf48      	it	mi
   d61c6:	4240      	negmi	r0, r0
   d61c8:	f04f 0100 	mov.w	r1, #0
   d61cc:	e73e      	b.n	d604c <__adddf3+0x138>
   d61ce:	bf00      	nop

000d61d0 <__aeabi_f2d>:
   d61d0:	0042      	lsls	r2, r0, #1
   d61d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d61d6:	ea4f 0131 	mov.w	r1, r1, rrx
   d61da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d61de:	bf1f      	itttt	ne
   d61e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d61e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d61e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d61ec:	4770      	bxne	lr
   d61ee:	f092 0f00 	teq	r2, #0
   d61f2:	bf14      	ite	ne
   d61f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d61f8:	4770      	bxeq	lr
   d61fa:	b530      	push	{r4, r5, lr}
   d61fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6200:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6204:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6208:	e720      	b.n	d604c <__adddf3+0x138>
   d620a:	bf00      	nop

000d620c <__aeabi_ul2d>:
   d620c:	ea50 0201 	orrs.w	r2, r0, r1
   d6210:	bf08      	it	eq
   d6212:	4770      	bxeq	lr
   d6214:	b530      	push	{r4, r5, lr}
   d6216:	f04f 0500 	mov.w	r5, #0
   d621a:	e00a      	b.n	d6232 <__aeabi_l2d+0x16>

000d621c <__aeabi_l2d>:
   d621c:	ea50 0201 	orrs.w	r2, r0, r1
   d6220:	bf08      	it	eq
   d6222:	4770      	bxeq	lr
   d6224:	b530      	push	{r4, r5, lr}
   d6226:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d622a:	d502      	bpl.n	d6232 <__aeabi_l2d+0x16>
   d622c:	4240      	negs	r0, r0
   d622e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6232:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6236:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d623a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d623e:	f43f aedc 	beq.w	d5ffa <__adddf3+0xe6>
   d6242:	f04f 0203 	mov.w	r2, #3
   d6246:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d624a:	bf18      	it	ne
   d624c:	3203      	addne	r2, #3
   d624e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6252:	bf18      	it	ne
   d6254:	3203      	addne	r2, #3
   d6256:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d625a:	f1c2 0320 	rsb	r3, r2, #32
   d625e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6262:	fa20 f002 	lsr.w	r0, r0, r2
   d6266:	fa01 fe03 	lsl.w	lr, r1, r3
   d626a:	ea40 000e 	orr.w	r0, r0, lr
   d626e:	fa21 f102 	lsr.w	r1, r1, r2
   d6272:	4414      	add	r4, r2
   d6274:	e6c1      	b.n	d5ffa <__adddf3+0xe6>
   d6276:	bf00      	nop

000d6278 <__aeabi_dmul>:
   d6278:	b570      	push	{r4, r5, r6, lr}
   d627a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d627e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6282:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6286:	bf1d      	ittte	ne
   d6288:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d628c:	ea94 0f0c 	teqne	r4, ip
   d6290:	ea95 0f0c 	teqne	r5, ip
   d6294:	f000 f8de 	bleq	d6454 <__aeabi_dmul+0x1dc>
   d6298:	442c      	add	r4, r5
   d629a:	ea81 0603 	eor.w	r6, r1, r3
   d629e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d62a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d62a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d62aa:	bf18      	it	ne
   d62ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d62b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d62b8:	d038      	beq.n	d632c <__aeabi_dmul+0xb4>
   d62ba:	fba0 ce02 	umull	ip, lr, r0, r2
   d62be:	f04f 0500 	mov.w	r5, #0
   d62c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d62c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d62ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d62ce:	f04f 0600 	mov.w	r6, #0
   d62d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d62d6:	f09c 0f00 	teq	ip, #0
   d62da:	bf18      	it	ne
   d62dc:	f04e 0e01 	orrne.w	lr, lr, #1
   d62e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d62e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d62e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d62ec:	d204      	bcs.n	d62f8 <__aeabi_dmul+0x80>
   d62ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d62f2:	416d      	adcs	r5, r5
   d62f4:	eb46 0606 	adc.w	r6, r6, r6
   d62f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d62fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6300:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6304:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6308:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d630c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6310:	bf88      	it	hi
   d6312:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6316:	d81e      	bhi.n	d6356 <__aeabi_dmul+0xde>
   d6318:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d631c:	bf08      	it	eq
   d631e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6322:	f150 0000 	adcs.w	r0, r0, #0
   d6326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d632a:	bd70      	pop	{r4, r5, r6, pc}
   d632c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6330:	ea46 0101 	orr.w	r1, r6, r1
   d6334:	ea40 0002 	orr.w	r0, r0, r2
   d6338:	ea81 0103 	eor.w	r1, r1, r3
   d633c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6340:	bfc2      	ittt	gt
   d6342:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6346:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d634a:	bd70      	popgt	{r4, r5, r6, pc}
   d634c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6350:	f04f 0e00 	mov.w	lr, #0
   d6354:	3c01      	subs	r4, #1
   d6356:	f300 80ab 	bgt.w	d64b0 <__aeabi_dmul+0x238>
   d635a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d635e:	bfde      	ittt	le
   d6360:	2000      	movle	r0, #0
   d6362:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6366:	bd70      	pople	{r4, r5, r6, pc}
   d6368:	f1c4 0400 	rsb	r4, r4, #0
   d636c:	3c20      	subs	r4, #32
   d636e:	da35      	bge.n	d63dc <__aeabi_dmul+0x164>
   d6370:	340c      	adds	r4, #12
   d6372:	dc1b      	bgt.n	d63ac <__aeabi_dmul+0x134>
   d6374:	f104 0414 	add.w	r4, r4, #20
   d6378:	f1c4 0520 	rsb	r5, r4, #32
   d637c:	fa00 f305 	lsl.w	r3, r0, r5
   d6380:	fa20 f004 	lsr.w	r0, r0, r4
   d6384:	fa01 f205 	lsl.w	r2, r1, r5
   d6388:	ea40 0002 	orr.w	r0, r0, r2
   d638c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6394:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6398:	fa21 f604 	lsr.w	r6, r1, r4
   d639c:	eb42 0106 	adc.w	r1, r2, r6
   d63a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63a4:	bf08      	it	eq
   d63a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63aa:	bd70      	pop	{r4, r5, r6, pc}
   d63ac:	f1c4 040c 	rsb	r4, r4, #12
   d63b0:	f1c4 0520 	rsb	r5, r4, #32
   d63b4:	fa00 f304 	lsl.w	r3, r0, r4
   d63b8:	fa20 f005 	lsr.w	r0, r0, r5
   d63bc:	fa01 f204 	lsl.w	r2, r1, r4
   d63c0:	ea40 0002 	orr.w	r0, r0, r2
   d63c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d63cc:	f141 0100 	adc.w	r1, r1, #0
   d63d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63d4:	bf08      	it	eq
   d63d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63da:	bd70      	pop	{r4, r5, r6, pc}
   d63dc:	f1c4 0520 	rsb	r5, r4, #32
   d63e0:	fa00 f205 	lsl.w	r2, r0, r5
   d63e4:	ea4e 0e02 	orr.w	lr, lr, r2
   d63e8:	fa20 f304 	lsr.w	r3, r0, r4
   d63ec:	fa01 f205 	lsl.w	r2, r1, r5
   d63f0:	ea43 0302 	orr.w	r3, r3, r2
   d63f4:	fa21 f004 	lsr.w	r0, r1, r4
   d63f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63fc:	fa21 f204 	lsr.w	r2, r1, r4
   d6400:	ea20 0002 	bic.w	r0, r0, r2
   d6404:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d640c:	bf08      	it	eq
   d640e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6412:	bd70      	pop	{r4, r5, r6, pc}
   d6414:	f094 0f00 	teq	r4, #0
   d6418:	d10f      	bne.n	d643a <__aeabi_dmul+0x1c2>
   d641a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d641e:	0040      	lsls	r0, r0, #1
   d6420:	eb41 0101 	adc.w	r1, r1, r1
   d6424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6428:	bf08      	it	eq
   d642a:	3c01      	subeq	r4, #1
   d642c:	d0f7      	beq.n	d641e <__aeabi_dmul+0x1a6>
   d642e:	ea41 0106 	orr.w	r1, r1, r6
   d6432:	f095 0f00 	teq	r5, #0
   d6436:	bf18      	it	ne
   d6438:	4770      	bxne	lr
   d643a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d643e:	0052      	lsls	r2, r2, #1
   d6440:	eb43 0303 	adc.w	r3, r3, r3
   d6444:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6448:	bf08      	it	eq
   d644a:	3d01      	subeq	r5, #1
   d644c:	d0f7      	beq.n	d643e <__aeabi_dmul+0x1c6>
   d644e:	ea43 0306 	orr.w	r3, r3, r6
   d6452:	4770      	bx	lr
   d6454:	ea94 0f0c 	teq	r4, ip
   d6458:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d645c:	bf18      	it	ne
   d645e:	ea95 0f0c 	teqne	r5, ip
   d6462:	d00c      	beq.n	d647e <__aeabi_dmul+0x206>
   d6464:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6468:	bf18      	it	ne
   d646a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d646e:	d1d1      	bne.n	d6414 <__aeabi_dmul+0x19c>
   d6470:	ea81 0103 	eor.w	r1, r1, r3
   d6474:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6478:	f04f 0000 	mov.w	r0, #0
   d647c:	bd70      	pop	{r4, r5, r6, pc}
   d647e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6482:	bf06      	itte	eq
   d6484:	4610      	moveq	r0, r2
   d6486:	4619      	moveq	r1, r3
   d6488:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d648c:	d019      	beq.n	d64c2 <__aeabi_dmul+0x24a>
   d648e:	ea94 0f0c 	teq	r4, ip
   d6492:	d102      	bne.n	d649a <__aeabi_dmul+0x222>
   d6494:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6498:	d113      	bne.n	d64c2 <__aeabi_dmul+0x24a>
   d649a:	ea95 0f0c 	teq	r5, ip
   d649e:	d105      	bne.n	d64ac <__aeabi_dmul+0x234>
   d64a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d64a4:	bf1c      	itt	ne
   d64a6:	4610      	movne	r0, r2
   d64a8:	4619      	movne	r1, r3
   d64aa:	d10a      	bne.n	d64c2 <__aeabi_dmul+0x24a>
   d64ac:	ea81 0103 	eor.w	r1, r1, r3
   d64b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d64b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d64bc:	f04f 0000 	mov.w	r0, #0
   d64c0:	bd70      	pop	{r4, r5, r6, pc}
   d64c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d64c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d64ca:	bd70      	pop	{r4, r5, r6, pc}

000d64cc <__aeabi_ddiv>:
   d64cc:	b570      	push	{r4, r5, r6, lr}
   d64ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d64d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d64d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d64da:	bf1d      	ittte	ne
   d64dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d64e0:	ea94 0f0c 	teqne	r4, ip
   d64e4:	ea95 0f0c 	teqne	r5, ip
   d64e8:	f000 f8a7 	bleq	d663a <__aeabi_ddiv+0x16e>
   d64ec:	eba4 0405 	sub.w	r4, r4, r5
   d64f0:	ea81 0e03 	eor.w	lr, r1, r3
   d64f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d64f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d64fc:	f000 8088 	beq.w	d6610 <__aeabi_ddiv+0x144>
   d6500:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6504:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6508:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d650c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6510:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6514:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6518:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d651c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6520:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6524:	429d      	cmp	r5, r3
   d6526:	bf08      	it	eq
   d6528:	4296      	cmpeq	r6, r2
   d652a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d652e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6532:	d202      	bcs.n	d653a <__aeabi_ddiv+0x6e>
   d6534:	085b      	lsrs	r3, r3, #1
   d6536:	ea4f 0232 	mov.w	r2, r2, rrx
   d653a:	1ab6      	subs	r6, r6, r2
   d653c:	eb65 0503 	sbc.w	r5, r5, r3
   d6540:	085b      	lsrs	r3, r3, #1
   d6542:	ea4f 0232 	mov.w	r2, r2, rrx
   d6546:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d654a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d654e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6552:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6556:	bf22      	ittt	cs
   d6558:	1ab6      	subcs	r6, r6, r2
   d655a:	4675      	movcs	r5, lr
   d655c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6560:	085b      	lsrs	r3, r3, #1
   d6562:	ea4f 0232 	mov.w	r2, r2, rrx
   d6566:	ebb6 0e02 	subs.w	lr, r6, r2
   d656a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d656e:	bf22      	ittt	cs
   d6570:	1ab6      	subcs	r6, r6, r2
   d6572:	4675      	movcs	r5, lr
   d6574:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6578:	085b      	lsrs	r3, r3, #1
   d657a:	ea4f 0232 	mov.w	r2, r2, rrx
   d657e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6582:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6586:	bf22      	ittt	cs
   d6588:	1ab6      	subcs	r6, r6, r2
   d658a:	4675      	movcs	r5, lr
   d658c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6590:	085b      	lsrs	r3, r3, #1
   d6592:	ea4f 0232 	mov.w	r2, r2, rrx
   d6596:	ebb6 0e02 	subs.w	lr, r6, r2
   d659a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d659e:	bf22      	ittt	cs
   d65a0:	1ab6      	subcs	r6, r6, r2
   d65a2:	4675      	movcs	r5, lr
   d65a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d65a8:	ea55 0e06 	orrs.w	lr, r5, r6
   d65ac:	d018      	beq.n	d65e0 <__aeabi_ddiv+0x114>
   d65ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d65b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d65b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d65ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d65be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d65c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d65c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d65ca:	d1c0      	bne.n	d654e <__aeabi_ddiv+0x82>
   d65cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65d0:	d10b      	bne.n	d65ea <__aeabi_ddiv+0x11e>
   d65d2:	ea41 0100 	orr.w	r1, r1, r0
   d65d6:	f04f 0000 	mov.w	r0, #0
   d65da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d65de:	e7b6      	b.n	d654e <__aeabi_ddiv+0x82>
   d65e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65e4:	bf04      	itt	eq
   d65e6:	4301      	orreq	r1, r0
   d65e8:	2000      	moveq	r0, #0
   d65ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d65ee:	bf88      	it	hi
   d65f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d65f4:	f63f aeaf 	bhi.w	d6356 <__aeabi_dmul+0xde>
   d65f8:	ebb5 0c03 	subs.w	ip, r5, r3
   d65fc:	bf04      	itt	eq
   d65fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6606:	f150 0000 	adcs.w	r0, r0, #0
   d660a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d660e:	bd70      	pop	{r4, r5, r6, pc}
   d6610:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6614:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6618:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d661c:	bfc2      	ittt	gt
   d661e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6626:	bd70      	popgt	{r4, r5, r6, pc}
   d6628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d662c:	f04f 0e00 	mov.w	lr, #0
   d6630:	3c01      	subs	r4, #1
   d6632:	e690      	b.n	d6356 <__aeabi_dmul+0xde>
   d6634:	ea45 0e06 	orr.w	lr, r5, r6
   d6638:	e68d      	b.n	d6356 <__aeabi_dmul+0xde>
   d663a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d663e:	ea94 0f0c 	teq	r4, ip
   d6642:	bf08      	it	eq
   d6644:	ea95 0f0c 	teqeq	r5, ip
   d6648:	f43f af3b 	beq.w	d64c2 <__aeabi_dmul+0x24a>
   d664c:	ea94 0f0c 	teq	r4, ip
   d6650:	d10a      	bne.n	d6668 <__aeabi_ddiv+0x19c>
   d6652:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6656:	f47f af34 	bne.w	d64c2 <__aeabi_dmul+0x24a>
   d665a:	ea95 0f0c 	teq	r5, ip
   d665e:	f47f af25 	bne.w	d64ac <__aeabi_dmul+0x234>
   d6662:	4610      	mov	r0, r2
   d6664:	4619      	mov	r1, r3
   d6666:	e72c      	b.n	d64c2 <__aeabi_dmul+0x24a>
   d6668:	ea95 0f0c 	teq	r5, ip
   d666c:	d106      	bne.n	d667c <__aeabi_ddiv+0x1b0>
   d666e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6672:	f43f aefd 	beq.w	d6470 <__aeabi_dmul+0x1f8>
   d6676:	4610      	mov	r0, r2
   d6678:	4619      	mov	r1, r3
   d667a:	e722      	b.n	d64c2 <__aeabi_dmul+0x24a>
   d667c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6680:	bf18      	it	ne
   d6682:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6686:	f47f aec5 	bne.w	d6414 <__aeabi_dmul+0x19c>
   d668a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d668e:	f47f af0d 	bne.w	d64ac <__aeabi_dmul+0x234>
   d6692:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6696:	f47f aeeb 	bne.w	d6470 <__aeabi_dmul+0x1f8>
   d669a:	e712      	b.n	d64c2 <__aeabi_dmul+0x24a>

000d669c <__aeabi_d2f>:
   d669c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d66a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d66a4:	bf24      	itt	cs
   d66a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d66aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d66ae:	d90d      	bls.n	d66cc <__aeabi_d2f+0x30>
   d66b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d66b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d66b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d66bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d66c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d66c4:	bf08      	it	eq
   d66c6:	f020 0001 	biceq.w	r0, r0, #1
   d66ca:	4770      	bx	lr
   d66cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d66d0:	d121      	bne.n	d6716 <__aeabi_d2f+0x7a>
   d66d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d66d6:	bfbc      	itt	lt
   d66d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d66dc:	4770      	bxlt	lr
   d66de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d66e6:	f1c2 0218 	rsb	r2, r2, #24
   d66ea:	f1c2 0c20 	rsb	ip, r2, #32
   d66ee:	fa10 f30c 	lsls.w	r3, r0, ip
   d66f2:	fa20 f002 	lsr.w	r0, r0, r2
   d66f6:	bf18      	it	ne
   d66f8:	f040 0001 	orrne.w	r0, r0, #1
   d66fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6700:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6704:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6708:	ea40 000c 	orr.w	r0, r0, ip
   d670c:	fa23 f302 	lsr.w	r3, r3, r2
   d6710:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6714:	e7cc      	b.n	d66b0 <__aeabi_d2f+0x14>
   d6716:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d671a:	d107      	bne.n	d672c <__aeabi_d2f+0x90>
   d671c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6720:	bf1e      	ittt	ne
   d6722:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6726:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d672a:	4770      	bxne	lr
   d672c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6738:	4770      	bx	lr
   d673a:	bf00      	nop

000d673c <__cxa_atexit>:
   d673c:	b510      	push	{r4, lr}
   d673e:	4c05      	ldr	r4, [pc, #20]	; (d6754 <__cxa_atexit+0x18>)
   d6740:	4613      	mov	r3, r2
   d6742:	b12c      	cbz	r4, d6750 <__cxa_atexit+0x14>
   d6744:	460a      	mov	r2, r1
   d6746:	4601      	mov	r1, r0
   d6748:	2002      	movs	r0, #2
   d674a:	f3af 8000 	nop.w
   d674e:	bd10      	pop	{r4, pc}
   d6750:	4620      	mov	r0, r4
   d6752:	bd10      	pop	{r4, pc}
   d6754:	00000000 	.word	0x00000000

000d6758 <localtime>:
   d6758:	b538      	push	{r3, r4, r5, lr}
   d675a:	4b07      	ldr	r3, [pc, #28]	; (d6778 <localtime+0x20>)
   d675c:	681c      	ldr	r4, [r3, #0]
   d675e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6760:	4605      	mov	r5, r0
   d6762:	b91b      	cbnz	r3, d676c <localtime+0x14>
   d6764:	2024      	movs	r0, #36	; 0x24
   d6766:	f7fe f8ff 	bl	d4968 <malloc>
   d676a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d676c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d676e:	4628      	mov	r0, r5
   d6770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6774:	f000 b802 	b.w	d677c <localtime_r>
   d6778:	2003e30c 	.word	0x2003e30c

000d677c <localtime_r>:
   d677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6780:	460c      	mov	r4, r1
   d6782:	4680      	mov	r8, r0
   d6784:	f000 fc62 	bl	d704c <__gettzinfo>
   d6788:	4621      	mov	r1, r4
   d678a:	4607      	mov	r7, r0
   d678c:	4640      	mov	r0, r8
   d678e:	f000 fc61 	bl	d7054 <gmtime_r>
   d6792:	6946      	ldr	r6, [r0, #20]
   d6794:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6798:	07b3      	lsls	r3, r6, #30
   d679a:	4604      	mov	r4, r0
   d679c:	d105      	bne.n	d67aa <localtime_r+0x2e>
   d679e:	2264      	movs	r2, #100	; 0x64
   d67a0:	fb96 f3f2 	sdiv	r3, r6, r2
   d67a4:	fb02 6313 	mls	r3, r2, r3, r6
   d67a8:	b94b      	cbnz	r3, d67be <localtime_r+0x42>
   d67aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d67ae:	fb96 f3f5 	sdiv	r3, r6, r5
   d67b2:	fb05 6513 	mls	r5, r5, r3, r6
   d67b6:	fab5 f385 	clz	r3, r5
   d67ba:	095b      	lsrs	r3, r3, #5
   d67bc:	e000      	b.n	d67c0 <localtime_r+0x44>
   d67be:	2301      	movs	r3, #1
   d67c0:	4a5f      	ldr	r2, [pc, #380]	; (d6940 <localtime_r+0x1c4>)
   d67c2:	2530      	movs	r5, #48	; 0x30
   d67c4:	fb05 2503 	mla	r5, r5, r3, r2
   d67c8:	f000 fa74 	bl	d6cb4 <__tz_lock>
   d67cc:	f000 fa74 	bl	d6cb8 <_tzset_unlocked>
   d67d0:	4b5c      	ldr	r3, [pc, #368]	; (d6944 <localtime_r+0x1c8>)
   d67d2:	681b      	ldr	r3, [r3, #0]
   d67d4:	b1f3      	cbz	r3, d6814 <localtime_r+0x98>
   d67d6:	687b      	ldr	r3, [r7, #4]
   d67d8:	429e      	cmp	r6, r3
   d67da:	d105      	bne.n	d67e8 <localtime_r+0x6c>
   d67dc:	6839      	ldr	r1, [r7, #0]
   d67de:	f8d8 3000 	ldr.w	r3, [r8]
   d67e2:	69fa      	ldr	r2, [r7, #28]
   d67e4:	b941      	cbnz	r1, d67f8 <localtime_r+0x7c>
   d67e6:	e00a      	b.n	d67fe <localtime_r+0x82>
   d67e8:	4630      	mov	r0, r6
   d67ea:	f000 f9bb 	bl	d6b64 <__tzcalc_limits>
   d67ee:	2800      	cmp	r0, #0
   d67f0:	d1f4      	bne.n	d67dc <localtime_r+0x60>
   d67f2:	f04f 33ff 	mov.w	r3, #4294967295
   d67f6:	e00d      	b.n	d6814 <localtime_r+0x98>
   d67f8:	4293      	cmp	r3, r2
   d67fa:	db08      	blt.n	d680e <localtime_r+0x92>
   d67fc:	e001      	b.n	d6802 <localtime_r+0x86>
   d67fe:	4293      	cmp	r3, r2
   d6800:	da07      	bge.n	d6812 <localtime_r+0x96>
   d6802:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6804:	4293      	cmp	r3, r2
   d6806:	bfac      	ite	ge
   d6808:	2300      	movge	r3, #0
   d680a:	2301      	movlt	r3, #1
   d680c:	e002      	b.n	d6814 <localtime_r+0x98>
   d680e:	2300      	movs	r3, #0
   d6810:	e000      	b.n	d6814 <localtime_r+0x98>
   d6812:	2301      	movs	r3, #1
   d6814:	6223      	str	r3, [r4, #32]
   d6816:	6a23      	ldr	r3, [r4, #32]
   d6818:	2b01      	cmp	r3, #1
   d681a:	bf0c      	ite	eq
   d681c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d681e:	6a39      	ldrne	r1, [r7, #32]
   d6820:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6824:	203c      	movs	r0, #60	; 0x3c
   d6826:	fb91 f6f3 	sdiv	r6, r1, r3
   d682a:	fb03 1316 	mls	r3, r3, r6, r1
   d682e:	6861      	ldr	r1, [r4, #4]
   d6830:	fb93 f2f0 	sdiv	r2, r3, r0
   d6834:	fb00 3012 	mls	r0, r0, r2, r3
   d6838:	6823      	ldr	r3, [r4, #0]
   d683a:	1a89      	subs	r1, r1, r2
   d683c:	68a2      	ldr	r2, [r4, #8]
   d683e:	6061      	str	r1, [r4, #4]
   d6840:	1a1b      	subs	r3, r3, r0
   d6842:	1b92      	subs	r2, r2, r6
   d6844:	2b3b      	cmp	r3, #59	; 0x3b
   d6846:	6023      	str	r3, [r4, #0]
   d6848:	60a2      	str	r2, [r4, #8]
   d684a:	dd03      	ble.n	d6854 <localtime_r+0xd8>
   d684c:	3101      	adds	r1, #1
   d684e:	6061      	str	r1, [r4, #4]
   d6850:	3b3c      	subs	r3, #60	; 0x3c
   d6852:	e004      	b.n	d685e <localtime_r+0xe2>
   d6854:	2b00      	cmp	r3, #0
   d6856:	da03      	bge.n	d6860 <localtime_r+0xe4>
   d6858:	3901      	subs	r1, #1
   d685a:	6061      	str	r1, [r4, #4]
   d685c:	333c      	adds	r3, #60	; 0x3c
   d685e:	6023      	str	r3, [r4, #0]
   d6860:	6863      	ldr	r3, [r4, #4]
   d6862:	2b3b      	cmp	r3, #59	; 0x3b
   d6864:	dd03      	ble.n	d686e <localtime_r+0xf2>
   d6866:	3201      	adds	r2, #1
   d6868:	60a2      	str	r2, [r4, #8]
   d686a:	3b3c      	subs	r3, #60	; 0x3c
   d686c:	e004      	b.n	d6878 <localtime_r+0xfc>
   d686e:	2b00      	cmp	r3, #0
   d6870:	da03      	bge.n	d687a <localtime_r+0xfe>
   d6872:	3a01      	subs	r2, #1
   d6874:	60a2      	str	r2, [r4, #8]
   d6876:	333c      	adds	r3, #60	; 0x3c
   d6878:	6063      	str	r3, [r4, #4]
   d687a:	68a3      	ldr	r3, [r4, #8]
   d687c:	2b17      	cmp	r3, #23
   d687e:	dd22      	ble.n	d68c6 <localtime_r+0x14a>
   d6880:	69e2      	ldr	r2, [r4, #28]
   d6882:	3201      	adds	r2, #1
   d6884:	61e2      	str	r2, [r4, #28]
   d6886:	69a2      	ldr	r2, [r4, #24]
   d6888:	3201      	adds	r2, #1
   d688a:	2a06      	cmp	r2, #6
   d688c:	bfc8      	it	gt
   d688e:	2200      	movgt	r2, #0
   d6890:	61a2      	str	r2, [r4, #24]
   d6892:	68e2      	ldr	r2, [r4, #12]
   d6894:	3b18      	subs	r3, #24
   d6896:	3201      	adds	r2, #1
   d6898:	60a3      	str	r3, [r4, #8]
   d689a:	6923      	ldr	r3, [r4, #16]
   d689c:	60e2      	str	r2, [r4, #12]
   d689e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d68a2:	428a      	cmp	r2, r1
   d68a4:	dd46      	ble.n	d6934 <localtime_r+0x1b8>
   d68a6:	3301      	adds	r3, #1
   d68a8:	2b0c      	cmp	r3, #12
   d68aa:	bf0c      	ite	eq
   d68ac:	6963      	ldreq	r3, [r4, #20]
   d68ae:	6123      	strne	r3, [r4, #16]
   d68b0:	eba2 0201 	sub.w	r2, r2, r1
   d68b4:	60e2      	str	r2, [r4, #12]
   d68b6:	bf01      	itttt	eq
   d68b8:	3301      	addeq	r3, #1
   d68ba:	2200      	moveq	r2, #0
   d68bc:	6122      	streq	r2, [r4, #16]
   d68be:	6163      	streq	r3, [r4, #20]
   d68c0:	bf08      	it	eq
   d68c2:	61e2      	streq	r2, [r4, #28]
   d68c4:	e036      	b.n	d6934 <localtime_r+0x1b8>
   d68c6:	2b00      	cmp	r3, #0
   d68c8:	da34      	bge.n	d6934 <localtime_r+0x1b8>
   d68ca:	69e2      	ldr	r2, [r4, #28]
   d68cc:	3a01      	subs	r2, #1
   d68ce:	61e2      	str	r2, [r4, #28]
   d68d0:	69a2      	ldr	r2, [r4, #24]
   d68d2:	3a01      	subs	r2, #1
   d68d4:	bf48      	it	mi
   d68d6:	2206      	movmi	r2, #6
   d68d8:	61a2      	str	r2, [r4, #24]
   d68da:	68e2      	ldr	r2, [r4, #12]
   d68dc:	3318      	adds	r3, #24
   d68de:	3a01      	subs	r2, #1
   d68e0:	60e2      	str	r2, [r4, #12]
   d68e2:	60a3      	str	r3, [r4, #8]
   d68e4:	bb32      	cbnz	r2, d6934 <localtime_r+0x1b8>
   d68e6:	6923      	ldr	r3, [r4, #16]
   d68e8:	3b01      	subs	r3, #1
   d68ea:	d401      	bmi.n	d68f0 <localtime_r+0x174>
   d68ec:	6123      	str	r3, [r4, #16]
   d68ee:	e01d      	b.n	d692c <localtime_r+0x1b0>
   d68f0:	230b      	movs	r3, #11
   d68f2:	6123      	str	r3, [r4, #16]
   d68f4:	6963      	ldr	r3, [r4, #20]
   d68f6:	1e5a      	subs	r2, r3, #1
   d68f8:	f012 0f03 	tst.w	r2, #3
   d68fc:	6162      	str	r2, [r4, #20]
   d68fe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6902:	d105      	bne.n	d6910 <localtime_r+0x194>
   d6904:	2164      	movs	r1, #100	; 0x64
   d6906:	fb93 f2f1 	sdiv	r2, r3, r1
   d690a:	fb01 3212 	mls	r2, r1, r2, r3
   d690e:	b94a      	cbnz	r2, d6924 <localtime_r+0x1a8>
   d6910:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6914:	fb93 f2f1 	sdiv	r2, r3, r1
   d6918:	fb01 3312 	mls	r3, r1, r2, r3
   d691c:	fab3 f383 	clz	r3, r3
   d6920:	095b      	lsrs	r3, r3, #5
   d6922:	e000      	b.n	d6926 <localtime_r+0x1aa>
   d6924:	2301      	movs	r3, #1
   d6926:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d692a:	61e3      	str	r3, [r4, #28]
   d692c:	6923      	ldr	r3, [r4, #16]
   d692e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6932:	60e3      	str	r3, [r4, #12]
   d6934:	f000 f9bf 	bl	d6cb6 <__tz_unlock>
   d6938:	4620      	mov	r0, r4
   d693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d693e:	bf00      	nop
   d6940:	000d75ec 	.word	0x000d75ec
   d6944:	2003e7e4 	.word	0x2003e7e4

000d6948 <memcpy>:
   d6948:	b510      	push	{r4, lr}
   d694a:	1e43      	subs	r3, r0, #1
   d694c:	440a      	add	r2, r1
   d694e:	4291      	cmp	r1, r2
   d6950:	d004      	beq.n	d695c <memcpy+0x14>
   d6952:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6956:	f803 4f01 	strb.w	r4, [r3, #1]!
   d695a:	e7f8      	b.n	d694e <memcpy+0x6>
   d695c:	bd10      	pop	{r4, pc}

000d695e <memset>:
   d695e:	4402      	add	r2, r0
   d6960:	4603      	mov	r3, r0
   d6962:	4293      	cmp	r3, r2
   d6964:	d002      	beq.n	d696c <memset+0xe>
   d6966:	f803 1b01 	strb.w	r1, [r3], #1
   d696a:	e7fa      	b.n	d6962 <memset+0x4>
   d696c:	4770      	bx	lr
	...

000d6970 <srand>:
   d6970:	b538      	push	{r3, r4, r5, lr}
   d6972:	4b12      	ldr	r3, [pc, #72]	; (d69bc <srand+0x4c>)
   d6974:	681c      	ldr	r4, [r3, #0]
   d6976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6978:	4605      	mov	r5, r0
   d697a:	b9d3      	cbnz	r3, d69b2 <srand+0x42>
   d697c:	2018      	movs	r0, #24
   d697e:	f7fd fff3 	bl	d4968 <malloc>
   d6982:	f243 330e 	movw	r3, #13070	; 0x330e
   d6986:	63a0      	str	r0, [r4, #56]	; 0x38
   d6988:	8003      	strh	r3, [r0, #0]
   d698a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d698e:	8043      	strh	r3, [r0, #2]
   d6990:	f241 2334 	movw	r3, #4660	; 0x1234
   d6994:	8083      	strh	r3, [r0, #4]
   d6996:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d699a:	80c3      	strh	r3, [r0, #6]
   d699c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d69a0:	8103      	strh	r3, [r0, #8]
   d69a2:	2305      	movs	r3, #5
   d69a4:	8143      	strh	r3, [r0, #10]
   d69a6:	230b      	movs	r3, #11
   d69a8:	8183      	strh	r3, [r0, #12]
   d69aa:	2201      	movs	r2, #1
   d69ac:	2300      	movs	r3, #0
   d69ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69b4:	2200      	movs	r2, #0
   d69b6:	611d      	str	r5, [r3, #16]
   d69b8:	615a      	str	r2, [r3, #20]
   d69ba:	bd38      	pop	{r3, r4, r5, pc}
   d69bc:	2003e30c 	.word	0x2003e30c

000d69c0 <strcmp>:
   d69c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d69c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d69c8:	2a01      	cmp	r2, #1
   d69ca:	bf28      	it	cs
   d69cc:	429a      	cmpcs	r2, r3
   d69ce:	d0f7      	beq.n	d69c0 <strcmp>
   d69d0:	1ad0      	subs	r0, r2, r3
   d69d2:	4770      	bx	lr

000d69d4 <strcpy>:
   d69d4:	4603      	mov	r3, r0
   d69d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d69da:	f803 2b01 	strb.w	r2, [r3], #1
   d69de:	2a00      	cmp	r2, #0
   d69e0:	d1f9      	bne.n	d69d6 <strcpy+0x2>
   d69e2:	4770      	bx	lr

000d69e4 <strdup>:
   d69e4:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <strdup+0xc>)
   d69e6:	4601      	mov	r1, r0
   d69e8:	6818      	ldr	r0, [r3, #0]
   d69ea:	f000 b803 	b.w	d69f4 <_strdup_r>
   d69ee:	bf00      	nop
   d69f0:	2003e30c 	.word	0x2003e30c

000d69f4 <_strdup_r>:
   d69f4:	b570      	push	{r4, r5, r6, lr}
   d69f6:	4606      	mov	r6, r0
   d69f8:	4608      	mov	r0, r1
   d69fa:	460c      	mov	r4, r1
   d69fc:	f000 f80d 	bl	d6a1a <strlen>
   d6a00:	1c45      	adds	r5, r0, #1
   d6a02:	4629      	mov	r1, r5
   d6a04:	4630      	mov	r0, r6
   d6a06:	f7fd ffd7 	bl	d49b8 <_malloc_r>
   d6a0a:	4606      	mov	r6, r0
   d6a0c:	b118      	cbz	r0, d6a16 <_strdup_r+0x22>
   d6a0e:	462a      	mov	r2, r5
   d6a10:	4621      	mov	r1, r4
   d6a12:	f7ff ff99 	bl	d6948 <memcpy>
   d6a16:	4630      	mov	r0, r6
   d6a18:	bd70      	pop	{r4, r5, r6, pc}

000d6a1a <strlen>:
   d6a1a:	4603      	mov	r3, r0
   d6a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a20:	2a00      	cmp	r2, #0
   d6a22:	d1fb      	bne.n	d6a1c <strlen+0x2>
   d6a24:	1a18      	subs	r0, r3, r0
   d6a26:	3801      	subs	r0, #1
   d6a28:	4770      	bx	lr

000d6a2a <strncmp>:
   d6a2a:	b530      	push	{r4, r5, lr}
   d6a2c:	b182      	cbz	r2, d6a50 <strncmp+0x26>
   d6a2e:	1e45      	subs	r5, r0, #1
   d6a30:	3901      	subs	r1, #1
   d6a32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6a36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6a3a:	42a3      	cmp	r3, r4
   d6a3c:	d106      	bne.n	d6a4c <strncmp+0x22>
   d6a3e:	43ec      	mvns	r4, r5
   d6a40:	4414      	add	r4, r2
   d6a42:	42e0      	cmn	r0, r4
   d6a44:	d001      	beq.n	d6a4a <strncmp+0x20>
   d6a46:	2b00      	cmp	r3, #0
   d6a48:	d1f3      	bne.n	d6a32 <strncmp+0x8>
   d6a4a:	461c      	mov	r4, r3
   d6a4c:	1b18      	subs	r0, r3, r4
   d6a4e:	bd30      	pop	{r4, r5, pc}
   d6a50:	4610      	mov	r0, r2
   d6a52:	bd30      	pop	{r4, r5, pc}

000d6a54 <_strtoul_r>:
   d6a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a58:	4680      	mov	r8, r0
   d6a5a:	483c      	ldr	r0, [pc, #240]	; (d6b4c <_strtoul_r+0xf8>)
   d6a5c:	f8d0 9000 	ldr.w	r9, [r0]
   d6a60:	460e      	mov	r6, r1
   d6a62:	4635      	mov	r5, r6
   d6a64:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6a68:	eb09 0004 	add.w	r0, r9, r4
   d6a6c:	7840      	ldrb	r0, [r0, #1]
   d6a6e:	f000 0008 	and.w	r0, r0, #8
   d6a72:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6a76:	b108      	cbz	r0, d6a7c <_strtoul_r+0x28>
   d6a78:	462e      	mov	r6, r5
   d6a7a:	e7f2      	b.n	d6a62 <_strtoul_r+0xe>
   d6a7c:	2c2d      	cmp	r4, #45	; 0x2d
   d6a7e:	d103      	bne.n	d6a88 <_strtoul_r+0x34>
   d6a80:	1cb5      	adds	r5, r6, #2
   d6a82:	7874      	ldrb	r4, [r6, #1]
   d6a84:	2701      	movs	r7, #1
   d6a86:	e003      	b.n	d6a90 <_strtoul_r+0x3c>
   d6a88:	2c2b      	cmp	r4, #43	; 0x2b
   d6a8a:	bf04      	itt	eq
   d6a8c:	7874      	ldrbeq	r4, [r6, #1]
   d6a8e:	1cb5      	addeq	r5, r6, #2
   d6a90:	b113      	cbz	r3, d6a98 <_strtoul_r+0x44>
   d6a92:	2b10      	cmp	r3, #16
   d6a94:	d10a      	bne.n	d6aac <_strtoul_r+0x58>
   d6a96:	e053      	b.n	d6b40 <_strtoul_r+0xec>
   d6a98:	2c30      	cmp	r4, #48	; 0x30
   d6a9a:	d14f      	bne.n	d6b3c <_strtoul_r+0xe8>
   d6a9c:	7828      	ldrb	r0, [r5, #0]
   d6a9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6aa2:	2858      	cmp	r0, #88	; 0x58
   d6aa4:	d145      	bne.n	d6b32 <_strtoul_r+0xde>
   d6aa6:	786c      	ldrb	r4, [r5, #1]
   d6aa8:	2310      	movs	r3, #16
   d6aaa:	3502      	adds	r5, #2
   d6aac:	f04f 3cff 	mov.w	ip, #4294967295
   d6ab0:	2600      	movs	r6, #0
   d6ab2:	fbbc fcf3 	udiv	ip, ip, r3
   d6ab6:	fb03 fa0c 	mul.w	sl, r3, ip
   d6aba:	ea6f 0a0a 	mvn.w	sl, sl
   d6abe:	4630      	mov	r0, r6
   d6ac0:	eb09 0e04 	add.w	lr, r9, r4
   d6ac4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6ac8:	f01e 0f04 	tst.w	lr, #4
   d6acc:	d001      	beq.n	d6ad2 <_strtoul_r+0x7e>
   d6ace:	3c30      	subs	r4, #48	; 0x30
   d6ad0:	e00b      	b.n	d6aea <_strtoul_r+0x96>
   d6ad2:	f01e 0e03 	ands.w	lr, lr, #3
   d6ad6:	d01a      	beq.n	d6b0e <_strtoul_r+0xba>
   d6ad8:	f1be 0f01 	cmp.w	lr, #1
   d6adc:	bf0c      	ite	eq
   d6ade:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6ae2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6ae6:	ebce 0404 	rsb	r4, lr, r4
   d6aea:	42a3      	cmp	r3, r4
   d6aec:	dd0f      	ble.n	d6b0e <_strtoul_r+0xba>
   d6aee:	2e00      	cmp	r6, #0
   d6af0:	db08      	blt.n	d6b04 <_strtoul_r+0xb0>
   d6af2:	4560      	cmp	r0, ip
   d6af4:	d806      	bhi.n	d6b04 <_strtoul_r+0xb0>
   d6af6:	d101      	bne.n	d6afc <_strtoul_r+0xa8>
   d6af8:	4554      	cmp	r4, sl
   d6afa:	dc03      	bgt.n	d6b04 <_strtoul_r+0xb0>
   d6afc:	fb03 4000 	mla	r0, r3, r0, r4
   d6b00:	2601      	movs	r6, #1
   d6b02:	e001      	b.n	d6b08 <_strtoul_r+0xb4>
   d6b04:	f04f 36ff 	mov.w	r6, #4294967295
   d6b08:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6b0c:	e7d8      	b.n	d6ac0 <_strtoul_r+0x6c>
   d6b0e:	2e00      	cmp	r6, #0
   d6b10:	da07      	bge.n	d6b22 <_strtoul_r+0xce>
   d6b12:	2322      	movs	r3, #34	; 0x22
   d6b14:	f8c8 3000 	str.w	r3, [r8]
   d6b18:	f04f 30ff 	mov.w	r0, #4294967295
   d6b1c:	b92a      	cbnz	r2, d6b2a <_strtoul_r+0xd6>
   d6b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b22:	b107      	cbz	r7, d6b26 <_strtoul_r+0xd2>
   d6b24:	4240      	negs	r0, r0
   d6b26:	b172      	cbz	r2, d6b46 <_strtoul_r+0xf2>
   d6b28:	b106      	cbz	r6, d6b2c <_strtoul_r+0xd8>
   d6b2a:	1e69      	subs	r1, r5, #1
   d6b2c:	6011      	str	r1, [r2, #0]
   d6b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b32:	2430      	movs	r4, #48	; 0x30
   d6b34:	2b00      	cmp	r3, #0
   d6b36:	d1b9      	bne.n	d6aac <_strtoul_r+0x58>
   d6b38:	2308      	movs	r3, #8
   d6b3a:	e7b7      	b.n	d6aac <_strtoul_r+0x58>
   d6b3c:	230a      	movs	r3, #10
   d6b3e:	e7b5      	b.n	d6aac <_strtoul_r+0x58>
   d6b40:	2c30      	cmp	r4, #48	; 0x30
   d6b42:	d0ab      	beq.n	d6a9c <_strtoul_r+0x48>
   d6b44:	e7b2      	b.n	d6aac <_strtoul_r+0x58>
   d6b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b4a:	bf00      	nop
   d6b4c:	2003e2a8 	.word	0x2003e2a8

000d6b50 <strtoul>:
   d6b50:	4613      	mov	r3, r2
   d6b52:	460a      	mov	r2, r1
   d6b54:	4601      	mov	r1, r0
   d6b56:	4802      	ldr	r0, [pc, #8]	; (d6b60 <strtoul+0x10>)
   d6b58:	6800      	ldr	r0, [r0, #0]
   d6b5a:	f7ff bf7b 	b.w	d6a54 <_strtoul_r>
   d6b5e:	bf00      	nop
   d6b60:	2003e30c 	.word	0x2003e30c

000d6b64 <__tzcalc_limits>:
   d6b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b68:	4604      	mov	r4, r0
   d6b6a:	f000 fa6f 	bl	d704c <__gettzinfo>
   d6b6e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6b72:	429c      	cmp	r4, r3
   d6b74:	f340 8096 	ble.w	d6ca4 <__tzcalc_limits+0x140>
   d6b78:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6b7c:	18e3      	adds	r3, r4, r3
   d6b7e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6b82:	109b      	asrs	r3, r3, #2
   d6b84:	f240 156d 	movw	r5, #365	; 0x16d
   d6b88:	fb05 3502 	mla	r5, r5, r2, r3
   d6b8c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6b90:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6b94:	fb92 f3f3 	sdiv	r3, r2, r3
   d6b98:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6b9c:	442b      	add	r3, r5
   d6b9e:	18a5      	adds	r5, r4, r2
   d6ba0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6ba4:	fb95 f5f2 	sdiv	r5, r5, r2
   d6ba8:	441d      	add	r5, r3
   d6baa:	2364      	movs	r3, #100	; 0x64
   d6bac:	fb94 f7f2 	sdiv	r7, r4, r2
   d6bb0:	fb94 f6f3 	sdiv	r6, r4, r3
   d6bb4:	fb02 4717 	mls	r7, r2, r7, r4
   d6bb8:	fb03 4616 	mls	r6, r3, r6, r4
   d6bbc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6bc0:	fab7 fe87 	clz	lr, r7
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	f004 0303 	and.w	r3, r4, #3
   d6bca:	6044      	str	r4, [r0, #4]
   d6bcc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6bd0:	4601      	mov	r1, r0
   d6bd2:	9300      	str	r3, [sp, #0]
   d6bd4:	f04f 0c07 	mov.w	ip, #7
   d6bd8:	7a0b      	ldrb	r3, [r1, #8]
   d6bda:	2b4a      	cmp	r3, #74	; 0x4a
   d6bdc:	d10e      	bne.n	d6bfc <__tzcalc_limits+0x98>
   d6bde:	694b      	ldr	r3, [r1, #20]
   d6be0:	9a00      	ldr	r2, [sp, #0]
   d6be2:	18ec      	adds	r4, r5, r3
   d6be4:	b902      	cbnz	r2, d6be8 <__tzcalc_limits+0x84>
   d6be6:	b906      	cbnz	r6, d6bea <__tzcalc_limits+0x86>
   d6be8:	b927      	cbnz	r7, d6bf4 <__tzcalc_limits+0x90>
   d6bea:	2b3b      	cmp	r3, #59	; 0x3b
   d6bec:	bfd4      	ite	le
   d6bee:	2300      	movle	r3, #0
   d6bf0:	2301      	movgt	r3, #1
   d6bf2:	e000      	b.n	d6bf6 <__tzcalc_limits+0x92>
   d6bf4:	2300      	movs	r3, #0
   d6bf6:	4423      	add	r3, r4
   d6bf8:	3b01      	subs	r3, #1
   d6bfa:	e03f      	b.n	d6c7c <__tzcalc_limits+0x118>
   d6bfc:	2b44      	cmp	r3, #68	; 0x44
   d6bfe:	d102      	bne.n	d6c06 <__tzcalc_limits+0xa2>
   d6c00:	694b      	ldr	r3, [r1, #20]
   d6c02:	442b      	add	r3, r5
   d6c04:	e03a      	b.n	d6c7c <__tzcalc_limits+0x118>
   d6c06:	9b00      	ldr	r3, [sp, #0]
   d6c08:	b92b      	cbnz	r3, d6c16 <__tzcalc_limits+0xb2>
   d6c0a:	2e00      	cmp	r6, #0
   d6c0c:	bf0c      	ite	eq
   d6c0e:	46f0      	moveq	r8, lr
   d6c10:	f04f 0801 	movne.w	r8, #1
   d6c14:	e000      	b.n	d6c18 <__tzcalc_limits+0xb4>
   d6c16:	46f0      	mov	r8, lr
   d6c18:	4b24      	ldr	r3, [pc, #144]	; (d6cac <__tzcalc_limits+0x148>)
   d6c1a:	68cc      	ldr	r4, [r1, #12]
   d6c1c:	2230      	movs	r2, #48	; 0x30
   d6c1e:	fb02 3808 	mla	r8, r2, r8, r3
   d6c22:	f1a8 0a04 	sub.w	sl, r8, #4
   d6c26:	46a9      	mov	r9, r5
   d6c28:	2301      	movs	r3, #1
   d6c2a:	42a3      	cmp	r3, r4
   d6c2c:	da04      	bge.n	d6c38 <__tzcalc_limits+0xd4>
   d6c2e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d6c32:	3301      	adds	r3, #1
   d6c34:	44d9      	add	r9, fp
   d6c36:	e7f8      	b.n	d6c2a <__tzcalc_limits+0xc6>
   d6c38:	f109 0304 	add.w	r3, r9, #4
   d6c3c:	fb93 fbfc 	sdiv	fp, r3, ip
   d6c40:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6c44:	2c01      	cmp	r4, #1
   d6c46:	ebca 0a03 	rsb	sl, sl, r3
   d6c4a:	694b      	ldr	r3, [r1, #20]
   d6c4c:	bfb8      	it	lt
   d6c4e:	2401      	movlt	r4, #1
   d6c50:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6c54:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6c58:	690b      	ldr	r3, [r1, #16]
   d6c5a:	f104 34ff 	add.w	r4, r4, #4294967295
   d6c5e:	f103 33ff 	add.w	r3, r3, #4294967295
   d6c62:	bf48      	it	mi
   d6c64:	f10a 0a07 	addmi.w	sl, sl, #7
   d6c68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6c6c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6c70:	4453      	add	r3, sl
   d6c72:	42a3      	cmp	r3, r4
   d6c74:	db01      	blt.n	d6c7a <__tzcalc_limits+0x116>
   d6c76:	3b07      	subs	r3, #7
   d6c78:	e7fb      	b.n	d6c72 <__tzcalc_limits+0x10e>
   d6c7a:	444b      	add	r3, r9
   d6c7c:	698c      	ldr	r4, [r1, #24]
   d6c7e:	4a0c      	ldr	r2, [pc, #48]	; (d6cb0 <__tzcalc_limits+0x14c>)
   d6c80:	fb02 4303 	mla	r3, r2, r3, r4
   d6c84:	6a0c      	ldr	r4, [r1, #32]
   d6c86:	4423      	add	r3, r4
   d6c88:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6c8c:	9b01      	ldr	r3, [sp, #4]
   d6c8e:	4299      	cmp	r1, r3
   d6c90:	d1a2      	bne.n	d6bd8 <__tzcalc_limits+0x74>
   d6c92:	69c3      	ldr	r3, [r0, #28]
   d6c94:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6c96:	4293      	cmp	r3, r2
   d6c98:	bfac      	ite	ge
   d6c9a:	2300      	movge	r3, #0
   d6c9c:	2301      	movlt	r3, #1
   d6c9e:	6003      	str	r3, [r0, #0]
   d6ca0:	2001      	movs	r0, #1
   d6ca2:	e000      	b.n	d6ca6 <__tzcalc_limits+0x142>
   d6ca4:	2000      	movs	r0, #0
   d6ca6:	b003      	add	sp, #12
   d6ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cac:	000d75ec 	.word	0x000d75ec
   d6cb0:	00015180 	.word	0x00015180

000d6cb4 <__tz_lock>:
   d6cb4:	4770      	bx	lr

000d6cb6 <__tz_unlock>:
   d6cb6:	4770      	bx	lr

000d6cb8 <_tzset_unlocked>:
   d6cb8:	4b01      	ldr	r3, [pc, #4]	; (d6cc0 <_tzset_unlocked+0x8>)
   d6cba:	6818      	ldr	r0, [r3, #0]
   d6cbc:	f000 b802 	b.w	d6cc4 <_tzset_unlocked_r>
   d6cc0:	2003e30c 	.word	0x2003e30c

000d6cc4 <_tzset_unlocked_r>:
   d6cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6cc8:	b08d      	sub	sp, #52	; 0x34
   d6cca:	4607      	mov	r7, r0
   d6ccc:	f000 f9be 	bl	d704c <__gettzinfo>
   d6cd0:	49b0      	ldr	r1, [pc, #704]	; (d6f94 <_tzset_unlocked_r+0x2d0>)
   d6cd2:	4eb1      	ldr	r6, [pc, #708]	; (d6f98 <_tzset_unlocked_r+0x2d4>)
   d6cd4:	4604      	mov	r4, r0
   d6cd6:	4638      	mov	r0, r7
   d6cd8:	f000 f9b0 	bl	d703c <_getenv_r>
   d6cdc:	4605      	mov	r5, r0
   d6cde:	b960      	cbnz	r0, d6cfa <_tzset_unlocked_r+0x36>
   d6ce0:	4bae      	ldr	r3, [pc, #696]	; (d6f9c <_tzset_unlocked_r+0x2d8>)
   d6ce2:	4aaf      	ldr	r2, [pc, #700]	; (d6fa0 <_tzset_unlocked_r+0x2dc>)
   d6ce4:	6018      	str	r0, [r3, #0]
   d6ce6:	4baf      	ldr	r3, [pc, #700]	; (d6fa4 <_tzset_unlocked_r+0x2e0>)
   d6ce8:	6018      	str	r0, [r3, #0]
   d6cea:	4baf      	ldr	r3, [pc, #700]	; (d6fa8 <_tzset_unlocked_r+0x2e4>)
   d6cec:	6830      	ldr	r0, [r6, #0]
   d6cee:	601a      	str	r2, [r3, #0]
   d6cf0:	605a      	str	r2, [r3, #4]
   d6cf2:	f7fd fe41 	bl	d4978 <free>
   d6cf6:	6035      	str	r5, [r6, #0]
   d6cf8:	e148      	b.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6cfa:	6831      	ldr	r1, [r6, #0]
   d6cfc:	b979      	cbnz	r1, d6d1e <_tzset_unlocked_r+0x5a>
   d6cfe:	6830      	ldr	r0, [r6, #0]
   d6d00:	f7fd fe3a 	bl	d4978 <free>
   d6d04:	4628      	mov	r0, r5
   d6d06:	f7ff fe88 	bl	d6a1a <strlen>
   d6d0a:	1c41      	adds	r1, r0, #1
   d6d0c:	4638      	mov	r0, r7
   d6d0e:	f7fd fe53 	bl	d49b8 <_malloc_r>
   d6d12:	6030      	str	r0, [r6, #0]
   d6d14:	b148      	cbz	r0, d6d2a <_tzset_unlocked_r+0x66>
   d6d16:	4629      	mov	r1, r5
   d6d18:	f7ff fe5c 	bl	d69d4 <strcpy>
   d6d1c:	e005      	b.n	d6d2a <_tzset_unlocked_r+0x66>
   d6d1e:	f7ff fe4f 	bl	d69c0 <strcmp>
   d6d22:	2800      	cmp	r0, #0
   d6d24:	f000 8132 	beq.w	d6f8c <_tzset_unlocked_r+0x2c8>
   d6d28:	e7e9      	b.n	d6cfe <_tzset_unlocked_r+0x3a>
   d6d2a:	782b      	ldrb	r3, [r5, #0]
   d6d2c:	4a9f      	ldr	r2, [pc, #636]	; (d6fac <_tzset_unlocked_r+0x2e8>)
   d6d2e:	49a0      	ldr	r1, [pc, #640]	; (d6fb0 <_tzset_unlocked_r+0x2ec>)
   d6d30:	2b3a      	cmp	r3, #58	; 0x3a
   d6d32:	bf08      	it	eq
   d6d34:	3501      	addeq	r5, #1
   d6d36:	ae0a      	add	r6, sp, #40	; 0x28
   d6d38:	4633      	mov	r3, r6
   d6d3a:	4628      	mov	r0, r5
   d6d3c:	f7fd fe2c 	bl	d4998 <siscanf>
   d6d40:	2800      	cmp	r0, #0
   d6d42:	f340 8123 	ble.w	d6f8c <_tzset_unlocked_r+0x2c8>
   d6d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d48:	18ef      	adds	r7, r5, r3
   d6d4a:	5ceb      	ldrb	r3, [r5, r3]
   d6d4c:	2b2d      	cmp	r3, #45	; 0x2d
   d6d4e:	d103      	bne.n	d6d58 <_tzset_unlocked_r+0x94>
   d6d50:	3701      	adds	r7, #1
   d6d52:	f04f 35ff 	mov.w	r5, #4294967295
   d6d56:	e003      	b.n	d6d60 <_tzset_unlocked_r+0x9c>
   d6d58:	2b2b      	cmp	r3, #43	; 0x2b
   d6d5a:	bf08      	it	eq
   d6d5c:	3701      	addeq	r7, #1
   d6d5e:	2501      	movs	r5, #1
   d6d60:	f10d 0a20 	add.w	sl, sp, #32
   d6d64:	f10d 0b1e 	add.w	fp, sp, #30
   d6d68:	f04f 0800 	mov.w	r8, #0
   d6d6c:	9603      	str	r6, [sp, #12]
   d6d6e:	f8cd a008 	str.w	sl, [sp, #8]
   d6d72:	9601      	str	r6, [sp, #4]
   d6d74:	f8cd b000 	str.w	fp, [sp]
   d6d78:	4633      	mov	r3, r6
   d6d7a:	aa07      	add	r2, sp, #28
   d6d7c:	498d      	ldr	r1, [pc, #564]	; (d6fb4 <_tzset_unlocked_r+0x2f0>)
   d6d7e:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6d82:	4638      	mov	r0, r7
   d6d84:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6d88:	f7fd fe06 	bl	d4998 <siscanf>
   d6d8c:	4540      	cmp	r0, r8
   d6d8e:	f340 80fd 	ble.w	d6f8c <_tzset_unlocked_r+0x2c8>
   d6d92:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6d96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6d9a:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6fc0 <_tzset_unlocked_r+0x2fc>
   d6d9e:	213c      	movs	r1, #60	; 0x3c
   d6da0:	fb01 3302 	mla	r3, r1, r2, r3
   d6da4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6da8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6dac:	fb01 3302 	mla	r3, r1, r2, r3
   d6db0:	435d      	muls	r5, r3
   d6db2:	6225      	str	r5, [r4, #32]
   d6db4:	4d7c      	ldr	r5, [pc, #496]	; (d6fa8 <_tzset_unlocked_r+0x2e4>)
   d6db6:	4b7d      	ldr	r3, [pc, #500]	; (d6fac <_tzset_unlocked_r+0x2e8>)
   d6db8:	602b      	str	r3, [r5, #0]
   d6dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6dbc:	497c      	ldr	r1, [pc, #496]	; (d6fb0 <_tzset_unlocked_r+0x2ec>)
   d6dbe:	441f      	add	r7, r3
   d6dc0:	464a      	mov	r2, r9
   d6dc2:	4633      	mov	r3, r6
   d6dc4:	4638      	mov	r0, r7
   d6dc6:	f7fd fde7 	bl	d4998 <siscanf>
   d6dca:	4540      	cmp	r0, r8
   d6dcc:	dc08      	bgt.n	d6de0 <_tzset_unlocked_r+0x11c>
   d6dce:	682b      	ldr	r3, [r5, #0]
   d6dd0:	606b      	str	r3, [r5, #4]
   d6dd2:	4b72      	ldr	r3, [pc, #456]	; (d6f9c <_tzset_unlocked_r+0x2d8>)
   d6dd4:	6a22      	ldr	r2, [r4, #32]
   d6dd6:	601a      	str	r2, [r3, #0]
   d6dd8:	4b72      	ldr	r3, [pc, #456]	; (d6fa4 <_tzset_unlocked_r+0x2e0>)
   d6dda:	f8c3 8000 	str.w	r8, [r3]
   d6dde:	e0d5      	b.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6de2:	f8c5 9004 	str.w	r9, [r5, #4]
   d6de6:	18fd      	adds	r5, r7, r3
   d6de8:	5cfb      	ldrb	r3, [r7, r3]
   d6dea:	2b2d      	cmp	r3, #45	; 0x2d
   d6dec:	d103      	bne.n	d6df6 <_tzset_unlocked_r+0x132>
   d6dee:	3501      	adds	r5, #1
   d6df0:	f04f 37ff 	mov.w	r7, #4294967295
   d6df4:	e003      	b.n	d6dfe <_tzset_unlocked_r+0x13a>
   d6df6:	2b2b      	cmp	r3, #43	; 0x2b
   d6df8:	bf08      	it	eq
   d6dfa:	3501      	addeq	r5, #1
   d6dfc:	2701      	movs	r7, #1
   d6dfe:	2300      	movs	r3, #0
   d6e00:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6e04:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6e08:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6e0c:	930a      	str	r3, [sp, #40]	; 0x28
   d6e0e:	9603      	str	r6, [sp, #12]
   d6e10:	f8cd a008 	str.w	sl, [sp, #8]
   d6e14:	9601      	str	r6, [sp, #4]
   d6e16:	f8cd b000 	str.w	fp, [sp]
   d6e1a:	4633      	mov	r3, r6
   d6e1c:	aa07      	add	r2, sp, #28
   d6e1e:	4965      	ldr	r1, [pc, #404]	; (d6fb4 <_tzset_unlocked_r+0x2f0>)
   d6e20:	4628      	mov	r0, r5
   d6e22:	f7fd fdb9 	bl	d4998 <siscanf>
   d6e26:	2800      	cmp	r0, #0
   d6e28:	dc04      	bgt.n	d6e34 <_tzset_unlocked_r+0x170>
   d6e2a:	6a23      	ldr	r3, [r4, #32]
   d6e2c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6e30:	63e3      	str	r3, [r4, #60]	; 0x3c
   d6e32:	e00e      	b.n	d6e52 <_tzset_unlocked_r+0x18e>
   d6e34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6e38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6e3c:	213c      	movs	r1, #60	; 0x3c
   d6e3e:	fb01 3302 	mla	r3, r1, r2, r3
   d6e42:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6e46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6e4a:	fb01 3302 	mla	r3, r1, r2, r3
   d6e4e:	435f      	muls	r7, r3
   d6e50:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e54:	4627      	mov	r7, r4
   d6e56:	441d      	add	r5, r3
   d6e58:	f04f 0900 	mov.w	r9, #0
   d6e5c:	782b      	ldrb	r3, [r5, #0]
   d6e5e:	2b2c      	cmp	r3, #44	; 0x2c
   d6e60:	bf08      	it	eq
   d6e62:	3501      	addeq	r5, #1
   d6e64:	f895 8000 	ldrb.w	r8, [r5]
   d6e68:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6e6c:	d126      	bne.n	d6ebc <_tzset_unlocked_r+0x1f8>
   d6e6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6e72:	9302      	str	r3, [sp, #8]
   d6e74:	ab09      	add	r3, sp, #36	; 0x24
   d6e76:	9300      	str	r3, [sp, #0]
   d6e78:	9603      	str	r6, [sp, #12]
   d6e7a:	9601      	str	r6, [sp, #4]
   d6e7c:	4633      	mov	r3, r6
   d6e7e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6e82:	494d      	ldr	r1, [pc, #308]	; (d6fb8 <_tzset_unlocked_r+0x2f4>)
   d6e84:	4628      	mov	r0, r5
   d6e86:	f7fd fd87 	bl	d4998 <siscanf>
   d6e8a:	2803      	cmp	r0, #3
   d6e8c:	d17e      	bne.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6e8e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6e92:	1e4b      	subs	r3, r1, #1
   d6e94:	2b0b      	cmp	r3, #11
   d6e96:	d879      	bhi.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6e98:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6e9c:	1e53      	subs	r3, r2, #1
   d6e9e:	2b04      	cmp	r3, #4
   d6ea0:	d874      	bhi.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6ea2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6ea6:	2b06      	cmp	r3, #6
   d6ea8:	d870      	bhi.n	d6f8c <_tzset_unlocked_r+0x2c8>
   d6eaa:	f887 8008 	strb.w	r8, [r7, #8]
   d6eae:	60f9      	str	r1, [r7, #12]
   d6eb0:	613a      	str	r2, [r7, #16]
   d6eb2:	617b      	str	r3, [r7, #20]
   d6eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6eb6:	eb05 0803 	add.w	r8, r5, r3
   d6eba:	e02a      	b.n	d6f12 <_tzset_unlocked_r+0x24e>
   d6ebc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6ec0:	bf06      	itte	eq
   d6ec2:	3501      	addeq	r5, #1
   d6ec4:	4643      	moveq	r3, r8
   d6ec6:	2344      	movne	r3, #68	; 0x44
   d6ec8:	220a      	movs	r2, #10
   d6eca:	a90b      	add	r1, sp, #44	; 0x2c
   d6ecc:	4628      	mov	r0, r5
   d6ece:	9305      	str	r3, [sp, #20]
   d6ed0:	f7ff fe3e 	bl	d6b50 <strtoul>
   d6ed4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d6ed8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d6edc:	4545      	cmp	r5, r8
   d6ede:	9b05      	ldr	r3, [sp, #20]
   d6ee0:	d114      	bne.n	d6f0c <_tzset_unlocked_r+0x248>
   d6ee2:	234d      	movs	r3, #77	; 0x4d
   d6ee4:	f1b9 0f00 	cmp.w	r9, #0
   d6ee8:	d107      	bne.n	d6efa <_tzset_unlocked_r+0x236>
   d6eea:	7223      	strb	r3, [r4, #8]
   d6eec:	2303      	movs	r3, #3
   d6eee:	60e3      	str	r3, [r4, #12]
   d6ef0:	2302      	movs	r3, #2
   d6ef2:	6123      	str	r3, [r4, #16]
   d6ef4:	f8c4 9014 	str.w	r9, [r4, #20]
   d6ef8:	e00b      	b.n	d6f12 <_tzset_unlocked_r+0x24e>
   d6efa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6efe:	230b      	movs	r3, #11
   d6f00:	62a3      	str	r3, [r4, #40]	; 0x28
   d6f02:	2301      	movs	r3, #1
   d6f04:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6f06:	2300      	movs	r3, #0
   d6f08:	6323      	str	r3, [r4, #48]	; 0x30
   d6f0a:	e002      	b.n	d6f12 <_tzset_unlocked_r+0x24e>
   d6f0c:	b280      	uxth	r0, r0
   d6f0e:	723b      	strb	r3, [r7, #8]
   d6f10:	6178      	str	r0, [r7, #20]
   d6f12:	2302      	movs	r3, #2
   d6f14:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6f18:	2300      	movs	r3, #0
   d6f1a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6f1e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6f22:	930a      	str	r3, [sp, #40]	; 0x28
   d6f24:	f898 3000 	ldrb.w	r3, [r8]
   d6f28:	2b2f      	cmp	r3, #47	; 0x2f
   d6f2a:	d10b      	bne.n	d6f44 <_tzset_unlocked_r+0x280>
   d6f2c:	9603      	str	r6, [sp, #12]
   d6f2e:	f8cd a008 	str.w	sl, [sp, #8]
   d6f32:	9601      	str	r6, [sp, #4]
   d6f34:	f8cd b000 	str.w	fp, [sp]
   d6f38:	4633      	mov	r3, r6
   d6f3a:	aa07      	add	r2, sp, #28
   d6f3c:	491f      	ldr	r1, [pc, #124]	; (d6fbc <_tzset_unlocked_r+0x2f8>)
   d6f3e:	4640      	mov	r0, r8
   d6f40:	f7fd fd2a 	bl	d4998 <siscanf>
   d6f44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6f48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6f4c:	213c      	movs	r1, #60	; 0x3c
   d6f4e:	fb01 3302 	mla	r3, r1, r2, r3
   d6f52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6f56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6f5a:	fb01 3302 	mla	r3, r1, r2, r3
   d6f5e:	61bb      	str	r3, [r7, #24]
   d6f60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6f62:	f109 0901 	add.w	r9, r9, #1
   d6f66:	f1b9 0f02 	cmp.w	r9, #2
   d6f6a:	4445      	add	r5, r8
   d6f6c:	f107 071c 	add.w	r7, r7, #28
   d6f70:	f47f af74 	bne.w	d6e5c <_tzset_unlocked_r+0x198>
   d6f74:	6860      	ldr	r0, [r4, #4]
   d6f76:	f7ff fdf5 	bl	d6b64 <__tzcalc_limits>
   d6f7a:	4b08      	ldr	r3, [pc, #32]	; (d6f9c <_tzset_unlocked_r+0x2d8>)
   d6f7c:	6a22      	ldr	r2, [r4, #32]
   d6f7e:	601a      	str	r2, [r3, #0]
   d6f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f82:	1a9b      	subs	r3, r3, r2
   d6f84:	4a07      	ldr	r2, [pc, #28]	; (d6fa4 <_tzset_unlocked_r+0x2e0>)
   d6f86:	bf18      	it	ne
   d6f88:	2301      	movne	r3, #1
   d6f8a:	6013      	str	r3, [r2, #0]
   d6f8c:	b00d      	add	sp, #52	; 0x34
   d6f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f92:	bf00      	nop
   d6f94:	000d764c 	.word	0x000d764c
   d6f98:	2003e7e0 	.word	0x2003e7e0
   d6f9c:	2003e7e8 	.word	0x2003e7e8
   d6fa0:	000d764f 	.word	0x000d764f
   d6fa4:	2003e7e4 	.word	0x2003e7e4
   d6fa8:	2003e310 	.word	0x2003e310
   d6fac:	2003e7d3 	.word	0x2003e7d3
   d6fb0:	000d7653 	.word	0x000d7653
   d6fb4:	000d7676 	.word	0x000d7676
   d6fb8:	000d7662 	.word	0x000d7662
   d6fbc:	000d7675 	.word	0x000d7675
   d6fc0:	2003e7c8 	.word	0x2003e7c8

000d6fc4 <_findenv_r>:
   d6fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fc8:	4607      	mov	r7, r0
   d6fca:	468b      	mov	fp, r1
   d6fcc:	4690      	mov	r8, r2
   d6fce:	f000 f8d9 	bl	d7184 <__env_lock>
   d6fd2:	4b19      	ldr	r3, [pc, #100]	; (d7038 <_findenv_r+0x74>)
   d6fd4:	681d      	ldr	r5, [r3, #0]
   d6fd6:	469a      	mov	sl, r3
   d6fd8:	b13d      	cbz	r5, d6fea <_findenv_r+0x26>
   d6fda:	465c      	mov	r4, fp
   d6fdc:	4623      	mov	r3, r4
   d6fde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fe2:	b142      	cbz	r2, d6ff6 <_findenv_r+0x32>
   d6fe4:	2a3d      	cmp	r2, #61	; 0x3d
   d6fe6:	461c      	mov	r4, r3
   d6fe8:	d1f8      	bne.n	d6fdc <_findenv_r+0x18>
   d6fea:	4638      	mov	r0, r7
   d6fec:	f000 f8cb 	bl	d7186 <__env_unlock>
   d6ff0:	2000      	movs	r0, #0
   d6ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ff6:	ebcb 0404 	rsb	r4, fp, r4
   d6ffa:	46a9      	mov	r9, r5
   d6ffc:	f859 0b04 	ldr.w	r0, [r9], #4
   d7000:	2800      	cmp	r0, #0
   d7002:	d0f2      	beq.n	d6fea <_findenv_r+0x26>
   d7004:	4622      	mov	r2, r4
   d7006:	4659      	mov	r1, fp
   d7008:	f7ff fd0f 	bl	d6a2a <strncmp>
   d700c:	b988      	cbnz	r0, d7032 <_findenv_r+0x6e>
   d700e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7012:	191e      	adds	r6, r3, r4
   d7014:	5d1b      	ldrb	r3, [r3, r4]
   d7016:	2b3d      	cmp	r3, #61	; 0x3d
   d7018:	d10b      	bne.n	d7032 <_findenv_r+0x6e>
   d701a:	f8da 3000 	ldr.w	r3, [sl]
   d701e:	1aed      	subs	r5, r5, r3
   d7020:	10ad      	asrs	r5, r5, #2
   d7022:	4638      	mov	r0, r7
   d7024:	f8c8 5000 	str.w	r5, [r8]
   d7028:	f000 f8ad 	bl	d7186 <__env_unlock>
   d702c:	1c70      	adds	r0, r6, #1
   d702e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7032:	464d      	mov	r5, r9
   d7034:	e7e1      	b.n	d6ffa <_findenv_r+0x36>
   d7036:	bf00      	nop
   d7038:	2003e358 	.word	0x2003e358

000d703c <_getenv_r>:
   d703c:	b507      	push	{r0, r1, r2, lr}
   d703e:	aa01      	add	r2, sp, #4
   d7040:	f7ff ffc0 	bl	d6fc4 <_findenv_r>
   d7044:	b003      	add	sp, #12
   d7046:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d704c <__gettzinfo>:
   d704c:	4800      	ldr	r0, [pc, #0]	; (d7050 <__gettzinfo+0x4>)
   d704e:	4770      	bx	lr
   d7050:	2003e318 	.word	0x2003e318

000d7054 <gmtime_r>:
   d7054:	6802      	ldr	r2, [r0, #0]
   d7056:	4b47      	ldr	r3, [pc, #284]	; (d7174 <gmtime_r+0x120>)
   d7058:	b5f0      	push	{r4, r5, r6, r7, lr}
   d705a:	fb92 f4f3 	sdiv	r4, r2, r3
   d705e:	fb03 2214 	mls	r2, r3, r4, r2
   d7062:	2a00      	cmp	r2, #0
   d7064:	bfbc      	itt	lt
   d7066:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d706a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d706e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7072:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7076:	fb92 f3f0 	sdiv	r3, r2, r0
   d707a:	fb00 2213 	mls	r2, r0, r3, r2
   d707e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7082:	bfac      	ite	ge
   d7084:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7088:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d708c:	608b      	str	r3, [r1, #8]
   d708e:	fb92 f3f0 	sdiv	r3, r2, r0
   d7092:	fb00 2213 	mls	r2, r0, r3, r2
   d7096:	604b      	str	r3, [r1, #4]
   d7098:	600a      	str	r2, [r1, #0]
   d709a:	2307      	movs	r3, #7
   d709c:	1ce2      	adds	r2, r4, #3
   d709e:	fb92 f3f3 	sdiv	r3, r2, r3
   d70a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d70a6:	1ad3      	subs	r3, r2, r3
   d70a8:	618b      	str	r3, [r1, #24]
   d70aa:	4b33      	ldr	r3, [pc, #204]	; (d7178 <gmtime_r+0x124>)
   d70ac:	4d33      	ldr	r5, [pc, #204]	; (d717c <gmtime_r+0x128>)
   d70ae:	fb94 f5f5 	sdiv	r5, r4, r5
   d70b2:	fb03 4405 	mla	r4, r3, r5, r4
   d70b6:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d70ba:	fbb4 f2f2 	udiv	r2, r4, r2
   d70be:	4422      	add	r2, r4
   d70c0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d70c4:	fbb4 f3f7 	udiv	r3, r4, r7
   d70c8:	1ad2      	subs	r2, r2, r3
   d70ca:	482d      	ldr	r0, [pc, #180]	; (d7180 <gmtime_r+0x12c>)
   d70cc:	fbb4 f0f0 	udiv	r0, r4, r0
   d70d0:	f648 6694 	movw	r6, #36500	; 0x8e94
   d70d4:	1a13      	subs	r3, r2, r0
   d70d6:	fbb3 f6f6 	udiv	r6, r3, r6
   d70da:	4434      	add	r4, r6
   d70dc:	f240 126d 	movw	r2, #365	; 0x16d
   d70e0:	fbb3 f0f2 	udiv	r0, r3, r2
   d70e4:	fbb3 f3f7 	udiv	r3, r3, r7
   d70e8:	1ae3      	subs	r3, r4, r3
   d70ea:	fb02 3310 	mls	r3, r2, r0, r3
   d70ee:	2499      	movs	r4, #153	; 0x99
   d70f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d70f4:	3202      	adds	r2, #2
   d70f6:	fbb2 f2f4 	udiv	r2, r2, r4
   d70fa:	2a0a      	cmp	r2, #10
   d70fc:	fb04 f402 	mul.w	r4, r4, r2
   d7100:	f104 0602 	add.w	r6, r4, #2
   d7104:	f04f 0405 	mov.w	r4, #5
   d7108:	fbb6 f4f4 	udiv	r4, r6, r4
   d710c:	bf34      	ite	cc
   d710e:	2602      	movcc	r6, #2
   d7110:	f06f 0609 	mvncs.w	r6, #9
   d7114:	4416      	add	r6, r2
   d7116:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d711a:	fb02 0505 	mla	r5, r2, r5, r0
   d711e:	1c5f      	adds	r7, r3, #1
   d7120:	2e01      	cmp	r6, #1
   d7122:	bf98      	it	ls
   d7124:	3501      	addls	r5, #1
   d7126:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d712a:	eba7 0704 	sub.w	r7, r7, r4
   d712e:	d302      	bcc.n	d7136 <gmtime_r+0xe2>
   d7130:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7134:	e014      	b.n	d7160 <gmtime_r+0x10c>
   d7136:	0782      	lsls	r2, r0, #30
   d7138:	d105      	bne.n	d7146 <gmtime_r+0xf2>
   d713a:	2464      	movs	r4, #100	; 0x64
   d713c:	fbb0 f2f4 	udiv	r2, r0, r4
   d7140:	fb04 0212 	mls	r2, r4, r2, r0
   d7144:	b94a      	cbnz	r2, d715a <gmtime_r+0x106>
   d7146:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d714a:	fbb0 f4f2 	udiv	r4, r0, r2
   d714e:	fb02 0014 	mls	r0, r2, r4, r0
   d7152:	fab0 f280 	clz	r2, r0
   d7156:	0952      	lsrs	r2, r2, #5
   d7158:	e000      	b.n	d715c <gmtime_r+0x108>
   d715a:	2201      	movs	r2, #1
   d715c:	333b      	adds	r3, #59	; 0x3b
   d715e:	441a      	add	r2, r3
   d7160:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7164:	2300      	movs	r3, #0
   d7166:	61ca      	str	r2, [r1, #28]
   d7168:	614d      	str	r5, [r1, #20]
   d716a:	610e      	str	r6, [r1, #16]
   d716c:	60cf      	str	r7, [r1, #12]
   d716e:	620b      	str	r3, [r1, #32]
   d7170:	4608      	mov	r0, r1
   d7172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7174:	00015180 	.word	0x00015180
   d7178:	fffdc54f 	.word	0xfffdc54f
   d717c:	00023ab1 	.word	0x00023ab1
   d7180:	00023ab0 	.word	0x00023ab0

000d7184 <__env_lock>:
   d7184:	4770      	bx	lr

000d7186 <__env_unlock>:
   d7186:	4770      	bx	lr

000d7188 <dynalib_user>:
   d7188:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7198:	0000 0000 6574 706d 7265 7461 7275 0065     ....temperature.
   d71a8:	7568 696d 6964 7974 5500 6470 7461 6e69     humidity.Updatin
   d71b8:	2067 6c63 6d69 7461 2065 6164 6174 6620     g climate data f
   d71c8:	6c69 0065 6c63 6d69 7461 4165 6576 6172     ile.climateAvera
   d71d8:	6567 7055 6164 6574 0000 0000               geUpdate....

000d71e4 <_ZTVN5spark12NetworkClassE>:
	...
   d71ec:	49db 000d 49e5 000d 49ef 000d 49f9 000d     .I...I...I...I..
   d71fc:	4a03 000d 4a0f 000d 4a1b 000d 4a27 000d     .J...J...J..'J..
   d720c:	4a2f 000d 4a39 000d 4a43 000d               /J..9J..CJ..

000d7218 <_ZTVN5spark9MeshClassE>:
	...
   d7220:	4b83 000d 4b79 000d 4b6f 000d 4b65 000d     .K..yK..oK..eK..
   d7230:	4b59 000d 4b4d 000d 4b41 000d 4b39 000d     YK..MK..AK..9K..
   d7240:	4b2f 000d 4b25 000d 4a43 000d               /K..%K..CJ..

000d724c <_ZTVN5spark9WiFiClassE>:
	...
   d7254:	4ce7 000d 4cdd 000d 4cd3 000d 4c89 000d     .L...L...L...L..
   d7264:	4cc7 000d 4cbb 000d 4caf 000d 4ca7 000d     .L...L...L...L..
   d7274:	4c9d 000d 4c93 000d 4a43 000d               .L...L..CJ..

000d7280 <_ZTV7TwoWire>:
	...
   d7288:	4d05 000d 4d4f 000d 4d27 000d 4d07 000d     .M..OM..'M...M..
   d7298:	4d2f 000d 4d37 000d 4d3f 000d 4d47 000d     /M..7M..?M..GM..

000d72a8 <_ZTV11USARTSerial>:
	...
   d72b0:	4ded 000d 4e3d 000d 4e4b 000d 58e1 000d     .M..=N..KN...X..
   d72c0:	4e01 000d 4e23 000d 4e0f 000d 4e37 000d     .N..#N...N..7N..
   d72d0:	4def 000d 4df3 000d                         .M...M..

000d72d8 <_ZTV9USBSerial>:
	...
   d72e0:	4efb 000d 4f4b 000d 4f59 000d 58e1 000d     .N..KO..YO...X..
   d72f0:	4f37 000d 4efd 000d 4f13 000d 4f45 000d     7O...N...O..EO..
   d7300:	4f29 000d 4ef7 000d                         )O...N..

000d7308 <_ZTV9IPAddress>:
	...
   d7310:	5019 000d 5009 000d 500b 000d               .P...P...P..

000d731c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7324:	50ed 000d 50f3 000d 5137 000d 5101 000d     .P...P..7Q...Q..
   d7334:	50ef 000d 2b25 3330 3a64 3025 7532 2500     .P..%+03d:%02u.%
   d7344:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d7354:	7a25 6100 6373 6974 656d 6200 7561 0064     %z.asctime.baud.
   d7364:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d7374:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d7384:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d7394:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d73a4:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d73b4:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d73c4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d73d4:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
   d73e4:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d73f4:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d7404:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
   d7414:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   d7424:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d7434:	0072 6170 696e 0063 6c61 006c               r.panic.all.

000d7440 <_ZTV8SPIClass>:
	...
   d7448:	5b2d 000d 5b2f 000d                         -[../[..

000d7450 <_ZTVN5spark13EthernetClassE>:
	...
   d7458:	5bc3 000d 5bb9 000d 5baf 000d 5ba5 000d     .[...[...[...[..
   d7468:	5b99 000d 5b8d 000d 5b81 000d 5b79 000d     .[...[...[..y[..
   d7478:	5b6f 000d 5b65 000d 4a43 000d               o[..e[..CJ..

000d7484 <_ctype_>:
   d7484:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7494:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d74a4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d74b4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d74c4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d74d4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d74e4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d74f4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7504:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7588 <__sf_fake_stdin>:
	...

000d75a8 <__sf_fake_stdout>:
	...

000d75c8 <__sf_fake_stderr>:
	...
   d75e8:	0043 0000                                   C...

000d75ec <__month_lengths>:
   d75ec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d75fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d760c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d761c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d762c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d763c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d764c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d765c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d766c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d767c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7688 <link_const_variable_data_end>:
   d7688:	000d4211 	.word	0x000d4211
   d768c:	000d458b 	.word	0x000d458b
   d7690:	000d4b11 	.word	0x000d4b11
   d7694:	000d4c39 	.word	0x000d4c39
   d7698:	000d4cf1 	.word	0x000d4cf1
   d769c:	000d5775 	.word	0x000d5775
   d76a0:	000d58bd 	.word	0x000d58bd
   d76a4:	000d58d1 	.word	0x000d58d1
   d76a8:	000d5991 	.word	0x000d5991
   d76ac:	000d5b15 	.word	0x000d5b15
   d76b0:	000d5bcd 	.word	0x000d5bcd
   d76b4:	000d5c21 	.word	0x000d5c21
   d76b8:	000d5c79 	.word	0x000d5c79
   d76bc:	000d5cfd 	.word	0x000d5cfd
   d76c0:	000d5dc1 	.word	0x000d5dc1
   d76c4:	000d5e85 	.word	0x000d5e85

000d76c8 <link_constructors_end>:
	...
