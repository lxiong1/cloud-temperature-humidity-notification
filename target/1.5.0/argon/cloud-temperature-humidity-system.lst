
/home/luexiong/projects/cloud-temperature-humidity-system/target/1.5.0/argon/cloud-temperature-humidity-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d79e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003e29c  000d79e4  0001e29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000049c  2003e354  2003e354  0002e354  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7a9c  000d7a9c  00027a9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7ac4  000d7ac4  00027ac4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eb452  00000000  00000000  00027ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011b86  00000000  00000000  00112f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002728  00000000  00000000  00124aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00034b92  00000000  00000000  001271c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000297ee  00000000  00000000  0015bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010fa30  00000000  00000000  00185548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00020a75  00000000  00000000  00294f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004ce0  00000000  00000000  002b59ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d74c  00000000  00000000  002ba6d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fe07 	bl	d6c44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fe0c 	bl	d6c5a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e29c 	.word	0x2003e29c
   d404c:	000d79e4 	.word	0x000d79e4
   d4050:	2003e354 	.word	0x2003e354
   d4054:	2003e354 	.word	0x2003e354
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fc21 	bl	d58a4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d79e0 	.word	0x000d79e0
   d4084:	000d79a4 	.word	0x000d79a4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b82a 	b.w	d40e0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f865 	bl	d415c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bbc7 	b.w	d5828 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bce7 	b.w	d4a6c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bced 	b.w	d4a7c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bceb 	b.w	d4a7c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f001 ff41 	bl	d5f48 <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}

000d40ce <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d40ce:	6803      	ldr	r3, [r0, #0]
   d40d0:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d40d2:	b120      	cbz	r0, d40de <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d40d4:	8883      	ldrh	r3, [r0, #4]
   d40d6:	428b      	cmp	r3, r1
   d40d8:	d001      	beq.n	d40de <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d40da:	6880      	ldr	r0, [r0, #8]
   d40dc:	e7f9      	b.n	d40d2 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d40de:	4770      	bx	lr

000d40e0 <setup>:
Adafruit_Si7021 sensor = Adafruit_Si7021();
SystemSleepConfiguration systemSleepConfiguration;
bool updated = false;

void setup() {
  sensor.begin();
   d40e0:	4801      	ldr	r0, [pc, #4]	; (d40e8 <setup+0x8>)
   d40e2:	f000 babd 	b.w	d4660 <_ZN15Adafruit_Si70215beginEv>
   d40e6:	bf00      	nop
   d40e8:	2003e358 	.word	0x2003e358

000d40ec <_Z10isEndOfDayv>:
    .flag(SystemSleepFlag::WAIT_CLOUD)
    .mode(SystemSleepMode::STOP)
    .duration(50s));
}

boolean isEndOfDay() {
   d40ec:	b570      	push	{r4, r5, r6, lr}
  int currentHour = Time.hourFormat12(Time.now());
   d40ee:	f001 fc98 	bl	d5a22 <_ZN9TimeClass3nowEv>

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40f2:	4c0e      	ldr	r4, [pc, #56]	; (d412c <_Z10isEndOfDayv+0x40>)
    .mode(SystemSleepMode::STOP)
    .duration(50s));
}

boolean isEndOfDay() {
  int currentHour = Time.hourFormat12(Time.now());
   d40f4:	f001 fc5a 	bl	d59ac <_ZN9TimeClass12hourFormat12El>

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40f8:	7823      	ldrb	r3, [r4, #0]
    .mode(SystemSleepMode::STOP)
    .duration(50s));
}

boolean isEndOfDay() {
  int currentHour = Time.hourFormat12(Time.now());
   d40fa:	4605      	mov	r5, r0
   d40fc:	4626      	mov	r6, r4

  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
   d40fe:	b93b      	cbnz	r3, d4110 <_Z10isEndOfDayv+0x24>
   d4100:	2808      	cmp	r0, #8
   d4102:	dd05      	ble.n	d4110 <_Z10isEndOfDayv+0x24>
   d4104:	f001 fc9d 	bl	d5a42 <_ZN9TimeClass4isPMEv>
   d4108:	2801      	cmp	r0, #1
   d410a:	d101      	bne.n	d4110 <_Z10isEndOfDayv+0x24>
    updated = true;
   d410c:	7020      	strb	r0, [r4, #0]
    return true;
   d410e:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (updated == true && currentHour >= 6 && Time.isAM() == true) {
   d4110:	7833      	ldrb	r3, [r6, #0]
   d4112:	b10b      	cbz	r3, d4118 <_Z10isEndOfDayv+0x2c>
   d4114:	2d05      	cmp	r5, #5
   d4116:	dc01      	bgt.n	d411c <_Z10isEndOfDayv+0x30>
    updated = false;
    return false;
  }

  return false;
   d4118:	2000      	movs	r0, #0
   d411a:	bd70      	pop	{r4, r5, r6, pc}
  if (updated == false && currentHour >= 9 && Time.isPM() == true) {
    updated = true;
    return true;
  }

  if (updated == true && currentHour >= 6 && Time.isAM() == true) {
   d411c:	f001 fc88 	bl	d5a30 <_ZN9TimeClass4isAMEv>
   d4120:	2801      	cmp	r0, #1
   d4122:	d1f9      	bne.n	d4118 <_Z10isEndOfDayv+0x2c>
    updated = false;
   d4124:	4b01      	ldr	r3, [pc, #4]	; (d412c <_Z10isEndOfDayv+0x40>)
   d4126:	2000      	movs	r0, #0
   d4128:	7018      	strb	r0, [r3, #0]
    return false;
  }

  return false;
}
   d412a:	bd70      	pop	{r4, r5, r6, pc}
   d412c:	2003e380 	.word	0x2003e380

000d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4130:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4132:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4134:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4136:	b17c      	cbz	r4, d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4138:	6863      	ldr	r3, [r4, #4]
   d413a:	3b01      	subs	r3, #1
   d413c:	6063      	str	r3, [r4, #4]
   d413e:	b95b      	cbnz	r3, d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4140:	6823      	ldr	r3, [r4, #0]
   d4142:	4620      	mov	r0, r4
   d4144:	689b      	ldr	r3, [r3, #8]
   d4146:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4148:	68a3      	ldr	r3, [r4, #8]
   d414a:	3b01      	subs	r3, #1
   d414c:	60a3      	str	r3, [r4, #8]
   d414e:	b91b      	cbnz	r3, d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4150:	6823      	ldr	r3, [r4, #0]
   d4152:	4620      	mov	r0, r4
   d4154:	68db      	ldr	r3, [r3, #12]
   d4156:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4158:	4628      	mov	r0, r5
   d415a:	bd38      	pop	{r3, r4, r5, pc}

000d415c <loop>:

void setup() {
  sensor.begin();
}

void loop(void) {
   d415c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d415e:	ed2d 8b02 	vpush	{d8}
  int celsius = sensor.readTemperature();
   d4162:	485a      	ldr	r0, [pc, #360]	; (d42cc <loop+0x170>)
   d4164:	4c5a      	ldr	r4, [pc, #360]	; (d42d0 <loop+0x174>)

void setup() {
  sensor.begin();
}

void loop(void) {
   d4166:	b089      	sub	sp, #36	; 0x24
  int celsius = sensor.readTemperature();
   d4168:	f000 f936 	bl	d43d8 <_ZN15Adafruit_Si702115readTemperatureEv>
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d416c:	4857      	ldr	r0, [pc, #348]	; (d42cc <loop+0x170>)
void setup() {
  sensor.begin();
}

void loop(void) {
  int celsius = sensor.readTemperature();
   d416e:	eeb0 8a40 	vmov.f32	s16, s0
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d4172:	f000 f8eb 	bl	d434c <_ZN15Adafruit_Si702112readHumidityEv>

  Particle.publish("temperature", String(fahrenheit), PRIVATE);
   d4176:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d417a:	2305      	movs	r3, #5
   d417c:	ee17 1a90 	vmov	r1, s15
   d4180:	220a      	movs	r2, #10
   d4182:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   d4186:	a804      	add	r0, sp, #16
   d4188:	fb91 f1f3 	sdiv	r1, r1, r3
   d418c:	3120      	adds	r1, #32
}

void loop(void) {
  int celsius = sensor.readTemperature();
  int fahrenheit = (celsius * 9 / 5) + 32;
  int humidityPercentage = sensor.readHumidity();
   d418e:	eef0 8a40 	vmov.f32	s17, s0

  Particle.publish("temperature", String(fahrenheit), PRIVATE);
   d4192:	f001 fd2d 	bl	d5bf0 <_ZN6StringC1Eih>
   d4196:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4198:	9a04      	ldr	r2, [sp, #16]
   d419a:	494e      	ldr	r1, [pc, #312]	; (d42d4 <loop+0x178>)
   d419c:	f88d 3000 	strb.w	r3, [sp]
   d41a0:	a802      	add	r0, sp, #8
   d41a2:	233c      	movs	r3, #60	; 0x3c
   d41a4:	f001 f9a0 	bl	d54e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41a8:	a803      	add	r0, sp, #12
   d41aa:	f7ff ffc1 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41ae:	a804      	add	r0, sp, #16
   d41b0:	f001 fcc6 	bl	d5b40 <_ZN6StringD1Ev>
  Particle.publish("humidity", String(humidityPercentage), PRIVATE);
   d41b4:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d41b8:	220a      	movs	r2, #10
   d41ba:	ee17 1a90 	vmov	r1, s15
   d41be:	a804      	add	r0, sp, #16
   d41c0:	f001 fd16 	bl	d5bf0 <_ZN6StringC1Eih>
   d41c4:	7823      	ldrb	r3, [r4, #0]
   d41c6:	9a04      	ldr	r2, [sp, #16]
   d41c8:	4943      	ldr	r1, [pc, #268]	; (d42d8 <loop+0x17c>)
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	a802      	add	r0, sp, #8
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	f001 f989 	bl	d54e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41d6:	a803      	add	r0, sp, #12
   d41d8:	f7ff ffaa 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41dc:	a804      	add	r0, sp, #16
   d41de:	f001 fcaf 	bl	d5b40 <_ZN6StringD1Ev>

  if (isEndOfDay() == true) {
   d41e2:	f7ff ff83 	bl	d40ec <_Z10isEndOfDayv>
   d41e6:	b158      	cbz	r0, d4200 <loop+0xa4>
   d41e8:	7823      	ldrb	r3, [r4, #0]
   d41ea:	f88d 3000 	strb.w	r3, [sp]
   d41ee:	a804      	add	r0, sp, #16
   d41f0:	233c      	movs	r3, #60	; 0x3c
   d41f2:	4a3a      	ldr	r2, [pc, #232]	; (d42dc <loop+0x180>)
   d41f4:	493a      	ldr	r1, [pc, #232]	; (d42e0 <loop+0x184>)
   d41f6:	f001 f977 	bl	d54e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41fa:	a805      	add	r0, sp, #20
   d41fc:	f7ff ff98 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    SystemSleepConfiguration& duration(std::chrono::milliseconds ms) {
        return duration(ms.count());
    }

    SystemSleepConfiguration& network(network_interface_t netif) {
        if (valid_) {
   d4200:	4c38      	ldr	r4, [pc, #224]	; (d42e4 <loop+0x188>)

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   d4202:	f242 7010 	movw	r0, #10000	; 0x2710
   d4206:	f001 fb8d 	bl	d5924 <delay>
   d420a:	7d23      	ldrb	r3, [r4, #20]
   d420c:	b31b      	cbz	r3, d4256 <loop+0xfa>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
   d420e:	210e      	movs	r1, #14
   d4210:	4620      	mov	r0, r4
   d4212:	f7ff ff5c 	bl	d40ce <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d4216:	b140      	cbz	r0, d422a <loop+0xce>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d4218:	7b03      	ldrb	r3, [r0, #12]
   d421a:	2b04      	cmp	r3, #4
   d421c:	d01b      	beq.n	d4256 <loop+0xfa>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d421e:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4220:	b118      	cbz	r0, d422a <loop+0xce>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4222:	8883      	ldrh	r3, [r0, #4]
   d4224:	2b0e      	cmp	r3, #14
   d4226:	d1fa      	bne.n	d421e <loop+0xc2>
   d4228:	e7f5      	b.n	d4216 <loop+0xba>
                if (networkWakeup->index == netif) {
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d422a:	492f      	ldr	r1, [pc, #188]	; (d42e8 <loop+0x18c>)
   d422c:	2010      	movs	r0, #16
   d422e:	f001 fe8f 	bl	d5f50 <_ZnwjRKSt9nothrow_t>
   d4232:	4605      	mov	r5, r0
   d4234:	2800      	cmp	r0, #0
   d4236:	d040      	beq.n	d42ba <loop+0x15e>
   d4238:	2610      	movs	r6, #16
   d423a:	4632      	mov	r2, r6
   d423c:	2100      	movs	r1, #0
   d423e:	f002 fd0c 	bl	d6c5a <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4242:	2302      	movs	r3, #2
   d4244:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d4246:	230e      	movs	r3, #14
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4248:	802e      	strh	r6, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d424a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d424c:	6923      	ldr	r3, [r4, #16]
   d424e:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d4250:	2304      	movs	r3, #4
   d4252:	732b      	strb	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4254:	6125      	str	r5, [r4, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
   d4256:	7d23      	ldrb	r3, [r4, #20]
   d4258:	4f22      	ldr	r7, [pc, #136]	; (d42e4 <loop+0x188>)
   d425a:	b32b      	cbz	r3, d42a8 <loop+0x14c>
            config_.flags |= f.value();
   d425c:	68fb      	ldr	r3, [r7, #12]
   d425e:	f043 0301 	orr.w	r3, r3, #1
   d4262:	60fb      	str	r3, [r7, #12]
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4264:	2104      	movs	r1, #4
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4266:	2301      	movs	r3, #1
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4268:	4638      	mov	r0, r7
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d426a:	723b      	strb	r3, [r7, #8]
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d426c:	f7ff ff2f 	bl	d40ce <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d4270:	4605      	mov	r5, r0
   d4272:	b118      	cbz	r0, d427c <loop+0x120>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4274:	f24c 3350 	movw	r3, #50000	; 0xc350
   d4278:	60c3      	str	r3, [r0, #12]
   d427a:	e015      	b.n	d42a8 <loop+0x14c>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d427c:	491a      	ldr	r1, [pc, #104]	; (d42e8 <loop+0x18c>)
   d427e:	2010      	movs	r0, #16
   d4280:	f001 fe66 	bl	d5f50 <_ZnwjRKSt9nothrow_t>
   d4284:	4604      	mov	r4, r0
   d4286:	b1d0      	cbz	r0, d42be <loop+0x162>
   d4288:	2610      	movs	r6, #16
   d428a:	4632      	mov	r2, r6
   d428c:	4629      	mov	r1, r5
   d428e:	f002 fce4 	bl	d6c5a <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4292:	2302      	movs	r3, #2
   d4294:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4296:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4298:	8026      	strh	r6, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d429a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d429c:	693b      	ldr	r3, [r7, #16]
   d429e:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d42a0:	f24c 3350 	movw	r3, #50000	; 0xc350
   d42a4:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42a6:	613c      	str	r4, [r7, #16]

  System.sleep(systemSleepConfiguration
    .network(NETWORK_INTERFACE_CELLULAR)
    .flag(SystemSleepFlag::WAIT_CLOUD)
    .mode(SystemSleepMode::STOP)
    .duration(50s));
   d42a8:	a804      	add	r0, sp, #16
   d42aa:	490e      	ldr	r1, [pc, #56]	; (d42e4 <loop+0x188>)
   d42ac:	f001 fd3e 	bl	d5d2c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42b0:	9804      	ldr	r0, [sp, #16]
   d42b2:	b130      	cbz	r0, d42c2 <loop+0x166>
            free(wakeupSource_);
   d42b4:	f000 fbe2 	bl	d4a7c <free>
}
   d42b8:	e003      	b.n	d42c2 <loop+0x166>
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
            if (!wakeupSource) {
                valid_ = false;
   d42ba:	7520      	strb	r0, [r4, #20]
   d42bc:	e7cb      	b.n	d4256 <loop+0xfa>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d42be:	7538      	strb	r0, [r7, #20]
   d42c0:	e7f2      	b.n	d42a8 <loop+0x14c>
   d42c2:	b009      	add	sp, #36	; 0x24
   d42c4:	ecbd 8b02 	vpop	{d8}
   d42c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ca:	bf00      	nop
   d42cc:	2003e358 	.word	0x2003e358
   d42d0:	2003e364 	.word	0x2003e364
   d42d4:	000d7498 	.word	0x000d7498
   d42d8:	000d74a4 	.word	0x000d74a4
   d42dc:	000d74ad 	.word	0x000d74ad
   d42e0:	000d74c8 	.word	0x000d74c8
   d42e4:	2003e368 	.word	0x2003e368
   d42e8:	000d77a0 	.word	0x000d77a0

000d42ec <_GLOBAL__sub_I_sensor>:
    updated = false;
    return false;
  }

  return false;
}
   d42ec:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42ee:	4b0d      	ldr	r3, [pc, #52]	; (d4324 <_GLOBAL__sub_I_sensor+0x38>)
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d42f0:	4c0d      	ldr	r4, [pc, #52]	; (d4328 <_GLOBAL__sub_I_sensor+0x3c>)
   d42f2:	2601      	movs	r6, #1
   d42f4:	701e      	strb	r6, [r3, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d42f6:	2510      	movs	r5, #16

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42f8:	f000 fad2 	bl	d48a0 <HAL_Pin_Map>
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d42fc:	480b      	ldr	r0, [pc, #44]	; (d432c <_GLOBAL__sub_I_sensor+0x40>)
   d42fe:	f000 f81f 	bl	d4340 <_ZN15Adafruit_Si7021C1Ev>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4302:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4304:	462a      	mov	r2, r5
   d4306:	2100      	movs	r1, #0
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4308:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d430a:	f002 fca6 	bl	d6c5a <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d430e:	2302      	movs	r3, #2
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4310:	7526      	strb	r6, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4312:	80a5      	strh	r5, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d4314:	80e3      	strh	r3, [r4, #6]
SystemSleepConfiguration systemSleepConfiguration;
   d4316:	4620      	mov	r0, r4
   d4318:	4a05      	ldr	r2, [pc, #20]	; (d4330 <_GLOBAL__sub_I_sensor+0x44>)
   d431a:	4906      	ldr	r1, [pc, #24]	; (d4334 <_GLOBAL__sub_I_sensor+0x48>)
    updated = false;
    return false;
  }

  return false;
}
   d431c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "Adafruit_Si7021.h" 

Adafruit_Si7021 sensor = Adafruit_Si7021();
SystemSleepConfiguration systemSleepConfiguration;
   d4320:	f001 be04 	b.w	d5f2c <__aeabi_atexit>
   d4324:	2003e364 	.word	0x2003e364
   d4328:	2003e368 	.word	0x2003e368
   d432c:	2003e358 	.word	0x2003e358
   d4330:	2003e354 	.word	0x2003e354
   d4334:	000d40b7 	.word	0x000d40b7

000d4338 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4338:	6803      	ldr	r3, [r0, #0]
   d433a:	b2c9      	uxtb	r1, r1
   d433c:	689b      	ldr	r3, [r3, #8]
   d433e:	4718      	bx	r3

000d4340 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d4340:	2240      	movs	r2, #64	; 0x40
   d4342:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d4344:	2200      	movs	r2, #0
   d4346:	6042      	str	r2, [r0, #4]
   d4348:	6002      	str	r2, [r0, #0]
}
   d434a:	4770      	bx	lr

000d434c <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d434c:	b510      	push	{r4, lr}
   d434e:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4350:	f001 fdc6 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4354:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4358:	f000 fddb 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d435c:	f001 fdc0 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4360:	6803      	ldr	r3, [r0, #0]
   d4362:	21f5      	movs	r1, #245	; 0xf5
   d4364:	689b      	ldr	r3, [r3, #8]
   d4366:	4798      	blx	r3
  Wire.endTransmission(false);
   d4368:	f001 fdba 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d436c:	2100      	movs	r1, #0
   d436e:	f000 fdd3 	bl	d4f18 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d4372:	2019      	movs	r0, #25
   d4374:	f001 fad6 	bl	d5924 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4378:	f001 fdb2 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d437c:	7a21      	ldrb	r1, [r4, #8]
   d437e:	2203      	movs	r2, #3
   d4380:	f000 fdc0 	bl	d4f04 <_ZN7TwoWire11requestFromEhj>
  uint16_t hum = Wire.read();
   d4384:	f001 fdac 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	4798      	blx	r3
   d438e:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d4390:	f001 fda6 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4394:	6803      	ldr	r3, [r0, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	4798      	blx	r3
   d439a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d439e:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d43a0:	f001 fd9e 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d43a4:	6803      	ldr	r3, [r0, #0]
   d43a6:	695b      	ldr	r3, [r3, #20]
   d43a8:	4798      	blx	r3

  float humidity = hum;
   d43aa:	b2a3      	uxth	r3, r4
   d43ac:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d43b0:	ed9f 7a06 	vldr	s14, [pc, #24]	; d43cc <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d43b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d43b8:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d43bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d43c0:	ed9f 7a03 	vldr	s14, [pc, #12]	; d43d0 <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d43c4:	eea7 0a87 	vfma.f32	s0, s15, s14
   d43c8:	bd10      	pop	{r4, pc}
   d43ca:	bf00      	nop
   d43cc:	42fa0000 	.word	0x42fa0000
   d43d0:	37800000 	.word	0x37800000
   d43d4:	00000000 	.word	0x00000000

000d43d8 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d43d8:	b510      	push	{r4, lr}
   d43da:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d43dc:	f001 fd80 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d43e0:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d43e4:	f000 fd95 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d43e8:	f001 fd7a 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d43ec:	6803      	ldr	r3, [r0, #0]
   d43ee:	21f3      	movs	r1, #243	; 0xf3
   d43f0:	689b      	ldr	r3, [r3, #8]
   d43f2:	4798      	blx	r3
  Wire.endTransmission(false);
   d43f4:	f001 fd74 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d43f8:	2100      	movs	r1, #0
   d43fa:	f000 fd8d 	bl	d4f18 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d43fe:	2019      	movs	r0, #25
   d4400:	f001 fa90 	bl	d5924 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4404:	f001 fd6c 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4408:	2203      	movs	r2, #3
   d440a:	7a21      	ldrb	r1, [r4, #8]
   d440c:	f000 fd7a 	bl	d4f04 <_ZN7TwoWire11requestFromEhj>
  uint16_t temp = Wire.read();
   d4410:	f001 fd66 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4414:	6803      	ldr	r3, [r0, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	4798      	blx	r3
   d441a:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d441c:	f001 fd60 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4420:	6803      	ldr	r3, [r0, #0]
   d4422:	695b      	ldr	r3, [r3, #20]
   d4424:	4798      	blx	r3
   d4426:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d442a:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d442c:	f001 fd58 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4430:	6803      	ldr	r3, [r0, #0]
   d4432:	695b      	ldr	r3, [r3, #20]
   d4434:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d4436:	b2a0      	uxth	r0, r4
   d4438:	ee07 0a90 	vmov	s15, r0
   d443c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4440:	ee17 0a90 	vmov	r0, s15
   d4444:	f002 f842 	bl	d64cc <__aeabi_f2d>
   d4448:	a310      	add	r3, pc, #64	; (adr r3, d448c <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d444a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d444e:	f002 f891 	bl	d6574 <__aeabi_dmul>
   d4452:	f002 faa1 	bl	d6998 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d4456:	eddf 7a0c 	vldr	s15, [pc, #48]	; d4488 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d445a:	ee07 0a10 	vmov	s14, r0
   d445e:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4462:	ee17 0a90 	vmov	r0, s15
   d4466:	f002 f831 	bl	d64cc <__aeabi_f2d>
   d446a:	a305      	add	r3, pc, #20	; (adr r3, d4480 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d446c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4470:	f001 fecc 	bl	d620c <__aeabi_dsub>

  return temperature;
   d4474:	f002 fa90 	bl	d6998 <__aeabi_d2f>
}
   d4478:	ee00 0a10 	vmov	s0, r0
   d447c:	bd10      	pop	{r4, pc}
   d447e:	bf00      	nop
   d4480:	cccccccd 	.word	0xcccccccd
   d4484:	40476ccc 	.word	0x40476ccc
   d4488:	37800000 	.word	0x37800000
   d448c:	3d70a3d7 	.word	0x3d70a3d7
   d4490:	4065f70a 	.word	0x4065f70a

000d4494 <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d4494:	b510      	push	{r4, lr}
   d4496:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4498:	f001 fd22 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d449c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d44a0:	f000 fd37 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d44a4:	f001 fd1c 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44a8:	6803      	ldr	r3, [r0, #0]
   d44aa:	21fe      	movs	r1, #254	; 0xfe
   d44ac:	689b      	ldr	r3, [r3, #8]
   d44ae:	4798      	blx	r3
  Wire.endTransmission();
   d44b0:	f001 fd16 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44b4:	f000 fd34 	bl	d4f20 <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d44b8:	2032      	movs	r0, #50	; 0x32
}
   d44ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d44be:	f001 ba31 	b.w	d5924 <delay>

000d44c2 <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d44c2:	b510      	push	{r4, lr}
   d44c4:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d44c6:	f001 fd0b 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44ca:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d44ce:	f000 fd20 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d44d2:	f001 fd05 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44d6:	2100      	movs	r1, #0
   d44d8:	f7ff ff2e 	bl	d4338 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d44dc:	f001 fd00 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44e0:	210f      	movs	r1, #15
   d44e2:	f7ff ff29 	bl	d4338 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d44e6:	f001 fcfb 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44ea:	f000 fd19 	bl	d4f20 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d44ee:	f001 fcf7 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44f2:	2208      	movs	r2, #8
   d44f4:	7a21      	ldrb	r1, [r4, #8]
   d44f6:	f000 fd05 	bl	d4f04 <_ZN7TwoWire11requestFromEhj>
  sernum_a = Wire.read();
   d44fa:	f001 fcf1 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d44fe:	6803      	ldr	r3, [r0, #0]
   d4500:	695b      	ldr	r3, [r3, #20]
   d4502:	4798      	blx	r3
   d4504:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4506:	f001 fceb 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d450a:	6803      	ldr	r3, [r0, #0]
   d450c:	695b      	ldr	r3, [r3, #20]
   d450e:	4798      	blx	r3
  sernum_a <<= 8;
   d4510:	6823      	ldr	r3, [r4, #0]
   d4512:	021b      	lsls	r3, r3, #8
   d4514:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4516:	f001 fce3 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d451a:	6803      	ldr	r3, [r0, #0]
   d451c:	695b      	ldr	r3, [r3, #20]
   d451e:	4798      	blx	r3
   d4520:	6823      	ldr	r3, [r4, #0]
   d4522:	4318      	orrs	r0, r3
   d4524:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4526:	f001 fcdb 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d452a:	6803      	ldr	r3, [r0, #0]
   d452c:	695b      	ldr	r3, [r3, #20]
   d452e:	4798      	blx	r3
  sernum_a <<= 8;
   d4530:	6823      	ldr	r3, [r4, #0]
   d4532:	021b      	lsls	r3, r3, #8
   d4534:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4536:	f001 fcd3 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d453a:	6803      	ldr	r3, [r0, #0]
   d453c:	695b      	ldr	r3, [r3, #20]
   d453e:	4798      	blx	r3
   d4540:	6823      	ldr	r3, [r4, #0]
   d4542:	4318      	orrs	r0, r3
   d4544:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4546:	f001 fccb 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d454a:	6803      	ldr	r3, [r0, #0]
   d454c:	695b      	ldr	r3, [r3, #20]
   d454e:	4798      	blx	r3
  sernum_a <<= 8;
   d4550:	6823      	ldr	r3, [r4, #0]
   d4552:	021b      	lsls	r3, r3, #8
   d4554:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4556:	f001 fcc3 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d455a:	6803      	ldr	r3, [r0, #0]
   d455c:	695b      	ldr	r3, [r3, #20]
   d455e:	4798      	blx	r3
   d4560:	6823      	ldr	r3, [r4, #0]
   d4562:	4318      	orrs	r0, r3
   d4564:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4566:	f001 fcbb 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d456a:	6803      	ldr	r3, [r0, #0]
   d456c:	695b      	ldr	r3, [r3, #20]
   d456e:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d4570:	f001 fcb6 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4574:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4578:	f000 fccb 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d457c:	f001 fcb0 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4580:	2100      	movs	r1, #0
   d4582:	f7ff fed9 	bl	d4338 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d4586:	f001 fcab 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d458a:	21c9      	movs	r1, #201	; 0xc9
   d458c:	f7ff fed4 	bl	d4338 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4590:	f001 fca6 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4594:	f000 fcc4 	bl	d4f20 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4598:	f001 fca2 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d459c:	7a21      	ldrb	r1, [r4, #8]
   d459e:	2208      	movs	r2, #8
   d45a0:	f000 fcb0 	bl	d4f04 <_ZN7TwoWire11requestFromEhj>
  sernum_b = Wire.read();
   d45a4:	f001 fc9c 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45a8:	6803      	ldr	r3, [r0, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	4798      	blx	r3
   d45ae:	6060      	str	r0, [r4, #4]
  Wire.read();
   d45b0:	f001 fc96 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45b4:	6803      	ldr	r3, [r0, #0]
   d45b6:	695b      	ldr	r3, [r3, #20]
   d45b8:	4798      	blx	r3
  sernum_b <<= 8;
   d45ba:	6863      	ldr	r3, [r4, #4]
   d45bc:	021b      	lsls	r3, r3, #8
   d45be:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d45c0:	f001 fc8e 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45c4:	6803      	ldr	r3, [r0, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	4798      	blx	r3
   d45ca:	6863      	ldr	r3, [r4, #4]
   d45cc:	4318      	orrs	r0, r3
   d45ce:	6060      	str	r0, [r4, #4]
  Wire.read();
   d45d0:	f001 fc86 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45d4:	6803      	ldr	r3, [r0, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	4798      	blx	r3
  sernum_b <<= 8;
   d45da:	6863      	ldr	r3, [r4, #4]
   d45dc:	021b      	lsls	r3, r3, #8
   d45de:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d45e0:	f001 fc7e 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45e4:	6803      	ldr	r3, [r0, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	4798      	blx	r3
   d45ea:	6863      	ldr	r3, [r4, #4]
   d45ec:	4318      	orrs	r0, r3
   d45ee:	6060      	str	r0, [r4, #4]
  Wire.read();
   d45f0:	f001 fc76 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d45f4:	6803      	ldr	r3, [r0, #0]
   d45f6:	695b      	ldr	r3, [r3, #20]
   d45f8:	4798      	blx	r3
  sernum_b <<= 8;
   d45fa:	6863      	ldr	r3, [r4, #4]
   d45fc:	021b      	lsls	r3, r3, #8
   d45fe:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4600:	f001 fc6e 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4604:	6803      	ldr	r3, [r0, #0]
   d4606:	695b      	ldr	r3, [r3, #20]
   d4608:	4798      	blx	r3
   d460a:	6863      	ldr	r3, [r4, #4]
   d460c:	4318      	orrs	r0, r3
   d460e:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4610:	f001 fc66 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4614:	6803      	ldr	r3, [r0, #0]
}
   d4616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d461a:	695b      	ldr	r3, [r3, #20]
   d461c:	4718      	bx	r3

000d461e <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d461e:	b538      	push	{r3, r4, r5, lr}
   d4620:	4604      	mov	r4, r0
   d4622:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d4624:	f001 fc5c 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4628:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d462c:	f000 fc71 	bl	d4f12 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d4630:	f001 fc56 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4634:	6803      	ldr	r3, [r0, #0]
   d4636:	4629      	mov	r1, r5
   d4638:	689b      	ldr	r3, [r3, #8]
   d463a:	4798      	blx	r3
  Wire.endTransmission(false);
   d463c:	f001 fc50 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4640:	2100      	movs	r1, #0
   d4642:	f000 fc69 	bl	d4f18 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d4646:	f001 fc4b 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d464a:	2201      	movs	r2, #1
   d464c:	7a21      	ldrb	r1, [r4, #8]
   d464e:	f000 fc59 	bl	d4f04 <_ZN7TwoWire11requestFromEhj>
  value = Wire.read();
   d4652:	f001 fc45 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4656:	6803      	ldr	r3, [r0, #0]
   d4658:	695b      	ldr	r3, [r3, #20]
   d465a:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d465c:	b2c0      	uxtb	r0, r0
   d465e:	bd38      	pop	{r3, r4, r5, pc}

000d4660 <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d4660:	b510      	push	{r4, lr}
   d4662:	4604      	mov	r4, r0
  Wire.begin();
   d4664:	f001 fc3c 	bl	d5ee0 <_Z19__fetch_global_Wirev>
   d4668:	f000 fc18 	bl	d4e9c <_ZN7TwoWire5beginEv>

  reset();
   d466c:	4620      	mov	r0, r4
   d466e:	f7ff ff11 	bl	d4494 <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4672:	21e7      	movs	r1, #231	; 0xe7
   d4674:	4620      	mov	r0, r4
   d4676:	f7ff ffd2 	bl	d461e <_ZN15Adafruit_Si702113readRegister8Eh>
   d467a:	283a      	cmp	r0, #58	; 0x3a
   d467c:	d104      	bne.n	d4688 <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff ff1f 	bl	d44c2 <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d4684:	2001      	movs	r0, #1
   d4686:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4688:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d468a:	bd10      	pop	{r4, pc}

000d468c <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
   d468c:	f000 b908 	b.w	d48a0 <HAL_Pin_Map>

000d4690 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_USB_USART_Init+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	681b      	ldr	r3, [r3, #0]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003024c 	.word	0x0003024c

000d46a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_USB_USART_Available_Data+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	691b      	ldr	r3, [r3, #16]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003024c 	.word	0x0003024c

000d46b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	695b      	ldr	r3, [r3, #20]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003024c 	.word	0x0003024c

000d46c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_USB_USART_Receive_Data+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	699b      	ldr	r3, [r3, #24]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003024c 	.word	0x0003024c

000d46d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_USB_USART_Send_Data+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	69db      	ldr	r3, [r3, #28]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003024c 	.word	0x0003024c

000d46e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USB_USART_Flush_Data+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6a1b      	ldr	r3, [r3, #32]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003024c 	.word	0x0003024c

000d46f0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_I2C_Begin+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	68db      	ldr	r3, [r3, #12]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030228 	.word	0x00030228

000d4700 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_I2C_Begin_Transmission+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	699b      	ldr	r3, [r3, #24]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030228 	.word	0x00030228

000d4710 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_I2C_End_Transmission+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	69db      	ldr	r3, [r3, #28]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030228 	.word	0x00030228

000d4720 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_I2C_Write_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a1b      	ldr	r3, [r3, #32]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030228 	.word	0x00030228

000d4730 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_I2C_Available_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030228 	.word	0x00030228

000d4740 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_I2C_Read_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030228 	.word	0x00030228

000d4750 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_I2C_Peek_Data+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030228 	.word	0x00030228

000d4760 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_I2C_Flush_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030228 	.word	0x00030228

000d4770 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_I2C_Init+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030228 	.word	0x00030228

000d4780 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_I2C_Request_Data_Ex+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030228 	.word	0x00030228

000d4790 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USART_Init+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	681b      	ldr	r3, [r3, #0]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003023c 	.word	0x0003023c

000d47a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USART_Write_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	68db      	ldr	r3, [r3, #12]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003023c 	.word	0x0003023c

000d47b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USART_Available_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	691b      	ldr	r3, [r3, #16]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003023c 	.word	0x0003023c

000d47c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USART_Read_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	695b      	ldr	r3, [r3, #20]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003023c 	.word	0x0003023c

000d47d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USART_Peek_Data+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	699b      	ldr	r3, [r3, #24]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USART_Flush_Data+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	69db      	ldr	r3, [r3, #28]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USART_Available_Data_For_Write+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <inet_inet_ntop+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	695b      	ldr	r3, [r3, #20]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030264 	.word	0x00030264

000d4810 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <os_thread_is_current+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	689b      	ldr	r3, [r3, #8]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030248 	.word	0x00030248

000d4820 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <os_thread_join+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	691b      	ldr	r3, [r3, #16]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030248 	.word	0x00030248

000d4830 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <os_thread_cleanup+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	695b      	ldr	r3, [r3, #20]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030248 	.word	0x00030248

000d4840 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <os_mutex_recursive_create+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030248 	.word	0x00030248

000d4850 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <os_mutex_recursive_destroy+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030248 	.word	0x00030248

000d4860 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_RNG_GetRandomNumber+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	685b      	ldr	r3, [r3, #4]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030218 	.word	0x00030218

000d4870 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	695b      	ldr	r3, [r3, #20]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030218 	.word	0x00030218

000d4880 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_RTC_Get_UnixTime+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	69db      	ldr	r3, [r3, #28]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030218 	.word	0x00030218

000d4890 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_RTC_Time_Is_Valid+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030218 	.word	0x00030218

000d48a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_Pin_Map+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	681b      	ldr	r3, [r3, #0]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003022c 	.word	0x0003022c

000d48b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <netdb_freeaddrinfo+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	689b      	ldr	r3, [r3, #8]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030268 	.word	0x00030268

000d48c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <netdb_getaddrinfo+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	68db      	ldr	r3, [r3, #12]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030268 	.word	0x00030268

000d48d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <log_message+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030260 	.word	0x00030260

000d48e0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <spark_process+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	689b      	ldr	r3, [r3, #8]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030244 	.word	0x00030244

000d48f0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <spark_cloud_flag_connected+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	695b      	ldr	r3, [r3, #20]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030244 	.word	0x00030244

000d4900 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <spark_send_event+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6a1b      	ldr	r3, [r3, #32]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030244 	.word	0x00030244

000d4910 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <spark_sync_time_pending+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030244 	.word	0x00030244

000d4920 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030244 	.word	0x00030244

000d4930 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <network_connect+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	685b      	ldr	r3, [r3, #4]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030240 	.word	0x00030240

000d4940 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <network_connecting+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	689b      	ldr	r3, [r3, #8]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030240 	.word	0x00030240

000d4950 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <network_disconnect+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	68db      	ldr	r3, [r3, #12]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030240 	.word	0x00030240

000d4960 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <network_ready+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	691b      	ldr	r3, [r3, #16]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030240 	.word	0x00030240

000d4970 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <network_on+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	695b      	ldr	r3, [r3, #20]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030240 	.word	0x00030240

000d4980 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <network_off+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	699b      	ldr	r3, [r3, #24]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030240 	.word	0x00030240

000d4990 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <network_listen+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	69db      	ldr	r3, [r3, #28]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030240 	.word	0x00030240

000d49a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <network_listening+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a1b      	ldr	r3, [r3, #32]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030240 	.word	0x00030240

000d49b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_set_listen_timeout+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_get_listen_timeout+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <system_mode+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	681b      	ldr	r3, [r3, #0]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030220 	.word	0x00030220

000d49e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <set_system_mode+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	685b      	ldr	r3, [r3, #4]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030220 	.word	0x00030220

000d49f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <system_delay_ms+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030220 	.word	0x00030220

000d4a00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <application_thread_current+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030220 	.word	0x00030220

000d4a10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <application_thread_invoke+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030220 	.word	0x00030220

000d4a20 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <system_thread_get_state+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030220 	.word	0x00030220

000d4a30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b03      	ldr	r3, [pc, #12]	; (d4a40 <system_ctrl_set_app_request_handler+0x10>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a3a:	9301      	str	r3, [sp, #4]
   d4a3c:	bd08      	pop	{r3, pc}
   d4a3e:	0000      	.short	0x0000
   d4a40:	00030220 	.word	0x00030220

000d4a44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b03      	ldr	r3, [pc, #12]	; (d4a54 <system_ctrl_set_result+0x10>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a4e:	9301      	str	r3, [sp, #4]
   d4a50:	bd08      	pop	{r3, pc}
   d4a52:	0000      	.short	0x0000
   d4a54:	00030220 	.word	0x00030220

000d4a58 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b03      	ldr	r3, [pc, #12]	; (d4a68 <system_sleep_ext+0x10>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4a62:	9301      	str	r3, [sp, #4]
   d4a64:	bd08      	pop	{r3, pc}
   d4a66:	0000      	.short	0x0000
   d4a68:	00030220 	.word	0x00030220

000d4a6c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <malloc+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	681b      	ldr	r3, [r3, #0]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003021c 	.word	0x0003021c

000d4a7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <free+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	685b      	ldr	r3, [r3, #4]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003021c 	.word	0x0003021c

000d4a8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <realloc+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	689b      	ldr	r3, [r3, #8]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003021c 	.word	0x0003021c

000d4a9c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <siscanf+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	699b      	ldr	r3, [r3, #24]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003021c 	.word	0x0003021c

000d4aac <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <abort+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003021c 	.word	0x0003021c

000d4abc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <_malloc_r+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003021c 	.word	0x0003021c

000d4acc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4acc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ace:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ad0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ad2:	b113      	cbz	r3, d4ada <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ad4:	2203      	movs	r2, #3
   d4ad6:	4601      	mov	r1, r0
   d4ad8:	4798      	blx	r3
    }
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd10      	pop	{r4, pc}

000d4ade <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ade:	2300      	movs	r3, #0
   d4ae0:	461a      	mov	r2, r3
   d4ae2:	6840      	ldr	r0, [r0, #4]
   d4ae4:	f7ff bf24 	b.w	d4930 <network_connect>

000d4ae8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4ae8:	2200      	movs	r2, #0
   d4aea:	2102      	movs	r1, #2
   d4aec:	6840      	ldr	r0, [r0, #4]
   d4aee:	f7ff bf2f 	b.w	d4950 <network_disconnect>

000d4af2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4af2:	2200      	movs	r2, #0
   d4af4:	4611      	mov	r1, r2
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	f7ff bf22 	b.w	d4940 <network_connecting>

000d4afc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4afc:	2200      	movs	r2, #0
   d4afe:	4611      	mov	r1, r2
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f7ff bf2d 	b.w	d4960 <network_ready>

000d4b06 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4b06:	2300      	movs	r3, #0
   d4b08:	461a      	mov	r2, r3
   d4b0a:	4619      	mov	r1, r3
   d4b0c:	6840      	ldr	r0, [r0, #4]
   d4b0e:	f7ff bf2f 	b.w	d4970 <network_on>

000d4b12 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4b12:	2300      	movs	r3, #0
   d4b14:	461a      	mov	r2, r3
   d4b16:	4619      	mov	r1, r3
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	f7ff bf31 	b.w	d4980 <network_off>

000d4b1e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4b1e:	2200      	movs	r2, #0
   d4b20:	f081 0101 	eor.w	r1, r1, #1
   d4b24:	6840      	ldr	r0, [r0, #4]
   d4b26:	f7ff bf33 	b.w	d4990 <network_listen>

000d4b2a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	6840      	ldr	r0, [r0, #4]
   d4b2e:	f7ff bf3f 	b.w	d49b0 <network_set_listen_timeout>

000d4b32 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4b32:	2200      	movs	r2, #0
   d4b34:	4611      	mov	r1, r2
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	f7ff bf42 	b.w	d49c0 <network_get_listen_timeout>

000d4b3c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	4611      	mov	r1, r2
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	f7ff bf2d 	b.w	d49a0 <network_listening>

000d4b46 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b4a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b4c:	b095      	sub	sp, #84	; 0x54
   d4b4e:	4616      	mov	r6, r2
   d4b50:	460d      	mov	r5, r1
   d4b52:	4607      	mov	r7, r0
    IPAddress addr;
   d4b54:	f000 fb3e 	bl	d51d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4b58:	4621      	mov	r1, r4
   d4b5a:	2220      	movs	r2, #32
   d4b5c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b5e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4b60:	f002 f87b 	bl	d6c5a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4b64:	2340      	movs	r3, #64	; 0x40
   d4b66:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4b68:	4621      	mov	r1, r4
   d4b6a:	466b      	mov	r3, sp
   d4b6c:	aa0c      	add	r2, sp, #48	; 0x30
   d4b6e:	4630      	mov	r0, r6
   d4b70:	f7ff fea6 	bl	d48c0 <netdb_getaddrinfo>
    if (!r) {
   d4b74:	4604      	mov	r4, r0
   d4b76:	2800      	cmp	r0, #0
   d4b78:	d144      	bne.n	d4c04 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b7a:	4602      	mov	r2, r0
   d4b7c:	2101      	movs	r1, #1
   d4b7e:	6868      	ldr	r0, [r5, #4]
   d4b80:	f7ff feee 	bl	d4960 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b84:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b86:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b88:	4622      	mov	r2, r4
   d4b8a:	6868      	ldr	r0, [r5, #4]
   d4b8c:	f7ff fee8 	bl	d4960 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b90:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b92:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4b94:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b96:	2e00      	cmp	r6, #0
   d4b98:	d034      	beq.n	d4c04 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4b9a:	2900      	cmp	r1, #0
   d4b9c:	d132      	bne.n	d4c04 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4b9e:	6873      	ldr	r3, [r6, #4]
   d4ba0:	2b02      	cmp	r3, #2
   d4ba2:	d002      	beq.n	d4baa <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4ba4:	2b0a      	cmp	r3, #10
   d4ba6:	d009      	beq.n	d4bbc <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4ba8:	e02a      	b.n	d4c00 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4baa:	f1b8 0f00 	cmp.w	r8, #0
   d4bae:	d027      	beq.n	d4c00 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4bb0:	6971      	ldr	r1, [r6, #20]
   d4bb2:	4638      	mov	r0, r7
   d4bb4:	3104      	adds	r1, #4
   d4bb6:	f000 fb3a 	bl	d522e <_ZN9IPAddressaSEPKh>
   d4bba:	e020      	b.n	d4bfe <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4bbc:	f1b9 0f00 	cmp.w	r9, #0
   d4bc0:	d01e      	beq.n	d4c00 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4bc2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4bc4:	2211      	movs	r2, #17
   d4bc6:	a801      	add	r0, sp, #4
   d4bc8:	f002 f847 	bl	d6c5a <memset>
                    a.v = 6;
   d4bcc:	2306      	movs	r3, #6
   d4bce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4bd2:	ad01      	add	r5, sp, #4
   d4bd4:	f104 0308 	add.w	r3, r4, #8
   d4bd8:	3418      	adds	r4, #24
   d4bda:	6818      	ldr	r0, [r3, #0]
   d4bdc:	6859      	ldr	r1, [r3, #4]
   d4bde:	462a      	mov	r2, r5
   d4be0:	c203      	stmia	r2!, {r0, r1}
   d4be2:	3308      	adds	r3, #8
   d4be4:	42a3      	cmp	r3, r4
   d4be6:	4615      	mov	r5, r2
   d4be8:	d1f7      	bne.n	d4bda <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4bea:	a901      	add	r1, sp, #4
   d4bec:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4bee:	ad07      	add	r5, sp, #28
   d4bf0:	f000 fafe 	bl	d51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bf6:	1d3c      	adds	r4, r7, #4
   d4bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4bfa:	682b      	ldr	r3, [r5, #0]
   d4bfc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4bfe:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c00:	69f6      	ldr	r6, [r6, #28]
   d4c02:	e7c8      	b.n	d4b96 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4c04:	9800      	ldr	r0, [sp, #0]
   d4c06:	f7ff fe53 	bl	d48b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4c0a:	4638      	mov	r0, r7
   d4c0c:	b015      	add	sp, #84	; 0x54
   d4c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4c14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c14:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4c16:	4a03      	ldr	r2, [pc, #12]	; (d4c24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4c18:	601a      	str	r2, [r3, #0]
   d4c1a:	2200      	movs	r2, #0
   d4c1c:	605a      	str	r2, [r3, #4]
   d4c1e:	4770      	bx	lr
   d4c20:	2003e384 	.word	0x2003e384
   d4c24:	000d74e8 	.word	0x000d74e8

000d4c28 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c28:	2200      	movs	r2, #0
   d4c2a:	4611      	mov	r1, r2
   d4c2c:	6840      	ldr	r0, [r0, #4]
   d4c2e:	f7ff beb7 	b.w	d49a0 <network_listening>

000d4c32 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c32:	2200      	movs	r2, #0
   d4c34:	4611      	mov	r1, r2
   d4c36:	6840      	ldr	r0, [r0, #4]
   d4c38:	f7ff bec2 	b.w	d49c0 <network_get_listen_timeout>

000d4c3c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	6840      	ldr	r0, [r0, #4]
   d4c40:	f7ff beb6 	b.w	d49b0 <network_set_listen_timeout>

000d4c44 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c44:	2200      	movs	r2, #0
   d4c46:	f081 0101 	eor.w	r1, r1, #1
   d4c4a:	6840      	ldr	r0, [r0, #4]
   d4c4c:	f7ff bea0 	b.w	d4990 <network_listen>

000d4c50 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4c50:	2300      	movs	r3, #0
   d4c52:	461a      	mov	r2, r3
   d4c54:	2101      	movs	r1, #1
   d4c56:	6840      	ldr	r0, [r0, #4]
   d4c58:	f7ff be92 	b.w	d4980 <network_off>

000d4c5c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c5c:	2300      	movs	r3, #0
   d4c5e:	461a      	mov	r2, r3
   d4c60:	4619      	mov	r1, r3
   d4c62:	6840      	ldr	r0, [r0, #4]
   d4c64:	f7ff be84 	b.w	d4970 <network_on>

000d4c68 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	4611      	mov	r1, r2
   d4c6c:	6840      	ldr	r0, [r0, #4]
   d4c6e:	f7ff be77 	b.w	d4960 <network_ready>

000d4c72 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c72:	2200      	movs	r2, #0
   d4c74:	4611      	mov	r1, r2
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff be62 	b.w	d4940 <network_connecting>

000d4c7c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	2102      	movs	r1, #2
   d4c80:	6840      	ldr	r0, [r0, #4]
   d4c82:	f7ff be65 	b.w	d4950 <network_disconnect>

000d4c86 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c86:	2300      	movs	r3, #0
   d4c88:	461a      	mov	r2, r3
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff be50 	b.w	d4930 <network_connect>

000d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c90:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c92:	4605      	mov	r5, r0
   d4c94:	b188      	cbz	r0, d4cba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c96:	6804      	ldr	r4, [r0, #0]
   d4c98:	b14c      	cbz	r4, d4cae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4c9a:	68a3      	ldr	r3, [r4, #8]
   d4c9c:	b11b      	cbz	r3, d4ca6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c9e:	2203      	movs	r2, #3
   d4ca0:	4621      	mov	r1, r4
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ca6:	2110      	movs	r1, #16
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f001 f94d 	bl	d5f48 <_ZdlPvj>
   d4cae:	4628      	mov	r0, r5
   d4cb0:	2114      	movs	r1, #20
      }
   d4cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cb6:	f001 b947 	b.w	d5f48 <_ZdlPvj>
   d4cba:	bd38      	pop	{r3, r4, r5, pc}

000d4cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4cbc:	b110      	cbz	r0, d4cc4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4cbe:	6803      	ldr	r3, [r0, #0]
   d4cc0:	685b      	ldr	r3, [r3, #4]
   d4cc2:	4718      	bx	r3
   d4cc4:	4770      	bx	lr

000d4cc6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4cc6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cc8:	6803      	ldr	r3, [r0, #0]
   d4cca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ccc:	b1bb      	cbz	r3, d4cfe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4cce:	6858      	ldr	r0, [r3, #4]
   d4cd0:	f7ff fd9e 	bl	d4810 <os_thread_is_current>
   d4cd4:	b978      	cbnz	r0, d4cf6 <_ZN6ThreadD1Ev+0x30>
   d4cd6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4cd8:	7c5a      	ldrb	r2, [r3, #17]
   d4cda:	b912      	cbnz	r2, d4ce2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4cdc:	6858      	ldr	r0, [r3, #4]
   d4cde:	f7ff fd9f 	bl	d4820 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ce2:	6823      	ldr	r3, [r4, #0]
   d4ce4:	6858      	ldr	r0, [r3, #4]
   d4ce6:	f7ff fda3 	bl	d4830 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4cec:	2300      	movs	r3, #0
   d4cee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cf0:	b128      	cbz	r0, d4cfe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4cf2:	f7ff ffcd 	bl	d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cf6:	6820      	ldr	r0, [r4, #0]
   d4cf8:	b108      	cbz	r0, d4cfe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4cfa:	f7ff ffc9 	bl	d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4cfe:	4620      	mov	r0, r4
   d4d00:	bd10      	pop	{r4, pc}

000d4d02 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4d02:	b538      	push	{r3, r4, r5, lr}
   d4d04:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d06:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4d0a:	b108      	cbz	r0, d4d10 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4d0c:	f7ff f9c9 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d10:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4d14:	b108      	cbz	r0, d4d1a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4d16:	f7ff fd9b 	bl	d4850 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d1a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4d1e:	b135      	cbz	r5, d4d2e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d20:	4628      	mov	r0, r5
   d4d22:	f7ff ffd0 	bl	d4cc6 <_ZN6ThreadD1Ev>
   d4d26:	2104      	movs	r1, #4
   d4d28:	4628      	mov	r0, r5
   d4d2a:	f001 f90d 	bl	d5f48 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d2e:	6820      	ldr	r0, [r4, #0]
   d4d30:	b108      	cbz	r0, d4d36 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4d32:	f7ff ffc3 	bl	d4cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4d36:	4620      	mov	r0, r4
   d4d38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d3c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	4b04      	ldr	r3, [pc, #16]	; (d4d50 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4d40:	4604      	mov	r4, r0
   d4d42:	f840 3b08 	str.w	r3, [r0], #8
   d4d46:	f7ff ffdc 	bl	d4d02 <_ZN5spark11MeshPublishD1Ev>
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	bd10      	pop	{r4, pc}
   d4d4e:	bf00      	nop
   d4d50:	000d751c 	.word	0x000d751c

000d4d54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d54:	b538      	push	{r3, r4, r5, lr}
   d4d56:	4c0e      	ldr	r4, [pc, #56]	; (d4d90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4d58:	4b0e      	ldr	r3, [pc, #56]	; (d4d94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4d5a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d5c:	2500      	movs	r5, #0
   d4d5e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d60:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4d64:	6063      	str	r3, [r4, #4]
   d4d66:	60a5      	str	r5, [r4, #8]
   d4d68:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d6c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4d70:	f7ff fd66 	bl	d4840 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4d74:	4b08      	ldr	r3, [pc, #32]	; (d4d98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4d76:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d7a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4d7e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4d80:	4620      	mov	r0, r4
   d4d82:	4a06      	ldr	r2, [pc, #24]	; (d4d9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4d84:	4906      	ldr	r1, [pc, #24]	; (d4da0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4d8a:	f001 b8cf 	b.w	d5f2c <__aeabi_atexit>
   d4d8e:	bf00      	nop
   d4d90:	2003e38c 	.word	0x2003e38c
   d4d94:	000d74e8 	.word	0x000d74e8
   d4d98:	000d751c 	.word	0x000d751c
   d4d9c:	2003e354 	.word	0x2003e354
   d4da0:	000d4d3d 	.word	0x000d4d3d

000d4da4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4da4:	2200      	movs	r2, #0
   d4da6:	4611      	mov	r1, r2
   d4da8:	6840      	ldr	r0, [r0, #4]
   d4daa:	f7ff bdd9 	b.w	d4960 <network_ready>

000d4dae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4dae:	2200      	movs	r2, #0
   d4db0:	4611      	mov	r1, r2
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	f7ff bdf4 	b.w	d49a0 <network_listening>

000d4db8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4db8:	2200      	movs	r2, #0
   d4dba:	4611      	mov	r1, r2
   d4dbc:	6840      	ldr	r0, [r0, #4]
   d4dbe:	f7ff bdff 	b.w	d49c0 <network_get_listen_timeout>

000d4dc2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4dc2:	2200      	movs	r2, #0
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	f7ff bdf3 	b.w	d49b0 <network_set_listen_timeout>

000d4dca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dca:	2200      	movs	r2, #0
   d4dcc:	f081 0101 	eor.w	r1, r1, #1
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	f7ff bddd 	b.w	d4990 <network_listen>

000d4dd6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	461a      	mov	r2, r3
   d4dda:	4619      	mov	r1, r3
   d4ddc:	6840      	ldr	r0, [r0, #4]
   d4dde:	f7ff bdcf 	b.w	d4980 <network_off>

000d4de2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4de2:	2300      	movs	r3, #0
   d4de4:	461a      	mov	r2, r3
   d4de6:	4619      	mov	r1, r3
   d4de8:	6840      	ldr	r0, [r0, #4]
   d4dea:	f7ff bdc1 	b.w	d4970 <network_on>

000d4dee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dee:	2200      	movs	r2, #0
   d4df0:	4611      	mov	r1, r2
   d4df2:	6840      	ldr	r0, [r0, #4]
   d4df4:	f7ff bda4 	b.w	d4940 <network_connecting>

000d4df8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4df8:	2200      	movs	r2, #0
   d4dfa:	2102      	movs	r1, #2
   d4dfc:	6840      	ldr	r0, [r0, #4]
   d4dfe:	f7ff bda7 	b.w	d4950 <network_disconnect>

000d4e02 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e02:	2300      	movs	r3, #0
   d4e04:	461a      	mov	r2, r3
   d4e06:	6840      	ldr	r0, [r0, #4]
   d4e08:	f7ff bd92 	b.w	d4930 <network_connect>

000d4e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4e0c:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4e0e:	2204      	movs	r2, #4
   d4e10:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4e12:	4a02      	ldr	r2, [pc, #8]	; (d4e1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4e14:	601a      	str	r2, [r3, #0]
   d4e16:	4770      	bx	lr
   d4e18:	2003e560 	.word	0x2003e560
   d4e1c:	000d7550 	.word	0x000d7550

000d4e20 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4e20:	4770      	bx	lr

000d4e22 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e24:	4606      	mov	r6, r0
   d4e26:	4615      	mov	r5, r2
   d4e28:	460c      	mov	r4, r1
   d4e2a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e2c:	42bc      	cmp	r4, r7
   d4e2e:	d006      	beq.n	d4e3e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e30:	6833      	ldr	r3, [r6, #0]
   d4e32:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e36:	689b      	ldr	r3, [r3, #8]
   d4e38:	4630      	mov	r0, r6
   d4e3a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e3c:	e7f6      	b.n	d4e2c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e3e:	4628      	mov	r0, r5
   d4e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e42 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e42:	2200      	movs	r2, #0
   d4e44:	7c00      	ldrb	r0, [r0, #16]
   d4e46:	f7ff bc6b 	b.w	d4720 <HAL_I2C_Write_Data>

000d4e4a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e4a:	2100      	movs	r1, #0
   d4e4c:	7c00      	ldrb	r0, [r0, #16]
   d4e4e:	f7ff bc6f 	b.w	d4730 <HAL_I2C_Available_Data>

000d4e52 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e52:	2100      	movs	r1, #0
   d4e54:	7c00      	ldrb	r0, [r0, #16]
   d4e56:	f7ff bc73 	b.w	d4740 <HAL_I2C_Read_Data>

000d4e5a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e5a:	2100      	movs	r1, #0
   d4e5c:	7c00      	ldrb	r0, [r0, #16]
   d4e5e:	f7ff bc77 	b.w	d4750 <HAL_I2C_Peek_Data>

000d4e62 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e62:	2100      	movs	r1, #0
   d4e64:	7c00      	ldrb	r0, [r0, #16]
   d4e66:	f7ff bc7b 	b.w	d4760 <HAL_I2C_Flush_Data>

000d4e6a <_ZN7TwoWireD0Ev>:
   d4e6a:	b510      	push	{r4, lr}
   d4e6c:	2114      	movs	r1, #20
   d4e6e:	4604      	mov	r4, r0
   d4e70:	f001 f86a 	bl	d5f48 <_ZdlPvj>
   d4e74:	4620      	mov	r0, r4
   d4e76:	bd10      	pop	{r4, pc}

000d4e78 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e78:	b510      	push	{r4, lr}
   d4e7a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e7c:	2300      	movs	r3, #0
   d4e7e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e84:	60a3      	str	r3, [r4, #8]
   d4e86:	4b04      	ldr	r3, [pc, #16]	; (d4e98 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4e88:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e8a:	4608      	mov	r0, r1
   d4e8c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4e8e:	4611      	mov	r1, r2
   d4e90:	f7ff fc6e 	bl	d4770 <HAL_I2C_Init>
}
   d4e94:	4620      	mov	r0, r4
   d4e96:	bd10      	pop	{r4, pc}
   d4e98:	000d7584 	.word	0x000d7584

000d4e9c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4e9c:	2300      	movs	r3, #0
   d4e9e:	461a      	mov	r2, r3
   d4ea0:	4619      	mov	r1, r3
   d4ea2:	7c00      	ldrb	r0, [r0, #16]
   d4ea4:	f7ff bc24 	b.w	d46f0 <HAL_I2C_Begin>

000d4ea8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4ea8:	b570      	push	{r4, r5, r6, lr}
   d4eaa:	460c      	mov	r4, r1
   d4eac:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4eae:	2514      	movs	r5, #20
   d4eb0:	4606      	mov	r6, r0
   d4eb2:	462a      	mov	r2, r5
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	a801      	add	r0, sp, #4
   d4eb8:	f001 fecf 	bl	d6c5a <memset>
   d4ebc:	7823      	ldrb	r3, [r4, #0]
   d4ebe:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ec2:	6863      	ldr	r3, [r4, #4]
   d4ec4:	9303      	str	r3, [sp, #12]
   d4ec6:	68e3      	ldr	r3, [r4, #12]
   d4ec8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4eca:	2200      	movs	r2, #0
   d4ecc:	7a23      	ldrb	r3, [r4, #8]
   d4ece:	7c30      	ldrb	r0, [r6, #16]
   d4ed0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4ed4:	a901      	add	r1, sp, #4
   d4ed6:	9305      	str	r3, [sp, #20]
   d4ed8:	f7ff fc52 	bl	d4780 <HAL_I2C_Request_Data_Ex>
}
   d4edc:	b006      	add	sp, #24
   d4ede:	bd70      	pop	{r4, r5, r6, pc}

000d4ee0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4ee2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4ee4:	f88d 1000 	strb.w	r1, [sp]
   d4ee8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4eec:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4eee:	bf18      	it	ne
   d4ef0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4ef2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4ef4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4ef6:	f88d 3008 	strb.w	r3, [sp, #8]
   d4efa:	f7ff ffd5 	bl	d4ea8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4efe:	b005      	add	sp, #20
   d4f00:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f04 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4f04:	2301      	movs	r3, #1
   d4f06:	f7ff bfeb 	b.w	d4ee0 <_ZN7TwoWire11requestFromEhjh>

000d4f0a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4f0a:	2200      	movs	r2, #0
   d4f0c:	7c00      	ldrb	r0, [r0, #16]
   d4f0e:	f7ff bbf7 	b.w	d4700 <HAL_I2C_Begin_Transmission>

000d4f12 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4f12:	b2c9      	uxtb	r1, r1
   d4f14:	f7ff bff9 	b.w	d4f0a <_ZN7TwoWire17beginTransmissionEh>

000d4f18 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4f18:	2200      	movs	r2, #0
   d4f1a:	7c00      	ldrb	r0, [r0, #16]
   d4f1c:	f7ff bbf8 	b.w	d4710 <HAL_I2C_End_Transmission>

000d4f20 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4f20:	2101      	movs	r1, #1
   d4f22:	f7ff bff9 	b.w	d4f18 <_ZN7TwoWire15endTransmissionEh>

000d4f26 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4f26:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f28:	6883      	ldr	r3, [r0, #8]
   d4f2a:	4604      	mov	r4, r0
   d4f2c:	b90b      	cbnz	r3, d4f32 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4f2e:	f001 f81e 	bl	d5f6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f32:	68c3      	ldr	r3, [r0, #12]
   d4f34:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4f36:	68a3      	ldr	r3, [r4, #8]
   d4f38:	b11b      	cbz	r3, d4f42 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f3a:	2203      	movs	r2, #3
   d4f3c:	4621      	mov	r1, r4
   d4f3e:	4620      	mov	r0, r4
   d4f40:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4f42:	4620      	mov	r0, r4
   d4f44:	2110      	movs	r1, #16
}
   d4f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4f4a:	f000 bffd 	b.w	d5f48 <_ZdlPvj>

000d4f4e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4f4e:	4770      	bx	lr

000d4f50 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f50:	7441      	strb	r1, [r0, #17]
   d4f52:	4770      	bx	lr

000d4f54 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4f54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4f56:	7c00      	ldrb	r0, [r0, #16]
   d4f58:	f7ff fc4a 	bl	d47f0 <HAL_USART_Available_Data_For_Write>
}
   d4f5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f60:	bd08      	pop	{r3, pc}

000d4f62 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4f62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4f64:	7c00      	ldrb	r0, [r0, #16]
   d4f66:	f7ff fc23 	bl	d47b0 <HAL_USART_Available_Data>
}
   d4f6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f6e:	bd08      	pop	{r3, pc}

000d4f70 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4f70:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4f72:	7c00      	ldrb	r0, [r0, #16]
   d4f74:	f7ff fc2c 	bl	d47d0 <HAL_USART_Peek_Data>
}
   d4f78:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f7c:	bf28      	it	cs
   d4f7e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f82:	bd08      	pop	{r3, pc}

000d4f84 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4f84:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4f86:	7c00      	ldrb	r0, [r0, #16]
   d4f88:	f7ff fc1a 	bl	d47c0 <HAL_USART_Read_Data>
}
   d4f8c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f90:	bf28      	it	cs
   d4f92:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f96:	bd08      	pop	{r3, pc}

000d4f98 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4f98:	7c00      	ldrb	r0, [r0, #16]
   d4f9a:	f7ff bc21 	b.w	d47e0 <HAL_USART_Flush_Data>

000d4f9e <_ZN11USARTSerialD0Ev>:
   d4f9e:	b510      	push	{r4, lr}
   d4fa0:	2114      	movs	r1, #20
   d4fa2:	4604      	mov	r4, r0
   d4fa4:	f000 ffd0 	bl	d5f48 <_ZdlPvj>
   d4fa8:	4620      	mov	r0, r4
   d4faa:	bd10      	pop	{r4, pc}

000d4fac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4fac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fb4:	b925      	cbnz	r5, d4fc0 <_ZN11USARTSerial5writeEh+0x14>
   d4fb6:	7c00      	ldrb	r0, [r0, #16]
   d4fb8:	f7ff fc1a 	bl	d47f0 <HAL_USART_Available_Data_For_Write>
   d4fbc:	2800      	cmp	r0, #0
   d4fbe:	dd05      	ble.n	d4fcc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fc0:	4631      	mov	r1, r6
   d4fc2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fc8:	f7ff bbea 	b.w	d47a0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4fcc:	4628      	mov	r0, r5
   d4fce:	bd70      	pop	{r4, r5, r6, pc}

000d4fd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4fd0:	b510      	push	{r4, lr}
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	4608      	mov	r0, r1
   d4fd6:	4611      	mov	r1, r2
   d4fd8:	2200      	movs	r2, #0
   d4fda:	6062      	str	r2, [r4, #4]
   d4fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4fe0:	60a2      	str	r2, [r4, #8]
   d4fe2:	4a05      	ldr	r2, [pc, #20]	; (d4ff8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4fe4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4fe6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4fe8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4fea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4fec:	461a      	mov	r2, r3
   d4fee:	f7ff fbcf 	bl	d4790 <HAL_USART_Init>
}
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	bd10      	pop	{r4, pc}
   d4ff6:	bf00      	nop
   d4ff8:	000d75ac 	.word	0x000d75ac

000d4ffc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4ffc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4ffe:	4d0c      	ldr	r5, [pc, #48]	; (d5030 <_Z22__fetch_global_Serial1v+0x34>)
   d5000:	6829      	ldr	r1, [r5, #0]
   d5002:	f011 0401 	ands.w	r4, r1, #1
   d5006:	d111      	bne.n	d502c <_Z22__fetch_global_Serial1v+0x30>
   d5008:	4628      	mov	r0, r5
   d500a:	f7ff f84c 	bl	d40a6 <__cxa_guard_acquire>
   d500e:	b168      	cbz	r0, d502c <_Z22__fetch_global_Serial1v+0x30>
   d5010:	4a08      	ldr	r2, [pc, #32]	; (d5034 <_Z22__fetch_global_Serial1v+0x38>)
   d5012:	4b09      	ldr	r3, [pc, #36]	; (d5038 <_Z22__fetch_global_Serial1v+0x3c>)
   d5014:	4809      	ldr	r0, [pc, #36]	; (d503c <_Z22__fetch_global_Serial1v+0x40>)
   d5016:	4621      	mov	r1, r4
   d5018:	f7ff ffda 	bl	d4fd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d501c:	4628      	mov	r0, r5
   d501e:	f7ff f847 	bl	d40b0 <__cxa_guard_release>
   d5022:	4a07      	ldr	r2, [pc, #28]	; (d5040 <_Z22__fetch_global_Serial1v+0x44>)
   d5024:	4907      	ldr	r1, [pc, #28]	; (d5044 <_Z22__fetch_global_Serial1v+0x48>)
   d5026:	4805      	ldr	r0, [pc, #20]	; (d503c <_Z22__fetch_global_Serial1v+0x40>)
   d5028:	f000 ff80 	bl	d5f2c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d502c:	4803      	ldr	r0, [pc, #12]	; (d503c <_Z22__fetch_global_Serial1v+0x40>)
   d502e:	bd38      	pop	{r3, r4, r5, pc}
   d5030:	2003e600 	.word	0x2003e600
   d5034:	2003e604 	.word	0x2003e604
   d5038:	2003e57c 	.word	0x2003e57c
   d503c:	2003e568 	.word	0x2003e568
   d5040:	2003e354 	.word	0x2003e354
   d5044:	000d4f4f 	.word	0x000d4f4f

000d5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5048:	680b      	ldr	r3, [r1, #0]
   d504a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d504c:	b113      	cbz	r3, d5054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d504e:	685a      	ldr	r2, [r3, #4]
   d5050:	3201      	adds	r2, #1
   d5052:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5054:	4770      	bx	lr

000d5056 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5056:	7441      	strb	r1, [r0, #17]
   d5058:	4770      	bx	lr

000d505a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d505a:	4770      	bx	lr

000d505c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d505c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d505e:	2100      	movs	r1, #0
   d5060:	7c00      	ldrb	r0, [r0, #16]
   d5062:	f7ff fb2d 	bl	d46c0 <HAL_USB_USART_Receive_Data>
}
   d5066:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d506a:	bf28      	it	cs
   d506c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5070:	bd08      	pop	{r3, pc}

000d5072 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5072:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5074:	2101      	movs	r1, #1
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff fb22 	bl	d46c0 <HAL_USB_USART_Receive_Data>
}
   d507c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5080:	bf28      	it	cs
   d5082:	f04f 30ff 	movcs.w	r0, #4294967295
   d5086:	bd08      	pop	{r3, pc}

000d5088 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5088:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d508a:	7c00      	ldrb	r0, [r0, #16]
   d508c:	f7ff fb10 	bl	d46b0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5090:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5094:	bd08      	pop	{r3, pc}

000d5096 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5096:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5098:	7c00      	ldrb	r0, [r0, #16]
   d509a:	f7ff fb01 	bl	d46a0 <HAL_USB_USART_Available_Data>
}
   d509e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50a2:	bd08      	pop	{r3, pc}

000d50a4 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d50a4:	7c00      	ldrb	r0, [r0, #16]
   d50a6:	f7ff bb1b 	b.w	d46e0 <HAL_USB_USART_Flush_Data>

000d50aa <_ZN9USBSerialD0Ev>:
   d50aa:	b510      	push	{r4, lr}
   d50ac:	2114      	movs	r1, #20
   d50ae:	4604      	mov	r4, r0
   d50b0:	f000 ff4a 	bl	d5f48 <_ZdlPvj>
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50b8:	b538      	push	{r3, r4, r5, lr}
   d50ba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50bc:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50be:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50c0:	f7ff faf6 	bl	d46b0 <HAL_USB_USART_Available_Data_For_Write>
   d50c4:	2800      	cmp	r0, #0
   d50c6:	dc01      	bgt.n	d50cc <_ZN9USBSerial5writeEh+0x14>
   d50c8:	7c60      	ldrb	r0, [r4, #17]
   d50ca:	b128      	cbz	r0, d50d8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d50cc:	4629      	mov	r1, r5
   d50ce:	7c20      	ldrb	r0, [r4, #16]
   d50d0:	f7ff fafe 	bl	d46d0 <HAL_USB_USART_Send_Data>
   d50d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d50d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50dc:	b510      	push	{r4, lr}
   d50de:	4604      	mov	r4, r0
   d50e0:	2300      	movs	r3, #0
   d50e2:	6063      	str	r3, [r4, #4]
   d50e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50e8:	60a3      	str	r3, [r4, #8]
   d50ea:	4b05      	ldr	r3, [pc, #20]	; (d5100 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d50ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d50ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d50f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d50f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d50f6:	4611      	mov	r1, r2
   d50f8:	f7ff faca 	bl	d4690 <HAL_USB_USART_Init>
}
   d50fc:	4620      	mov	r0, r4
   d50fe:	bd10      	pop	{r4, pc}
   d5100:	000d75dc 	.word	0x000d75dc

000d5104 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5104:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5106:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5108:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d510a:	2100      	movs	r1, #0
   d510c:	f001 fda5 	bl	d6c5a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5114:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5116:	4d0e      	ldr	r5, [pc, #56]	; (d5150 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5118:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d511a:	a801      	add	r0, sp, #4
   d511c:	f7ff fff2 	bl	d5104 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5120:	6829      	ldr	r1, [r5, #0]
   d5122:	f011 0401 	ands.w	r4, r1, #1
   d5126:	d110      	bne.n	d514a <_Z16_fetch_usbserialv+0x36>
   d5128:	4628      	mov	r0, r5
   d512a:	f7fe ffbc 	bl	d40a6 <__cxa_guard_acquire>
   d512e:	b160      	cbz	r0, d514a <_Z16_fetch_usbserialv+0x36>
   d5130:	aa01      	add	r2, sp, #4
   d5132:	4621      	mov	r1, r4
   d5134:	4807      	ldr	r0, [pc, #28]	; (d5154 <_Z16_fetch_usbserialv+0x40>)
   d5136:	f7ff ffd1 	bl	d50dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d513a:	4628      	mov	r0, r5
   d513c:	f7fe ffb8 	bl	d40b0 <__cxa_guard_release>
   d5140:	4a05      	ldr	r2, [pc, #20]	; (d5158 <_Z16_fetch_usbserialv+0x44>)
   d5142:	4906      	ldr	r1, [pc, #24]	; (d515c <_Z16_fetch_usbserialv+0x48>)
   d5144:	4803      	ldr	r0, [pc, #12]	; (d5154 <_Z16_fetch_usbserialv+0x40>)
   d5146:	f000 fef1 	bl	d5f2c <__aeabi_atexit>
	return _usbserial;
}
   d514a:	4802      	ldr	r0, [pc, #8]	; (d5154 <_Z16_fetch_usbserialv+0x40>)
   d514c:	b007      	add	sp, #28
   d514e:	bd30      	pop	{r4, r5, pc}
   d5150:	2003e688 	.word	0x2003e688
   d5154:	2003e68c 	.word	0x2003e68c
   d5158:	2003e354 	.word	0x2003e354
   d515c:	000d505b 	.word	0x000d505b

000d5160 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5160:	4770      	bx	lr

000d5162 <_ZN9IPAddressD0Ev>:
   d5162:	b510      	push	{r4, lr}
   d5164:	2118      	movs	r1, #24
   d5166:	4604      	mov	r4, r0
   d5168:	f000 feee 	bl	d5f48 <_ZdlPvj>
   d516c:	4620      	mov	r0, r4
   d516e:	bd10      	pop	{r4, pc}

000d5170 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5170:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5172:	7d03      	ldrb	r3, [r0, #20]
   d5174:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5176:	b08d      	sub	sp, #52	; 0x34
   d5178:	460e      	mov	r6, r1
   d517a:	f100 0704 	add.w	r7, r0, #4
   d517e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5182:	d002      	beq.n	d518a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5184:	f100 0508 	add.w	r5, r0, #8
   d5188:	e018      	b.n	d51bc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d518a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d518c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d518e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5192:	232f      	movs	r3, #47	; 0x2f
   d5194:	462a      	mov	r2, r5
   d5196:	200a      	movs	r0, #10
   d5198:	f7ff fb32 	bl	d4800 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d519c:	4628      	mov	r0, r5
   d519e:	f001 fdba 	bl	d6d16 <strlen>
   d51a2:	6833      	ldr	r3, [r6, #0]
   d51a4:	4602      	mov	r2, r0
   d51a6:	68db      	ldr	r3, [r3, #12]
   d51a8:	4629      	mov	r1, r5
   d51aa:	4630      	mov	r0, r6
   d51ac:	4798      	blx	r3
   d51ae:	e00f      	b.n	d51d0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d51b0:	b124      	cbz	r4, d51bc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d51b2:	212e      	movs	r1, #46	; 0x2e
   d51b4:	4630      	mov	r0, r6
   d51b6:	f000 fc83 	bl	d5ac0 <_ZN5Print5printEc>
   d51ba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d51bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d51c0:	220a      	movs	r2, #10
   d51c2:	4630      	mov	r0, r6
   d51c4:	f000 fc7f 	bl	d5ac6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51c8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51ca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51cc:	d1f0      	bne.n	d51b0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51ce:	4620      	mov	r0, r4
    }
    return n;
}
   d51d0:	b00d      	add	sp, #52	; 0x34
   d51d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d51d4:	b510      	push	{r4, lr}
   d51d6:	4b05      	ldr	r3, [pc, #20]	; (d51ec <_ZN9IPAddressC1Ev+0x18>)
   d51d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d51da:	2211      	movs	r2, #17
   d51dc:	f840 3b04 	str.w	r3, [r0], #4
   d51e0:	2100      	movs	r1, #0
   d51e2:	f001 fd3a 	bl	d6c5a <memset>
{
    clear();
}
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}
   d51ea:	bf00      	nop
   d51ec:	000d760c 	.word	0x000d760c

000d51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d51f0:	4603      	mov	r3, r0
   d51f2:	4a07      	ldr	r2, [pc, #28]	; (d5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51f4:	b510      	push	{r4, lr}
   d51f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d51fa:	f101 0210 	add.w	r2, r1, #16
   d51fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d5202:	f843 4b04 	str.w	r4, [r3], #4
   d5206:	4291      	cmp	r1, r2
   d5208:	d1f9      	bne.n	d51fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d520a:	780a      	ldrb	r2, [r1, #0]
   d520c:	701a      	strb	r2, [r3, #0]
}
   d520e:	bd10      	pop	{r4, pc}
   d5210:	000d760c 	.word	0x000d760c

000d5214 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5214:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5216:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d521a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d521e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5222:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5226:	2304      	movs	r3, #4
   d5228:	6041      	str	r1, [r0, #4]
   d522a:	7503      	strb	r3, [r0, #20]
   d522c:	bd10      	pop	{r4, pc}

000d522e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d522e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5230:	780d      	ldrb	r5, [r1, #0]
   d5232:	788b      	ldrb	r3, [r1, #2]
   d5234:	784a      	ldrb	r2, [r1, #1]
   d5236:	78c9      	ldrb	r1, [r1, #3]
   d5238:	9100      	str	r1, [sp, #0]
   d523a:	4629      	mov	r1, r5
   d523c:	f7ff ffea 	bl	d5214 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5240:	b003      	add	sp, #12
   d5242:	bd30      	pop	{r4, r5, pc}

000d5244 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5244:	4770      	bx	lr

000d5246 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5246:	2000      	movs	r0, #0
   d5248:	4770      	bx	lr

000d524a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d524a:	b510      	push	{r4, lr}
   d524c:	2110      	movs	r1, #16
   d524e:	4604      	mov	r4, r0
   d5250:	f000 fe7a 	bl	d5f48 <_ZdlPvj>
   d5254:	4620      	mov	r0, r4
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5258:	b508      	push	{r3, lr}
      { delete this; }
   d525a:	b108      	cbz	r0, d5260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d525c:	f7ff fff5 	bl	d524a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5260:	bd08      	pop	{r3, pc}

000d5262 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5262:	2200      	movs	r2, #0
   d5264:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5266:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5268:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d526c:	8082      	strh	r2, [r0, #4]
   d526e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5272:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5274:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5276:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5278:	680c      	ldr	r4, [r1, #0]
   d527a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d527c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d527e:	bd10      	pop	{r4, pc}

000d5280 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5280:	b510      	push	{r4, lr}
   d5282:	4604      	mov	r4, r0
    free((void*)msg_);
   d5284:	6800      	ldr	r0, [r0, #0]
   d5286:	f7ff fbf9 	bl	d4a7c <free>
}
   d528a:	4620      	mov	r0, r4
   d528c:	bd10      	pop	{r4, pc}

000d528e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d528e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5290:	68c4      	ldr	r4, [r0, #12]
   d5292:	b1f4      	cbz	r4, d52d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5294:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5296:	2b02      	cmp	r3, #2
   d5298:	d103      	bne.n	d52a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d529a:	f104 000c 	add.w	r0, r4, #12
   d529e:	f7ff ffef 	bl	d5280 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d52a2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d52a4:	b135      	cbz	r5, d52b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52a6:	4628      	mov	r0, r5
   d52a8:	f7ff fc10 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
   d52ac:	2110      	movs	r1, #16
   d52ae:	4628      	mov	r0, r5
   d52b0:	f000 fe4a 	bl	d5f48 <_ZdlPvj>
   d52b4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d52b6:	b135      	cbz	r5, d52c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d52b8:	4628      	mov	r0, r5
   d52ba:	f7ff fc07 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
   d52be:	2110      	movs	r1, #16
   d52c0:	4628      	mov	r0, r5
   d52c2:	f000 fe41 	bl	d5f48 <_ZdlPvj>
   d52c6:	4620      	mov	r0, r4
   d52c8:	2114      	movs	r1, #20
   d52ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d52ce:	f000 be3b 	b.w	d5f48 <_ZdlPvj>
   d52d2:	bd38      	pop	{r3, r4, r5, pc}

000d52d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d52d4:	b513      	push	{r0, r1, r4, lr}
   d52d6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d52d8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d52dc:	2300      	movs	r3, #0
   d52de:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d52e0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d52e2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d52e4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52e6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d52e8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d52ea:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52ec:	f7fe ff20 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52f0:	4620      	mov	r0, r4
   d52f2:	b002      	add	sp, #8
   d52f4:	bd10      	pop	{r4, pc}

000d52f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d52f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52f8:	460c      	mov	r4, r1
   d52fa:	ad02      	add	r5, sp, #8
   d52fc:	f854 3b04 	ldr.w	r3, [r4], #4
   d5300:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5304:	4606      	mov	r6, r0
   d5306:	460f      	mov	r7, r1
   d5308:	a801      	add	r0, sp, #4
   d530a:	4621      	mov	r1, r4
   d530c:	f7ff fe9c 	bl	d5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5310:	4629      	mov	r1, r5
   d5312:	4630      	mov	r0, r6
   d5314:	f7ff ffde 	bl	d52d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5318:	a801      	add	r0, sp, #4
   d531a:	f7fe ff09 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d531e:	4620      	mov	r0, r4
   d5320:	f7fe ff06 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5324:	4638      	mov	r0, r7
   d5326:	2108      	movs	r1, #8
   d5328:	f000 fe0e 	bl	d5f48 <_ZdlPvj>
        return p;
    }
   d532c:	4630      	mov	r0, r6
   d532e:	b003      	add	sp, #12
   d5330:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5332 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5332:	b513      	push	{r0, r1, r4, lr}
   d5334:	460b      	mov	r3, r1
   d5336:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5338:	c803      	ldmia	r0, {r0, r1}
   d533a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d533e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5342:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5346:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d534a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d534e:	b002      	add	sp, #8
   d5350:	bd10      	pop	{r4, pc}
	...

000d5354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5354:	b538      	push	{r3, r4, r5, lr}
   d5356:	2300      	movs	r3, #0
   d5358:	4604      	mov	r4, r0
   d535a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d535c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d535e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5360:	f7fe fe9b 	bl	d409a <_Znwj>
   d5364:	b128      	cbz	r0, d5372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5366:	2301      	movs	r3, #1
   d5368:	6043      	str	r3, [r0, #4]
   d536a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d536c:	4b02      	ldr	r3, [pc, #8]	; (d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d536e:	6003      	str	r3, [r0, #0]
   d5370:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5372:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5374:	4620      	mov	r0, r4
   d5376:	bd38      	pop	{r3, r4, r5, pc}
   d5378:	000d7620 	.word	0x000d7620

000d537c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d537c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d537e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5380:	b90a      	cbnz	r2, d5386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5382:	f000 fdf4 	bl	d5f6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5386:	68c3      	ldr	r3, [r0, #12]
    }
   d5388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d538c:	4718      	bx	r3

000d538e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d538e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5390:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5392:	f100 0110 	add.w	r1, r0, #16
   d5396:	f7ff fff1 	bl	d537c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d539a:	bd08      	pop	{r3, pc}

000d539c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d539c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d539e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d53a0:	b90a      	cbnz	r2, d53a6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d53a2:	f000 fde4 	bl	d5f6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53a6:	68c3      	ldr	r3, [r0, #12]
    }
   d53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53ac:	4718      	bx	r3

000d53ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d53ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d53b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d53b2:	f100 0110 	add.w	r1, r0, #16
   d53b6:	f7ff fff1 	bl	d539c <_ZNKSt8functionIFvRKbEEclES1_>
   d53ba:	bd08      	pop	{r3, pc}

000d53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d53bc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53be:	2300      	movs	r3, #0
   d53c0:	6083      	str	r3, [r0, #8]
   d53c2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d53c4:	4604      	mov	r4, r0
   d53c6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d53c8:	b12b      	cbz	r3, d53d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d53ca:	2202      	movs	r2, #2
   d53cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d53ce:	68eb      	ldr	r3, [r5, #12]
   d53d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d53d2:	68ab      	ldr	r3, [r5, #8]
   d53d4:	60a3      	str	r3, [r4, #8]
	}
    }
   d53d6:	4620      	mov	r0, r4
   d53d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d53dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53de:	b089      	sub	sp, #36	; 0x24
   d53e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d53e2:	4668      	mov	r0, sp
   d53e4:	f7ff ff3d 	bl	d5262 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d53e8:	2300      	movs	r3, #0
   d53ea:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d53ee:	f04f 0202 	mov.w	r2, #2
   d53f2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d53f6:	2b00      	cmp	r3, #0
   d53f8:	d103      	bne.n	d5402 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d53fa:	e8c4 2f41 	strexb	r1, r2, [r4]
   d53fe:	2900      	cmp	r1, #0
   d5400:	d1f7      	bne.n	d53f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5402:	d002      	beq.n	d540a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5404:	f88d 3008 	strb.w	r3, [sp, #8]
   d5408:	e063      	b.n	d54d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d540a:	f114 050c 	adds.w	r5, r4, #12
   d540e:	d003      	beq.n	d5418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5410:	4669      	mov	r1, sp
   d5412:	4628      	mov	r0, r5
   d5414:	f7ff ff25 	bl	d5262 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5418:	f3bf 8f5f 	dmb	sy
   d541c:	2301      	movs	r3, #1
   d541e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5420:	2000      	movs	r0, #0
   d5422:	f104 0308 	add.w	r3, r4, #8
   d5426:	f3bf 8f5f 	dmb	sy
   d542a:	e853 6f00 	ldrex	r6, [r3]
   d542e:	e843 0200 	strex	r2, r0, [r3]
   d5432:	2a00      	cmp	r2, #0
   d5434:	d1f9      	bne.n	d542a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5436:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d543a:	2e00      	cmp	r6, #0
   d543c:	d049      	beq.n	d54d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d543e:	f7ff fadf 	bl	d4a00 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5442:	b120      	cbz	r0, d544e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5444:	4629      	mov	r1, r5
   d5446:	4630      	mov	r0, r6
   d5448:	f7ff ff98 	bl	d537c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d544c:	e03a      	b.n	d54c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d544e:	4631      	mov	r1, r6
   d5450:	a802      	add	r0, sp, #8
   d5452:	f7ff ffb3 	bl	d53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5456:	68e0      	ldr	r0, [r4, #12]
   d5458:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d545c:	b108      	cbz	r0, d5462 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d545e:	f001 fc3f 	bl	d6ce0 <strdup>
   d5462:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5464:	2010      	movs	r0, #16
   d5466:	f8ad 501c 	strh.w	r5, [sp, #28]
   d546a:	f7fe fe16 	bl	d409a <_Znwj>
   d546e:	4605      	mov	r5, r0
   d5470:	b1e8      	cbz	r0, d54ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5472:	2700      	movs	r7, #0
   d5474:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5476:	2018      	movs	r0, #24
   d5478:	f7fe fe0f 	bl	d409a <_Znwj>
   d547c:	4604      	mov	r4, r0
   d547e:	b188      	cbz	r0, d54a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5480:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5482:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5484:	a802      	add	r0, sp, #8
   d5486:	f7ff ff54 	bl	d5332 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d548a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d548c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d548e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5490:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5492:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5494:	a906      	add	r1, sp, #24
   d5496:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5498:	60e3      	str	r3, [r4, #12]
   d549a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d549e:	9205      	str	r2, [sp, #20]
   d54a0:	f7ff fedf 	bl	d5262 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d54a4:	4b0d      	ldr	r3, [pc, #52]	; (d54dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d54a6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d54a8:	4b0d      	ldr	r3, [pc, #52]	; (d54e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54aa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d54ac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d54ae:	a806      	add	r0, sp, #24
   d54b0:	f7ff fee6 	bl	d5280 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54b4:	a802      	add	r0, sp, #8
   d54b6:	f7ff fb09 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d54ba:	2200      	movs	r2, #0
   d54bc:	4629      	mov	r1, r5
   d54be:	4809      	ldr	r0, [pc, #36]	; (d54e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d54c0:	f7ff faa6 	bl	d4a10 <application_thread_invoke>
   d54c4:	4630      	mov	r0, r6
   d54c6:	f7ff fb01 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d54ca:	2110      	movs	r1, #16
   d54cc:	4630      	mov	r0, r6
   d54ce:	f000 fd3b 	bl	d5f48 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d54d2:	4668      	mov	r0, sp
   d54d4:	f7ff fed4 	bl	d5280 <_ZN8particle5ErrorD1Ev>
    }
   d54d8:	b009      	add	sp, #36	; 0x24
   d54da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54dc:	000d538f 	.word	0x000d538f
   d54e0:	000d5605 	.word	0x000d5605
   d54e4:	000d4f27 	.word	0x000d4f27

000d54e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d54e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54ec:	b08b      	sub	sp, #44	; 0x2c
   d54ee:	4606      	mov	r6, r0
   d54f0:	460f      	mov	r7, r1
   d54f2:	4690      	mov	r8, r2
   d54f4:	4699      	mov	r9, r3
   d54f6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d54fa:	f7ff f9f9 	bl	d48f0 <spark_cloud_flag_connected>
   d54fe:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5500:	4683      	mov	fp, r0
   d5502:	bb30      	cbnz	r0, d5552 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5504:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5508:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d550a:	a905      	add	r1, sp, #20
   d550c:	4628      	mov	r0, r5
   d550e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5512:	f7ff fea6 	bl	d5262 <_ZN8particle5ErrorC1EOS0_>
   d5516:	2014      	movs	r0, #20
   d5518:	f7fe fdbf 	bl	d409a <_Znwj>
   d551c:	4604      	mov	r4, r0
   d551e:	b158      	cbz	r0, d5538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5520:	2302      	movs	r3, #2
   d5522:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5524:	2301      	movs	r3, #1
   d5526:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5528:	f8c0 b004 	str.w	fp, [r0, #4]
   d552c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5530:	4629      	mov	r1, r5
   d5532:	300c      	adds	r0, #12
   d5534:	f7ff fe95 	bl	d5262 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5538:	4630      	mov	r0, r6
   d553a:	4621      	mov	r1, r4
   d553c:	f840 4b04 	str.w	r4, [r0], #4
   d5540:	f7ff ff08 	bl	d5354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5544:	4628      	mov	r0, r5
   d5546:	f7ff fe9b 	bl	d5280 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d554a:	a805      	add	r0, sp, #20
   d554c:	f7ff fe98 	bl	d5280 <_ZN8particle5ErrorD1Ev>
   d5550:	e052      	b.n	d55f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5552:	2400      	movs	r4, #0
   d5554:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5556:	2014      	movs	r0, #20
   d5558:	606c      	str	r4, [r5, #4]
   d555a:	60ac      	str	r4, [r5, #8]
   d555c:	9307      	str	r3, [sp, #28]
   d555e:	f7fe fd9c 	bl	d409a <_Znwj>
   d5562:	4601      	mov	r1, r0
   d5564:	b118      	cbz	r0, d556e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5566:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5568:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d556a:	6044      	str	r4, [r0, #4]
   d556c:	6084      	str	r4, [r0, #8]
   d556e:	a804      	add	r0, sp, #16
   d5570:	9103      	str	r1, [sp, #12]
   d5572:	f7ff feef 	bl	d5354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5576:	4b22      	ldr	r3, [pc, #136]	; (d5600 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5578:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d557a:	2008      	movs	r0, #8
   d557c:	f7fe fd8d 	bl	d409a <_Znwj>
   d5580:	4604      	mov	r4, r0
   d5582:	b128      	cbz	r0, d5590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5584:	9b03      	ldr	r3, [sp, #12]
   d5586:	f840 3b04 	str.w	r3, [r0], #4
   d558a:	a904      	add	r1, sp, #16
   d558c:	f7ff fd5c 	bl	d5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5590:	9500      	str	r5, [sp, #0]
   d5592:	fa5f f38a 	uxtb.w	r3, sl
   d5596:	464a      	mov	r2, r9
   d5598:	4641      	mov	r1, r8
   d559a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d559c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d559e:	f7ff f9af 	bl	d4900 <spark_send_event>
   d55a2:	b920      	cbnz	r0, d55ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d55a4:	9b03      	ldr	r3, [sp, #12]
   d55a6:	785b      	ldrb	r3, [r3, #1]
   d55a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d55ac:	b183      	cbz	r3, d55d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d55ae:	9b03      	ldr	r3, [sp, #12]
   d55b0:	9305      	str	r3, [sp, #20]
   d55b2:	a904      	add	r1, sp, #16
   d55b4:	a806      	add	r0, sp, #24
   d55b6:	f7ff fd47 	bl	d5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d55ba:	a905      	add	r1, sp, #20
   d55bc:	4630      	mov	r0, r6
   d55be:	f7ff fe89 	bl	d52d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55c2:	a806      	add	r0, sp, #24
   d55c4:	f7fe fdb4 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55c8:	a804      	add	r0, sp, #16
   d55ca:	f7fe fdb1 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55ce:	e013      	b.n	d55f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d55d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d55d4:	a905      	add	r1, sp, #20
   d55d6:	a803      	add	r0, sp, #12
   d55d8:	9205      	str	r2, [sp, #20]
   d55da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d55de:	f7ff fefd 	bl	d53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d55e2:	a805      	add	r0, sp, #20
   d55e4:	f7ff fe4c 	bl	d5280 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d55e8:	a805      	add	r0, sp, #20
   d55ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d55ec:	f7ff fe83 	bl	d52f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d55f0:	a806      	add	r0, sp, #24
   d55f2:	f7fe fd9d 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55f6:	e7da      	b.n	d55ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d55f8:	4630      	mov	r0, r6
   d55fa:	b00b      	add	sp, #44	; 0x2c
   d55fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5600:	000d5775 	.word	0x000d5775

000d5604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5604:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5608:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d560a:	d006      	beq.n	d561a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d560c:	2a03      	cmp	r2, #3
   d560e:	d017      	beq.n	d5640 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5610:	2a01      	cmp	r2, #1
   d5612:	d122      	bne.n	d565a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5614:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5616:	6003      	str	r3, [r0, #0]
	      break;
   d5618:	e01f      	b.n	d565a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d561a:	2018      	movs	r0, #24
   d561c:	680e      	ldr	r6, [r1, #0]
   d561e:	f7fe fd3c 	bl	d409a <_Znwj>
   d5622:	4605      	mov	r5, r0
   d5624:	b150      	cbz	r0, d563c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5626:	4631      	mov	r1, r6
   d5628:	f7ff fec8 	bl	d53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d562c:	6930      	ldr	r0, [r6, #16]
   d562e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5632:	b108      	cbz	r0, d5638 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5634:	f001 fb54 	bl	d6ce0 <strdup>
   d5638:	6128      	str	r0, [r5, #16]
   d563a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d563c:	6025      	str	r5, [r4, #0]
   d563e:	e00c      	b.n	d565a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5640:	6804      	ldr	r4, [r0, #0]
   d5642:	b154      	cbz	r4, d565a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5644:	f104 0010 	add.w	r0, r4, #16
   d5648:	f7ff fe1a 	bl	d5280 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d564c:	4620      	mov	r0, r4
   d564e:	f7ff fa3d 	bl	d4acc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5652:	2118      	movs	r1, #24
   d5654:	4620      	mov	r0, r4
   d5656:	f000 fc77 	bl	d5f48 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d565a:	2000      	movs	r0, #0
   d565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d565e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d565e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5660:	2300      	movs	r3, #0
   d5662:	6083      	str	r3, [r0, #8]
   d5664:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5666:	4604      	mov	r4, r0
   d5668:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d566a:	b12b      	cbz	r3, d5678 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d566c:	2202      	movs	r2, #2
   d566e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5670:	68eb      	ldr	r3, [r5, #12]
   d5672:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5674:	68ab      	ldr	r3, [r5, #8]
   d5676:	60a3      	str	r3, [r4, #8]
	}
    }
   d5678:	4620      	mov	r0, r4
   d567a:	bd38      	pop	{r3, r4, r5, pc}

000d567c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d567c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d567e:	b570      	push	{r4, r5, r6, lr}
   d5680:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5682:	d006      	beq.n	d5692 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5684:	2a03      	cmp	r2, #3
   d5686:	d011      	beq.n	d56ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5688:	2a01      	cmp	r2, #1
   d568a:	d118      	bne.n	d56be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d568c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d568e:	6003      	str	r3, [r0, #0]
	      break;
   d5690:	e015      	b.n	d56be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5692:	2014      	movs	r0, #20
   d5694:	680e      	ldr	r6, [r1, #0]
   d5696:	f7fe fd00 	bl	d409a <_Znwj>
   d569a:	4605      	mov	r5, r0
   d569c:	b120      	cbz	r0, d56a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d569e:	4631      	mov	r1, r6
   d56a0:	f7ff ffdd 	bl	d565e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d56a4:	7c33      	ldrb	r3, [r6, #16]
   d56a6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d56a8:	6025      	str	r5, [r4, #0]
   d56aa:	e008      	b.n	d56be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d56ac:	6804      	ldr	r4, [r0, #0]
   d56ae:	b134      	cbz	r4, d56be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56b0:	4620      	mov	r0, r4
   d56b2:	f7ff fa0b 	bl	d4acc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d56b6:	2114      	movs	r1, #20
   d56b8:	4620      	mov	r0, r4
   d56ba:	f000 fc45 	bl	d5f48 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d56be:	2000      	movs	r0, #0
   d56c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d56c4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56c6:	2300      	movs	r3, #0
   d56c8:	b087      	sub	sp, #28
   d56ca:	460c      	mov	r4, r1
   d56cc:	f3bf 8f5f 	dmb	sy
   d56d0:	e850 6f00 	ldrex	r6, [r0]
   d56d4:	e840 3200 	strex	r2, r3, [r0]
   d56d8:	2a00      	cmp	r2, #0
   d56da:	d1f9      	bne.n	d56d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d56dc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d56e0:	2e00      	cmp	r6, #0
   d56e2:	d03f      	beq.n	d5764 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d56e4:	4618      	mov	r0, r3
   d56e6:	f7ff f98b 	bl	d4a00 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d56ea:	4607      	mov	r7, r0
   d56ec:	b120      	cbz	r0, d56f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d56ee:	4621      	mov	r1, r4
   d56f0:	4630      	mov	r0, r6
   d56f2:	f7ff fe53 	bl	d539c <_ZNKSt8functionIFvRKbEEclES1_>
   d56f6:	e02e      	b.n	d5756 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d56f8:	4631      	mov	r1, r6
   d56fa:	a801      	add	r0, sp, #4
   d56fc:	f7ff ffaf 	bl	d565e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5700:	7823      	ldrb	r3, [r4, #0]
   d5702:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5706:	2010      	movs	r0, #16
   d5708:	f7fe fcc7 	bl	d409a <_Znwj>
   d570c:	4605      	mov	r5, r0
   d570e:	b1d0      	cbz	r0, d5746 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5710:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5712:	2014      	movs	r0, #20
   d5714:	f7fe fcc1 	bl	d409a <_Znwj>
   d5718:	4604      	mov	r4, r0
   d571a:	b178      	cbz	r0, d573c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d571c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d571e:	4601      	mov	r1, r0
   d5720:	a801      	add	r0, sp, #4
   d5722:	f7ff fe06 	bl	d5332 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5726:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5728:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d572a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d572c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d572e:	9203      	str	r2, [sp, #12]
   d5730:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5732:	60e3      	str	r3, [r4, #12]
   d5734:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5738:	9204      	str	r2, [sp, #16]
   d573a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d573c:	4b0a      	ldr	r3, [pc, #40]	; (d5768 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d573e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5740:	4b0a      	ldr	r3, [pc, #40]	; (d576c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5742:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5744:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5746:	a801      	add	r0, sp, #4
   d5748:	f7ff f9c0 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d574c:	2200      	movs	r2, #0
   d574e:	4629      	mov	r1, r5
   d5750:	4807      	ldr	r0, [pc, #28]	; (d5770 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5752:	f7ff f95d 	bl	d4a10 <application_thread_invoke>
   d5756:	4630      	mov	r0, r6
   d5758:	f7ff f9b8 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d575c:	2110      	movs	r1, #16
   d575e:	4630      	mov	r0, r6
   d5760:	f000 fbf2 	bl	d5f48 <_ZdlPvj>
        }
    }
   d5764:	b007      	add	sp, #28
   d5766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5768:	000d53af 	.word	0x000d53af
   d576c:	000d567d 	.word	0x000d567d
   d5770:	000d4f27 	.word	0x000d4f27

000d5774 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5774:	b530      	push	{r4, r5, lr}
   d5776:	b085      	sub	sp, #20
   d5778:	4604      	mov	r4, r0
   d577a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d577c:	4668      	mov	r0, sp
   d577e:	4611      	mov	r1, r2
   d5780:	f7ff fdb9 	bl	d52f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5784:	b17c      	cbz	r4, d57a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5786:	b224      	sxth	r4, r4
   d5788:	4628      	mov	r0, r5
   d578a:	b10d      	cbz	r5, d5790 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d578c:	f001 faa8 	bl	d6ce0 <strdup>
   d5790:	9002      	str	r0, [sp, #8]
   d5792:	a902      	add	r1, sp, #8
   d5794:	4668      	mov	r0, sp
   d5796:	f8ad 400c 	strh.w	r4, [sp, #12]
   d579a:	f7ff fe1f 	bl	d53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d579e:	a802      	add	r0, sp, #8
   d57a0:	f7ff fd6e 	bl	d5280 <_ZN8particle5ErrorD1Ev>
   d57a4:	e01d      	b.n	d57e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d57a6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d57a8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d57ac:	f04f 0201 	mov.w	r2, #1
   d57b0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d57b4:	42a3      	cmp	r3, r4
   d57b6:	d103      	bne.n	d57c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d57b8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d57bc:	2900      	cmp	r1, #0
   d57be:	d1f7      	bne.n	d57b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d57c0:	d002      	beq.n	d57c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d57c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d57c6:	e00c      	b.n	d57e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d57c8:	f110 010c 	adds.w	r1, r0, #12
   d57cc:	f04f 0301 	mov.w	r3, #1
   d57d0:	bf18      	it	ne
   d57d2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d57d4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d57d8:	3004      	adds	r0, #4
   d57da:	f800 3c03 	strb.w	r3, [r0, #-3]
   d57de:	f7ff ff71 	bl	d56c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d57e2:	a801      	add	r0, sp, #4
   d57e4:	f7fe fca4 	bl	d4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d57e8:	b005      	add	sp, #20
   d57ea:	bd30      	pop	{r4, r5, pc}

000d57ec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d57ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d57ee:	4b0c      	ldr	r3, [pc, #48]	; (d5820 <serialEventRun+0x34>)
   d57f0:	b133      	cbz	r3, d5800 <serialEventRun+0x14>
   d57f2:	f7ff fc8f 	bl	d5114 <_Z16_fetch_usbserialv>
   d57f6:	6803      	ldr	r3, [r0, #0]
   d57f8:	691b      	ldr	r3, [r3, #16]
   d57fa:	4798      	blx	r3
   d57fc:	2800      	cmp	r0, #0
   d57fe:	dc09      	bgt.n	d5814 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5800:	4b08      	ldr	r3, [pc, #32]	; (d5824 <serialEventRun+0x38>)
   d5802:	b163      	cbz	r3, d581e <serialEventRun+0x32>
   d5804:	f7ff fbfa 	bl	d4ffc <_Z22__fetch_global_Serial1v>
   d5808:	6803      	ldr	r3, [r0, #0]
   d580a:	691b      	ldr	r3, [r3, #16]
   d580c:	4798      	blx	r3
   d580e:	2800      	cmp	r0, #0
   d5810:	dc03      	bgt.n	d581a <serialEventRun+0x2e>
   d5812:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5814:	f3af 8000 	nop.w
   d5818:	e7f2      	b.n	d5800 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d581a:	f3af 8000 	nop.w
   d581e:	bd08      	pop	{r3, pc}
	...

000d5828 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5828:	b508      	push	{r3, lr}
	serialEventRun();
   d582a:	f7ff ffdf 	bl	d57ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d582e:	f7ff f81f 	bl	d4870 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5832:	4b01      	ldr	r3, [pc, #4]	; (d5838 <_post_loop+0x10>)
   d5834:	6018      	str	r0, [r3, #0]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	2003e720 	.word	0x2003e720

000d583c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d583c:	4802      	ldr	r0, [pc, #8]	; (d5848 <_Z33system_initialize_user_backup_ramv+0xc>)
   d583e:	4a03      	ldr	r2, [pc, #12]	; (d584c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5840:	4903      	ldr	r1, [pc, #12]	; (d5850 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5842:	1a12      	subs	r2, r2, r0
   d5844:	f001 b9fe 	b.w	d6c44 <memcpy>
   d5848:	2003f400 	.word	0x2003f400
   d584c:	2003f404 	.word	0x2003f404
   d5850:	000d79e0 	.word	0x000d79e0

000d5854 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5854:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5856:	2300      	movs	r3, #0
   d5858:	9300      	str	r3, [sp, #0]
   d585a:	461a      	mov	r2, r3
   d585c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5860:	f7ff f8f0 	bl	d4a44 <system_ctrl_set_result>
}
   d5864:	b003      	add	sp, #12
   d5866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d586c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d586c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d586e:	8843      	ldrh	r3, [r0, #2]
   d5870:	2b0a      	cmp	r3, #10
   d5872:	d008      	beq.n	d5886 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5874:	2b50      	cmp	r3, #80	; 0x50
   d5876:	d109      	bne.n	d588c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5878:	4b09      	ldr	r3, [pc, #36]	; (d58a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d587a:	681b      	ldr	r3, [r3, #0]
   d587c:	b13b      	cbz	r3, d588e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d587e:	b003      	add	sp, #12
   d5880:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5884:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5886:	f7ff ffe5 	bl	d5854 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d588a:	e006      	b.n	d589a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d588c:	2300      	movs	r3, #0
   d588e:	9300      	str	r3, [sp, #0]
   d5890:	461a      	mov	r2, r3
   d5892:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5896:	f7ff f8d5 	bl	d4a44 <system_ctrl_set_result>
        break;
    }
}
   d589a:	b003      	add	sp, #12
   d589c:	f85d fb04 	ldr.w	pc, [sp], #4
   d58a0:	2003e6a0 	.word	0x2003e6a0

000d58a4 <module_user_init_hook>:

void module_user_init_hook()
{
   d58a4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58a6:	4c10      	ldr	r4, [pc, #64]	; (d58e8 <module_user_init_hook+0x44>)
   d58a8:	4d10      	ldr	r5, [pc, #64]	; (d58ec <module_user_init_hook+0x48>)
   d58aa:	6823      	ldr	r3, [r4, #0]
   d58ac:	42ab      	cmp	r3, r5
   d58ae:	4b10      	ldr	r3, [pc, #64]	; (d58f0 <module_user_init_hook+0x4c>)
   d58b0:	bf0c      	ite	eq
   d58b2:	2201      	moveq	r2, #1
   d58b4:	2200      	movne	r2, #0
   d58b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d58b8:	d002      	beq.n	d58c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d58ba:	f7ff ffbf 	bl	d583c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d58be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d58c0:	f7fe ffce 	bl	d4860 <HAL_RNG_GetRandomNumber>
   d58c4:	4604      	mov	r4, r0
    srand(seed);
   d58c6:	f001 f9d1 	bl	d6c6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d58ca:	4b0a      	ldr	r3, [pc, #40]	; (d58f4 <module_user_init_hook+0x50>)
   d58cc:	b113      	cbz	r3, d58d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d58ce:	4620      	mov	r0, r4
   d58d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d58d4:	2100      	movs	r1, #0
   d58d6:	4807      	ldr	r0, [pc, #28]	; (d58f4 <module_user_init_hook+0x50>)
   d58d8:	f7ff f822 	bl	d4920 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58dc:	2100      	movs	r1, #0
   d58de:	4806      	ldr	r0, [pc, #24]	; (d58f8 <module_user_init_hook+0x54>)
}
   d58e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58e4:	f7ff b8a4 	b.w	d4a30 <system_ctrl_set_app_request_handler>
   d58e8:	2003f400 	.word	0x2003f400
   d58ec:	9a271c1e 	.word	0x9a271c1e
   d58f0:	2003e6a4 	.word	0x2003e6a4
   d58f4:	00000000 	.word	0x00000000
   d58f8:	000d586d 	.word	0x000d586d

000d58fc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d58fc:	b510      	push	{r4, lr}
   d58fe:	4604      	mov	r4, r0
   d5900:	f7ff f8e4 	bl	d4acc <_ZNSt14_Function_baseD1Ev>
   d5904:	4620      	mov	r0, r4
   d5906:	bd10      	pop	{r4, pc}

000d5908 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5908:	4803      	ldr	r0, [pc, #12]	; (d5918 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d590a:	4a04      	ldr	r2, [pc, #16]	; (d591c <_GLOBAL__sub_I_RGB+0x14>)
   d590c:	4904      	ldr	r1, [pc, #16]	; (d5920 <_GLOBAL__sub_I_RGB+0x18>)
   d590e:	2300      	movs	r3, #0
   d5910:	6083      	str	r3, [r0, #8]
   d5912:	f000 bb0b 	b.w	d5f2c <__aeabi_atexit>
   d5916:	bf00      	nop
   d5918:	2003e6a8 	.word	0x2003e6a8
   d591c:	2003e354 	.word	0x2003e354
   d5920:	000d58fd 	.word	0x000d58fd

000d5924 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5924:	2100      	movs	r1, #0
   d5926:	f7ff b863 	b.w	d49f0 <system_delay_ms>
	...

000d592c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d592c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d592e:	4b14      	ldr	r3, [pc, #80]	; (d5980 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5930:	4f14      	ldr	r7, [pc, #80]	; (d5984 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5932:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5934:	4b14      	ldr	r3, [pc, #80]	; (d5988 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5936:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5938:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d593a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d593c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d593e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5940:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5942:	d01b      	beq.n	d597c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5944:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5946:	ad01      	add	r5, sp, #4
   d5948:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d594c:	f001 f882 	bl	d6a54 <localtime>
	calendar_time->tm_year += 1900;
   d5950:	6943      	ldr	r3, [r0, #20]
   d5952:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5956:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5958:	4604      	mov	r4, r0
   d595a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d595c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d595e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5962:	f8d4 e000 	ldr.w	lr, [r4]
   d5966:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d596a:	ad01      	add	r5, sp, #4
   d596c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d596e:	4c07      	ldr	r4, [pc, #28]	; (d598c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5976:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5978:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d597c:	b00b      	add	sp, #44	; 0x2c
   d597e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5980:	2003e6e8 	.word	0x2003e6e8
   d5984:	2003e6e4 	.word	0x2003e6e4
   d5988:	2003e6e0 	.word	0x2003e6e0
   d598c:	2003e6b8 	.word	0x2003e6b8

000d5990 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5990:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5992:	2000      	movs	r0, #0
   d5994:	f7fe ffbc 	bl	d4910 <spark_sync_time_pending>
   d5998:	b128      	cbz	r0, d59a6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d599a:	f7fe ffa9 	bl	d48f0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d599e:	f080 0001 	eor.w	r0, r0, #1
   d59a2:	b2c0      	uxtb	r0, r0
   d59a4:	bd08      	pop	{r3, pc}
   d59a6:	2001      	movs	r0, #1
    }
   d59a8:	bd08      	pop	{r3, pc}
	...

000d59ac <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d59ac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d59ae:	f7ff ffbd 	bl	d592c <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d59b2:	4b04      	ldr	r3, [pc, #16]	; (d59c4 <_ZN9TimeClass12hourFormat12El+0x18>)
   d59b4:	6898      	ldr	r0, [r3, #8]
   d59b6:	b118      	cbz	r0, d59c0 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d59b8:	280c      	cmp	r0, #12
   d59ba:	dd02      	ble.n	d59c2 <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d59bc:	380c      	subs	r0, #12
   d59be:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d59c0:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	2003e6b8 	.word	0x2003e6b8

000d59c8 <_ZN9TimeClass4isPMEl>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   d59c8:	b508      	push	{r3, lr}
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d59ca:	f7ff ffaf 	bl	d592c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
   d59ce:	4b03      	ldr	r3, [pc, #12]	; (d59dc <_ZN9TimeClass4isPMEl+0x14>)
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
	return (hour(t) >= 12);
   d59d0:	6898      	ldr	r0, [r3, #8]
}
   d59d2:	280b      	cmp	r0, #11
   d59d4:	bfd4      	ite	le
   d59d6:	2000      	movle	r0, #0
   d59d8:	2001      	movgt	r0, #1
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	2003e6b8 	.word	0x2003e6b8

000d59e0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d59e0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d59e2:	2000      	movs	r0, #0
   d59e4:	f7fe ff54 	bl	d4890 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d59e8:	4604      	mov	r4, r0
   d59ea:	b968      	cbnz	r0, d5a08 <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d59ec:	f7fe fff0 	bl	d49d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d59f0:	2801      	cmp	r0, #1
   d59f2:	d10b      	bne.n	d5a0c <_ZN9TimeClass7isValidEv+0x2c>
   d59f4:	4620      	mov	r0, r4
   d59f6:	f7ff f813 	bl	d4a20 <system_thread_get_state>
   d59fa:	b938      	cbnz	r0, d5a0c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d59fc:	f7ff ffc8 	bl	d5990 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5a00:	b930      	cbnz	r0, d5a10 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5a02:	f7fe ff6d 	bl	d48e0 <spark_process>
   d5a06:	e7f9      	b.n	d59fc <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5a08:	2001      	movs	r0, #1
   d5a0a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5a0c:	2000      	movs	r0, #0
   d5a0e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5a10:	f7ff ffbe 	bl	d5990 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5a14:	2000      	movs	r0, #0
   d5a16:	f7fe ff3b 	bl	d4890 <HAL_RTC_Time_Is_Valid>
   d5a1a:	3000      	adds	r0, #0
   d5a1c:	bf18      	it	ne
   d5a1e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5a20:	bd10      	pop	{r4, pc}

000d5a22 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5a22:	b508      	push	{r3, lr}
    (void)isValid();
   d5a24:	f7ff ffdc 	bl	d59e0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5a2c:	f7fe bf28 	b.w	d4880 <HAL_RTC_Get_UnixTime>

000d5a30 <_ZN9TimeClass4isAMEv>:
		return calendar_time_cache.tm_hour ;
}

/* returns true if time now is AM */
uint8_t TimeClass::isAM()
{
   d5a30:	b508      	push	{r3, lr}
	return !isPM(now());
   d5a32:	f7ff fff6 	bl	d5a22 <_ZN9TimeClass3nowEv>
   d5a36:	f7ff ffc7 	bl	d59c8 <_ZN9TimeClass4isPMEl>
}
   d5a3a:	fab0 f080 	clz	r0, r0
   d5a3e:	0940      	lsrs	r0, r0, #5
   d5a40:	bd08      	pop	{r3, pc}

000d5a42 <_ZN9TimeClass4isPMEv>:
	return !isPM(t);
}

/* returns true if time now is PM */
uint8_t TimeClass::isPM()
{
   d5a42:	b508      	push	{r3, lr}
	return isPM(now());
   d5a44:	f7ff ffed 	bl	d5a22 <_ZN9TimeClass3nowEv>
}
   d5a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* returns true if time now is PM */
uint8_t TimeClass::isPM()
{
	return isPM(now());
   d5a4c:	f7ff bfbc 	b.w	d59c8 <_ZN9TimeClass4isPMEl>

000d5a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a50:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a56:	601a      	str	r2, [r3, #0]
   d5a58:	4770      	bx	lr
   d5a5a:	bf00      	nop
   d5a5c:	2003e29c 	.word	0x2003e29c
   d5a60:	2003e6dc 	.word	0x2003e6dc

000d5a64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a64:	4b01      	ldr	r3, [pc, #4]	; (d5a6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a66:	4a02      	ldr	r2, [pc, #8]	; (d5a70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a68:	601a      	str	r2, [r3, #0]
   d5a6a:	4770      	bx	lr
   d5a6c:	2003e6ec 	.word	0x2003e6ec
   d5a70:	000d76ce 	.word	0x000d76ce

000d5a74 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a76:	4606      	mov	r6, r0
   d5a78:	460d      	mov	r5, r1
   d5a7a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5a7c:	2400      	movs	r4, #0
  while (size--) {
   d5a7e:	42bd      	cmp	r5, r7
   d5a80:	d00c      	beq.n	d5a9c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a82:	6833      	ldr	r3, [r6, #0]
   d5a84:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a88:	689b      	ldr	r3, [r3, #8]
   d5a8a:	4630      	mov	r0, r6
   d5a8c:	4798      	blx	r3
     if (chunk>=0)
   d5a8e:	2800      	cmp	r0, #0
   d5a90:	db01      	blt.n	d5a96 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a92:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5a94:	e7f3      	b.n	d5a7e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a96:	2c00      	cmp	r4, #0
   d5a98:	bf08      	it	eq
   d5a9a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5aa0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5aa0:	b570      	push	{r4, r5, r6, lr}
   d5aa2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5aa4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5aa6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5aa8:	b149      	cbz	r1, d5abe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5aaa:	f001 f934 	bl	d6d16 <strlen>
   d5aae:	682b      	ldr	r3, [r5, #0]
   d5ab0:	4602      	mov	r2, r0
   d5ab2:	4621      	mov	r1, r4
   d5ab4:	4628      	mov	r0, r5
   d5ab6:	68db      	ldr	r3, [r3, #12]
    }
   d5ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5abc:	4718      	bx	r3
    }
   d5abe:	bd70      	pop	{r4, r5, r6, pc}

000d5ac0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5ac0:	6803      	ldr	r3, [r0, #0]
   d5ac2:	689b      	ldr	r3, [r3, #8]
   d5ac4:	4718      	bx	r3

000d5ac6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5ac6:	b530      	push	{r4, r5, lr}
   d5ac8:	b08b      	sub	sp, #44	; 0x2c
   d5aca:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5acc:	2100      	movs	r1, #0
   d5ace:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5ad2:	2a01      	cmp	r2, #1
   d5ad4:	bf98      	it	ls
   d5ad6:	220a      	movls	r2, #10
   d5ad8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5adc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5ae0:	fb05 3312 	mls	r3, r5, r2, r3
   d5ae4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ae8:	2b09      	cmp	r3, #9
   d5aea:	bf94      	ite	ls
   d5aec:	3330      	addls	r3, #48	; 0x30
   d5aee:	3337      	addhi	r3, #55	; 0x37
   d5af0:	b2db      	uxtb	r3, r3
   d5af2:	4621      	mov	r1, r4
   d5af4:	f804 3901 	strb.w	r3, [r4], #-1
   d5af8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5afa:	2d00      	cmp	r5, #0
   d5afc:	d1ee      	bne.n	d5adc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5afe:	f7ff ffcf 	bl	d5aa0 <_ZN5Print5writeEPKc>
}
   d5b02:	b00b      	add	sp, #44	; 0x2c
   d5b04:	bd30      	pop	{r4, r5, pc}

000d5b06 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d5b06:	b510      	push	{r4, lr}
   d5b08:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b0a:	6800      	ldr	r0, [r0, #0]
   d5b0c:	b108      	cbz	r0, d5b12 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b0e:	f7fe fe9f 	bl	d4850 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5b12:	4620      	mov	r0, r4
   d5b14:	bd10      	pop	{r4, pc}
	...

000d5b18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5b18:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b1a:	4c06      	ldr	r4, [pc, #24]	; (d5b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5b1c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5b1e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b20:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5b22:	f7fe fe8d 	bl	d4840 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5b26:	4620      	mov	r0, r4
   d5b28:	4a03      	ldr	r2, [pc, #12]	; (d5b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5b2a:	4904      	ldr	r1, [pc, #16]	; (d5b3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5b30:	f000 b9fc 	b.w	d5f2c <__aeabi_atexit>
   d5b34:	2003e6f0 	.word	0x2003e6f0
   d5b38:	2003e354 	.word	0x2003e354
   d5b3c:	000d5b07 	.word	0x000d5b07

000d5b40 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b40:	b510      	push	{r4, lr}
   d5b42:	4604      	mov	r4, r0
{
	free(buffer);
   d5b44:	6800      	ldr	r0, [r0, #0]
   d5b46:	f7fe ff99 	bl	d4a7c <free>
}
   d5b4a:	4620      	mov	r0, r4
   d5b4c:	bd10      	pop	{r4, pc}

000d5b4e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b4e:	b510      	push	{r4, lr}
   d5b50:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5b52:	6800      	ldr	r0, [r0, #0]
   d5b54:	b108      	cbz	r0, d5b5a <_ZN6String10invalidateEv+0xc>
   d5b56:	f7fe ff91 	bl	d4a7c <free>
	buffer = NULL;
   d5b5a:	2300      	movs	r3, #0
   d5b5c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5b5e:	60a3      	str	r3, [r4, #8]
   d5b60:	6063      	str	r3, [r4, #4]
   d5b62:	bd10      	pop	{r4, pc}

000d5b64 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b64:	b538      	push	{r3, r4, r5, lr}
   d5b66:	4604      	mov	r4, r0
   d5b68:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b6a:	6800      	ldr	r0, [r0, #0]
   d5b6c:	3101      	adds	r1, #1
   d5b6e:	f7fe ff8d 	bl	d4a8c <realloc>
	if (newbuffer) {
   d5b72:	b110      	cbz	r0, d5b7a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5b74:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5b78:	2001      	movs	r0, #1
	}
	return 0;
}
   d5b7a:	bd38      	pop	{r3, r4, r5, pc}

000d5b7c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b7c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5b7e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b80:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5b82:	b113      	cbz	r3, d5b8a <_ZN6String7reserveEj+0xe>
   d5b84:	6843      	ldr	r3, [r0, #4]
   d5b86:	428b      	cmp	r3, r1
   d5b88:	d207      	bcs.n	d5b9a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	f7ff ffea 	bl	d5b64 <_ZN6String12changeBufferEj>
   d5b90:	b120      	cbz	r0, d5b9c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5b92:	68a3      	ldr	r3, [r4, #8]
   d5b94:	b90b      	cbnz	r3, d5b9a <_ZN6String7reserveEj+0x1e>
   d5b96:	6822      	ldr	r2, [r4, #0]
   d5b98:	7013      	strb	r3, [r2, #0]
   d5b9a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5b9c:	bd10      	pop	{r4, pc}

000d5b9e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b9e:	b570      	push	{r4, r5, r6, lr}
   d5ba0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5ba2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ba4:	4604      	mov	r4, r0
   d5ba6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5ba8:	f7ff ffe8 	bl	d5b7c <_ZN6String7reserveEj>
   d5bac:	b918      	cbnz	r0, d5bb6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5bae:	4620      	mov	r0, r4
   d5bb0:	f7ff ffcd 	bl	d5b4e <_ZN6String10invalidateEv>
		return *this;
   d5bb4:	e009      	b.n	d5bca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5bb6:	462a      	mov	r2, r5
   d5bb8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5bba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5bbc:	6820      	ldr	r0, [r4, #0]
   d5bbe:	f001 f841 	bl	d6c44 <memcpy>
	buffer[len] = 0;
   d5bc2:	6822      	ldr	r2, [r4, #0]
   d5bc4:	68a3      	ldr	r3, [r4, #8]
   d5bc6:	2100      	movs	r1, #0
   d5bc8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5bca:	4620      	mov	r0, r4
   d5bcc:	bd70      	pop	{r4, r5, r6, pc}

000d5bce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5bce:	b538      	push	{r3, r4, r5, lr}
   d5bd0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5bd2:	460c      	mov	r4, r1
   d5bd4:	b141      	cbz	r1, d5be8 <_ZN6StringaSEPKc+0x1a>
   d5bd6:	4608      	mov	r0, r1
   d5bd8:	f001 f89d 	bl	d6d16 <strlen>
   d5bdc:	4621      	mov	r1, r4
   d5bde:	4602      	mov	r2, r0
   d5be0:	4628      	mov	r0, r5
   d5be2:	f7ff ffdc 	bl	d5b9e <_ZN6String4copyEPKcj>
   d5be6:	e001      	b.n	d5bec <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5be8:	f7ff ffb1 	bl	d5b4e <_ZN6String10invalidateEv>

	return *this;
}
   d5bec:	4628      	mov	r0, r5
   d5bee:	bd38      	pop	{r3, r4, r5, pc}

000d5bf0 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5bf0:	b510      	push	{r4, lr}
   d5bf2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5bf4:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5bf6:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5bf8:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5bfa:	6063      	str	r3, [r4, #4]
	len = 0;
   d5bfc:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5bfe:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5c00:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5c02:	a901      	add	r1, sp, #4
   d5c04:	f000 f840 	bl	d5c88 <itoa>
	*this = buf;
   d5c08:	a901      	add	r1, sp, #4
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	f7ff ffdf 	bl	d5bce <_ZN6StringaSEPKc>
}
   d5c10:	4620      	mov	r0, r4
   d5c12:	b00a      	add	sp, #40	; 0x28
   d5c14:	bd10      	pop	{r4, pc}

000d5c16 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5c16:	b510      	push	{r4, lr}
   d5c18:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5c1a:	f001 f87c 	bl	d6d16 <strlen>
   d5c1e:	3801      	subs	r0, #1
   d5c20:	1823      	adds	r3, r4, r0
   d5c22:	4620      	mov	r0, r4
	while(i<j){
   d5c24:	4298      	cmp	r0, r3
   d5c26:	d206      	bcs.n	d5c36 <_Z11str_reversePc+0x20>
		c = *i;
   d5c28:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5c2a:	7819      	ldrb	r1, [r3, #0]
   d5c2c:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5c30:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5c34:	e7f6      	b.n	d5c24 <_Z11str_reversePc+0xe>
   d5c36:	bd10      	pop	{r4, pc}

000d5c38 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5c38:	b570      	push	{r4, r5, r6, lr}
   d5c3a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5c3c:	1e91      	subs	r1, r2, #2
   d5c3e:	2922      	cmp	r1, #34	; 0x22
   d5c40:	d820      	bhi.n	d5c84 <ultoa+0x4c>
   d5c42:	4625      	mov	r5, r4
   d5c44:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c46:	b910      	cbnz	r0, d5c4e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c48:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c4a:	2230      	movs	r2, #48	; 0x30
   d5c4c:	e00e      	b.n	d5c6c <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5c4e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5c52:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5c56:	b2c1      	uxtb	r1, r0
   d5c58:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5c5c:	2809      	cmp	r0, #9
                *ptr += '0';
   d5c5e:	bf94      	ite	ls
   d5c60:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5c62:	3157      	addhi	r1, #87	; 0x57
   d5c64:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5c68:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c6a:	e7eb      	b.n	d5c44 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c6c:	4299      	cmp	r1, r3
   d5c6e:	d202      	bcs.n	d5c76 <ultoa+0x3e>
            *ptr++ = '0';
   d5c70:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c74:	e7fa      	b.n	d5c6c <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5c76:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5c78:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5c7a:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5c7c:	f7ff ffcb 	bl	d5c16 <_Z11str_reversePc>
	return buffer;
   d5c80:	4620      	mov	r0, r4
   d5c82:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5c84:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5c86:	bd70      	pop	{r4, r5, r6, pc}

000d5c88 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5c88:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5c8a:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5c8c:	460c      	mov	r4, r1
   d5c8e:	4615      	mov	r5, r2
	if(a<0){
   d5c90:	da0b      	bge.n	d5caa <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5c96:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5c9a:	bf14      	ite	ne
   d5c9c:	4258      	negne	r0, r3
   d5c9e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5ca0:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5ca2:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5ca4:	462a      	mov	r2, r5
   d5ca6:	4419      	add	r1, r3
   d5ca8:	e000      	b.n	d5cac <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5caa:	2301      	movs	r3, #1
   d5cac:	f7ff ffc4 	bl	d5c38 <ultoa>
	}
	return buffer;
}
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	bd38      	pop	{r3, r4, r5, pc}

000d5cb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5cb4:	b510      	push	{r4, lr}
   d5cb6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5cb8:	6800      	ldr	r0, [r0, #0]
   d5cba:	b118      	cbz	r0, d5cc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5cbc:	f7fe fede 	bl	d4a7c <free>
            wakeupSource_ = nullptr;
   d5cc0:	2300      	movs	r3, #0
   d5cc2:	6023      	str	r3, [r4, #0]
   d5cc4:	bd10      	pop	{r4, pc}

000d5cc6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5cc6:	b510      	push	{r4, lr}
   d5cc8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5cca:	f7ff fff3 	bl	d5cb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5cd2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5cd4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5cd8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5cda:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5cdc:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5cde:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5ce2:	f8c0 2006 	str.w	r2, [r0, #6]
   d5ce6:	889b      	ldrh	r3, [r3, #4]
   d5ce8:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5cea:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d5cec:	f7ff ffe2 	bl	d5cb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d5cf0:	682b      	ldr	r3, [r5, #0]
   d5cf2:	b113      	cbz	r3, d5cfa <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5cf4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d00 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5d00:	b538      	push	{r3, r4, r5, lr}
   d5d02:	460c      	mov	r4, r1
   d5d04:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5d06:	f7ff ffd5 	bl	d5cb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d5d0a:	b144      	cbz	r4, d5d1e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5d0c:	8820      	ldrh	r0, [r4, #0]
   d5d0e:	f7fe fead 	bl	d4a6c <malloc>
   d5d12:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5d14:	b128      	cbz	r0, d5d22 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5d16:	8822      	ldrh	r2, [r4, #0]
   d5d18:	4621      	mov	r1, r4
   d5d1a:	f000 ff93 	bl	d6c44 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d5d1e:	2000      	movs	r0, #0
   d5d20:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d5d22:	4801      	ldr	r0, [pc, #4]	; (d5d28 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d5d24:	bd38      	pop	{r3, r4, r5, pc}
   d5d26:	bf00      	nop
   d5d28:	fffffefc 	.word	0xfffffefc

000d5d2c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d5d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d2e:	4d30      	ldr	r5, [pc, #192]	; (d5df0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5d30:	7d0b      	ldrb	r3, [r1, #20]
   d5d32:	4604      	mov	r4, r0
   d5d34:	b08b      	sub	sp, #44	; 0x2c
   d5d36:	4608      	mov	r0, r1
   d5d38:	1daf      	adds	r7, r5, #6
   d5d3a:	b313      	cbz	r3, d5d82 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d5d3c:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5d3e:	791b      	ldrb	r3, [r3, #4]
   d5d40:	b1fb      	cbz	r3, d5d82 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d42:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5d48:	a902      	add	r1, sp, #8
   d5d4a:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d4c:	9202      	str	r2, [sp, #8]
   d5d4e:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d52:	f88d 200e 	strb.w	r2, [sp, #14]
   d5d56:	f8ad 2010 	strh.w	r2, [sp, #16]
   d5d5a:	f8ad 3012 	strh.w	r3, [sp, #18]
   d5d5e:	f7fe fe7b 	bl	d4a58 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5d62:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d5d64:	b200      	sxth	r0, r0
   d5d66:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d5d6a:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5d6e:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d5d70:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d5d72:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d5d76:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5d78:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d7a:	4628      	mov	r0, r5
   d5d7c:	f7ff ffc0 	bl	d5d00 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d5d80:	e01c      	b.n	d5dbc <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d5d82:	2320      	movs	r3, #32
   d5d84:	2600      	movs	r6, #0
   d5d86:	9302      	str	r3, [sp, #8]
   d5d88:	4b1a      	ldr	r3, [pc, #104]	; (d5df4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d5d8a:	9300      	str	r3, [sp, #0]
   d5d8c:	491a      	ldr	r1, [pc, #104]	; (d5df8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d5d8e:	9603      	str	r6, [sp, #12]
   d5d90:	4633      	mov	r3, r6
   d5d92:	2032      	movs	r0, #50	; 0x32
   d5d94:	aa02      	add	r2, sp, #8
   d5d96:	f7fe fd9b 	bl	d48d0 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d9e:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5da2:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d5da4:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5da8:	4811      	ldr	r0, [pc, #68]	; (d5df0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5daa:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5dac:	f88d 600e 	strb.w	r6, [sp, #14]
   d5db0:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d5db4:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5db8:	f7ff ff8b 	bl	d5cd2 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5dbc:	a802      	add	r0, sp, #8
   d5dbe:	f7ff ff79 	bl	d5cb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	6023      	str	r3, [r4, #0]
   d5dc6:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5dc8:	71a3      	strb	r3, [r4, #6]
   d5dca:	8123      	strh	r3, [r4, #8]
   d5dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5dd0:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d5dd2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5dd6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5dd8:	683b      	ldr	r3, [r7, #0]
   d5dda:	f8c4 3006 	str.w	r3, [r4, #6]
   d5dde:	88bb      	ldrh	r3, [r7, #4]
   d5de0:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5de2:	6829      	ldr	r1, [r5, #0]
   d5de4:	4620      	mov	r0, r4
   d5de6:	f7ff ff8b 	bl	d5d00 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5dea:	4620      	mov	r0, r4
   d5dec:	b00b      	add	sp, #44	; 0x2c
   d5dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5df0:	2003e6f4 	.word	0x2003e6f4
   d5df4:	000d7743 	.word	0x000d7743
   d5df8:	000d773c 	.word	0x000d773c

000d5dfc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5dfc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5dfe:	4c09      	ldr	r4, [pc, #36]	; (d5e24 <_GLOBAL__sub_I_System+0x28>)
   d5e00:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5e02:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5e06:	6020      	str	r0, [r4, #0]
   d5e08:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5e0a:	71a0      	strb	r0, [r4, #6]
   d5e0c:	8120      	strh	r0, [r4, #8]
   d5e0e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e10:	f7fe fde6 	bl	d49e0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5e14:	4620      	mov	r0, r4
   d5e16:	4a04      	ldr	r2, [pc, #16]	; (d5e28 <_GLOBAL__sub_I_System+0x2c>)
   d5e18:	4904      	ldr	r1, [pc, #16]	; (d5e2c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5e1e:	f000 b885 	b.w	d5f2c <__aeabi_atexit>
   d5e22:	bf00      	nop
   d5e24:	2003e6f4 	.word	0x2003e6f4
   d5e28:	2003e354 	.word	0x2003e354
   d5e2c:	000d5cc7 	.word	0x000d5cc7

000d5e30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e30:	2200      	movs	r2, #0
   d5e32:	4611      	mov	r1, r2
   d5e34:	6840      	ldr	r0, [r0, #4]
   d5e36:	f7fe bdb3 	b.w	d49a0 <network_listening>

000d5e3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e3a:	2200      	movs	r2, #0
   d5e3c:	4611      	mov	r1, r2
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	f7fe bdbe 	b.w	d49c0 <network_get_listen_timeout>

000d5e44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e44:	2200      	movs	r2, #0
   d5e46:	6840      	ldr	r0, [r0, #4]
   d5e48:	f7fe bdb2 	b.w	d49b0 <network_set_listen_timeout>

000d5e4c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e4c:	2200      	movs	r2, #0
   d5e4e:	f081 0101 	eor.w	r1, r1, #1
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7fe bd9c 	b.w	d4990 <network_listen>

000d5e58 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e58:	2300      	movs	r3, #0
   d5e5a:	461a      	mov	r2, r3
   d5e5c:	4619      	mov	r1, r3
   d5e5e:	6840      	ldr	r0, [r0, #4]
   d5e60:	f7fe bd8e 	b.w	d4980 <network_off>

000d5e64 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e64:	2300      	movs	r3, #0
   d5e66:	461a      	mov	r2, r3
   d5e68:	4619      	mov	r1, r3
   d5e6a:	6840      	ldr	r0, [r0, #4]
   d5e6c:	f7fe bd80 	b.w	d4970 <network_on>

000d5e70 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e70:	2200      	movs	r2, #0
   d5e72:	4611      	mov	r1, r2
   d5e74:	6840      	ldr	r0, [r0, #4]
   d5e76:	f7fe bd73 	b.w	d4960 <network_ready>

000d5e7a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e7a:	2200      	movs	r2, #0
   d5e7c:	4611      	mov	r1, r2
   d5e7e:	6840      	ldr	r0, [r0, #4]
   d5e80:	f7fe bd5e 	b.w	d4940 <network_connecting>

000d5e84 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e84:	2200      	movs	r2, #0
   d5e86:	2102      	movs	r1, #2
   d5e88:	6840      	ldr	r0, [r0, #4]
   d5e8a:	f7fe bd61 	b.w	d4950 <network_disconnect>

000d5e8e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e8e:	2300      	movs	r3, #0
   d5e90:	461a      	mov	r2, r3
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7fe bd4c 	b.w	d4930 <network_connect>

000d5e98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5e98:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e9a:	2203      	movs	r2, #3
   d5e9c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e9e:	4a02      	ldr	r2, [pc, #8]	; (d5ea8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ea0:	601a      	str	r2, [r3, #0]
   d5ea2:	4770      	bx	lr
   d5ea4:	2003e700 	.word	0x2003e700
   d5ea8:	000d7774 	.word	0x000d7774

000d5eac <_Z17acquireWireBufferv>:
   d5eac:	b570      	push	{r4, r5, r6, lr}
   d5eae:	4604      	mov	r4, r0
   d5eb0:	2514      	movs	r5, #20
   d5eb2:	462a      	mov	r2, r5
   d5eb4:	4e09      	ldr	r6, [pc, #36]	; (d5edc <_Z17acquireWireBufferv+0x30>)
   d5eb6:	2100      	movs	r1, #0
   d5eb8:	f000 fecf 	bl	d6c5a <memset>
   d5ebc:	8025      	strh	r5, [r4, #0]
   d5ebe:	2520      	movs	r5, #32
   d5ec0:	4631      	mov	r1, r6
   d5ec2:	60a5      	str	r5, [r4, #8]
   d5ec4:	6125      	str	r5, [r4, #16]
   d5ec6:	4628      	mov	r0, r5
   d5ec8:	f000 f840 	bl	d5f4c <_ZnajRKSt9nothrow_t>
   d5ecc:	4631      	mov	r1, r6
   d5ece:	6060      	str	r0, [r4, #4]
   d5ed0:	4628      	mov	r0, r5
   d5ed2:	f000 f83b 	bl	d5f4c <_ZnajRKSt9nothrow_t>
   d5ed6:	60e0      	str	r0, [r4, #12]
   d5ed8:	4620      	mov	r0, r4
   d5eda:	bd70      	pop	{r4, r5, r6, pc}
   d5edc:	000d77a0 	.word	0x000d77a0

000d5ee0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ee0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ee2:	4d0e      	ldr	r5, [pc, #56]	; (d5f1c <_Z19__fetch_global_Wirev+0x3c>)
   d5ee4:	6829      	ldr	r1, [r5, #0]
   d5ee6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5eea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5eec:	d113      	bne.n	d5f16 <_Z19__fetch_global_Wirev+0x36>
   d5eee:	4628      	mov	r0, r5
   d5ef0:	f7fe f8d9 	bl	d40a6 <__cxa_guard_acquire>
   d5ef4:	b178      	cbz	r0, d5f16 <_Z19__fetch_global_Wirev+0x36>
   d5ef6:	a801      	add	r0, sp, #4
   d5ef8:	f7ff ffd8 	bl	d5eac <_Z17acquireWireBufferv>
   d5efc:	aa01      	add	r2, sp, #4
   d5efe:	4621      	mov	r1, r4
   d5f00:	4807      	ldr	r0, [pc, #28]	; (d5f20 <_Z19__fetch_global_Wirev+0x40>)
   d5f02:	f7fe ffb9 	bl	d4e78 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5f06:	4628      	mov	r0, r5
   d5f08:	f7fe f8d2 	bl	d40b0 <__cxa_guard_release>
   d5f0c:	4a05      	ldr	r2, [pc, #20]	; (d5f24 <_Z19__fetch_global_Wirev+0x44>)
   d5f0e:	4906      	ldr	r1, [pc, #24]	; (d5f28 <_Z19__fetch_global_Wirev+0x48>)
   d5f10:	4803      	ldr	r0, [pc, #12]	; (d5f20 <_Z19__fetch_global_Wirev+0x40>)
   d5f12:	f000 f80b 	bl	d5f2c <__aeabi_atexit>
	return wire;
}
   d5f16:	4802      	ldr	r0, [pc, #8]	; (d5f20 <_Z19__fetch_global_Wirev+0x40>)
   d5f18:	b007      	add	sp, #28
   d5f1a:	bd30      	pop	{r4, r5, pc}
   d5f1c:	2003e708 	.word	0x2003e708
   d5f20:	2003e70c 	.word	0x2003e70c
   d5f24:	2003e354 	.word	0x2003e354
   d5f28:	000d4e21 	.word	0x000d4e21

000d5f2c <__aeabi_atexit>:
   d5f2c:	460b      	mov	r3, r1
   d5f2e:	4601      	mov	r1, r0
   d5f30:	4618      	mov	r0, r3
   d5f32:	f000 bd81 	b.w	d6a38 <__cxa_atexit>
	...

000d5f38 <_ZSt15get_new_handlerv>:
   d5f38:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <_ZSt15get_new_handlerv+0xc>)
   d5f3a:	6818      	ldr	r0, [r3, #0]
   d5f3c:	f3bf 8f5f 	dmb	sy
   d5f40:	4770      	bx	lr
   d5f42:	bf00      	nop
   d5f44:	2003e724 	.word	0x2003e724

000d5f48 <_ZdlPvj>:
   d5f48:	f7fe b8a9 	b.w	d409e <_ZdlPv>

000d5f4c <_ZnajRKSt9nothrow_t>:
   d5f4c:	f000 b800 	b.w	d5f50 <_ZnwjRKSt9nothrow_t>

000d5f50 <_ZnwjRKSt9nothrow_t>:
   d5f50:	b510      	push	{r4, lr}
   d5f52:	2800      	cmp	r0, #0
   d5f54:	bf14      	ite	ne
   d5f56:	4604      	movne	r4, r0
   d5f58:	2401      	moveq	r4, #1
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	f7fe fd86 	bl	d4a6c <malloc>
   d5f60:	b920      	cbnz	r0, d5f6c <_ZnwjRKSt9nothrow_t+0x1c>
   d5f62:	f7ff ffe9 	bl	d5f38 <_ZSt15get_new_handlerv>
   d5f66:	b108      	cbz	r0, d5f6c <_ZnwjRKSt9nothrow_t+0x1c>
   d5f68:	4780      	blx	r0
   d5f6a:	e7f6      	b.n	d5f5a <_ZnwjRKSt9nothrow_t+0xa>
   d5f6c:	bd10      	pop	{r4, pc}

000d5f6e <_ZSt25__throw_bad_function_callv>:
   d5f6e:	b508      	push	{r3, lr}
   d5f70:	f7fe fd9c 	bl	d4aac <abort>

000d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f74:	4b18      	ldr	r3, [pc, #96]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d1      	lsls	r1, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b16      	ldr	r3, [pc, #88]	; (d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d2      	lsls	r2, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b14      	ldr	r3, [pc, #80]	; (d5fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d0      	lsls	r0, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b12      	ldr	r3, [pc, #72]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d1      	lsls	r1, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b10      	ldr	r3, [pc, #64]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d2      	lsls	r2, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b0e      	ldr	r3, [pc, #56]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d0      	lsls	r0, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b0c      	ldr	r3, [pc, #48]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d1      	lsls	r1, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b0a      	ldr	r3, [pc, #40]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d2      	lsls	r2, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4770      	bx	lr
   d5fd6:	bf00      	nop
   d5fd8:	2003e744 	.word	0x2003e744
   d5fdc:	2003e740 	.word	0x2003e740
   d5fe0:	2003e73c 	.word	0x2003e73c
   d5fe4:	2003e738 	.word	0x2003e738
   d5fe8:	2003e734 	.word	0x2003e734
   d5fec:	2003e730 	.word	0x2003e730
   d5ff0:	2003e72c 	.word	0x2003e72c
   d5ff4:	2003e728 	.word	0x2003e728

000d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ff8:	4b24      	ldr	r3, [pc, #144]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d0      	lsls	r0, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b22      	ldr	r3, [pc, #136]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d1      	lsls	r1, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b20      	ldr	r3, [pc, #128]	; (d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d2      	lsls	r2, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b1e      	ldr	r3, [pc, #120]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d0      	lsls	r0, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b1c      	ldr	r3, [pc, #112]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d1      	lsls	r1, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b1a      	ldr	r3, [pc, #104]	; (d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d2      	lsls	r2, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b18      	ldr	r3, [pc, #96]	; (d60a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d0      	lsls	r0, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b16      	ldr	r3, [pc, #88]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d1      	lsls	r1, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b14      	ldr	r3, [pc, #80]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d2      	lsls	r2, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b12      	ldr	r3, [pc, #72]	; (d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d0      	lsls	r0, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b10      	ldr	r3, [pc, #64]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d1      	lsls	r1, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b0e      	ldr	r3, [pc, #56]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d2      	lsls	r2, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4770      	bx	lr
   d608a:	bf00      	nop
   d608c:	2003e774 	.word	0x2003e774
   d6090:	2003e770 	.word	0x2003e770
   d6094:	2003e76c 	.word	0x2003e76c
   d6098:	2003e768 	.word	0x2003e768
   d609c:	2003e764 	.word	0x2003e764
   d60a0:	2003e760 	.word	0x2003e760
   d60a4:	2003e75c 	.word	0x2003e75c
   d60a8:	2003e758 	.word	0x2003e758
   d60ac:	2003e754 	.word	0x2003e754
   d60b0:	2003e750 	.word	0x2003e750
   d60b4:	2003e74c 	.word	0x2003e74c
   d60b8:	2003e748 	.word	0x2003e748

000d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d60bc:	4b24      	ldr	r3, [pc, #144]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d0      	lsls	r0, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4b22      	ldr	r3, [pc, #136]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d1      	lsls	r1, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b20      	ldr	r3, [pc, #128]	; (d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d2      	lsls	r2, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b1e      	ldr	r3, [pc, #120]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d0      	lsls	r0, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b1c      	ldr	r3, [pc, #112]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d1      	lsls	r1, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b1a      	ldr	r3, [pc, #104]	; (d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d2      	lsls	r2, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b18      	ldr	r3, [pc, #96]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d0      	lsls	r0, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b16      	ldr	r3, [pc, #88]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d1      	lsls	r1, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b14      	ldr	r3, [pc, #80]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d2      	lsls	r2, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b12      	ldr	r3, [pc, #72]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d0      	lsls	r0, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b10      	ldr	r3, [pc, #64]	; (d6178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d1      	lsls	r1, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b0e      	ldr	r3, [pc, #56]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d2      	lsls	r2, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4770      	bx	lr
   d614e:	bf00      	nop
   d6150:	2003e7a4 	.word	0x2003e7a4
   d6154:	2003e7a0 	.word	0x2003e7a0
   d6158:	2003e79c 	.word	0x2003e79c
   d615c:	2003e798 	.word	0x2003e798
   d6160:	2003e794 	.word	0x2003e794
   d6164:	2003e790 	.word	0x2003e790
   d6168:	2003e78c 	.word	0x2003e78c
   d616c:	2003e788 	.word	0x2003e788
   d6170:	2003e784 	.word	0x2003e784
   d6174:	2003e780 	.word	0x2003e780
   d6178:	2003e77c 	.word	0x2003e77c
   d617c:	2003e778 	.word	0x2003e778

000d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6180:	4b18      	ldr	r3, [pc, #96]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d1      	lsls	r1, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b16      	ldr	r3, [pc, #88]	; (d61e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d2      	lsls	r2, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b14      	ldr	r3, [pc, #80]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d0      	lsls	r0, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b12      	ldr	r3, [pc, #72]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d1      	lsls	r1, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b10      	ldr	r3, [pc, #64]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d2      	lsls	r2, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b0e      	ldr	r3, [pc, #56]	; (d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d0      	lsls	r0, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b0c      	ldr	r3, [pc, #48]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d1      	lsls	r1, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b0a      	ldr	r3, [pc, #40]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d2      	lsls	r2, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4770      	bx	lr
   d61e2:	bf00      	nop
   d61e4:	2003e7c4 	.word	0x2003e7c4
   d61e8:	2003e7c0 	.word	0x2003e7c0
   d61ec:	2003e7bc 	.word	0x2003e7bc
   d61f0:	2003e7b8 	.word	0x2003e7b8
   d61f4:	2003e7b4 	.word	0x2003e7b4
   d61f8:	2003e7b0 	.word	0x2003e7b0
   d61fc:	2003e7ac 	.word	0x2003e7ac
   d6200:	2003e7a8 	.word	0x2003e7a8

000d6204 <__aeabi_drsub>:
   d6204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6208:	e002      	b.n	d6210 <__adddf3>
   d620a:	bf00      	nop

000d620c <__aeabi_dsub>:
   d620c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6210 <__adddf3>:
   d6210:	b530      	push	{r4, r5, lr}
   d6212:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6216:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d621a:	ea94 0f05 	teq	r4, r5
   d621e:	bf08      	it	eq
   d6220:	ea90 0f02 	teqeq	r0, r2
   d6224:	bf1f      	itttt	ne
   d6226:	ea54 0c00 	orrsne.w	ip, r4, r0
   d622a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d622e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6236:	f000 80e2 	beq.w	d63fe <__adddf3+0x1ee>
   d623a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d623e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6242:	bfb8      	it	lt
   d6244:	426d      	neglt	r5, r5
   d6246:	dd0c      	ble.n	d6262 <__adddf3+0x52>
   d6248:	442c      	add	r4, r5
   d624a:	ea80 0202 	eor.w	r2, r0, r2
   d624e:	ea81 0303 	eor.w	r3, r1, r3
   d6252:	ea82 0000 	eor.w	r0, r2, r0
   d6256:	ea83 0101 	eor.w	r1, r3, r1
   d625a:	ea80 0202 	eor.w	r2, r0, r2
   d625e:	ea81 0303 	eor.w	r3, r1, r3
   d6262:	2d36      	cmp	r5, #54	; 0x36
   d6264:	bf88      	it	hi
   d6266:	bd30      	pophi	{r4, r5, pc}
   d6268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d626c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6278:	d002      	beq.n	d6280 <__adddf3+0x70>
   d627a:	4240      	negs	r0, r0
   d627c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6284:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d628c:	d002      	beq.n	d6294 <__adddf3+0x84>
   d628e:	4252      	negs	r2, r2
   d6290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6294:	ea94 0f05 	teq	r4, r5
   d6298:	f000 80a7 	beq.w	d63ea <__adddf3+0x1da>
   d629c:	f1a4 0401 	sub.w	r4, r4, #1
   d62a0:	f1d5 0e20 	rsbs	lr, r5, #32
   d62a4:	db0d      	blt.n	d62c2 <__adddf3+0xb2>
   d62a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d62aa:	fa22 f205 	lsr.w	r2, r2, r5
   d62ae:	1880      	adds	r0, r0, r2
   d62b0:	f141 0100 	adc.w	r1, r1, #0
   d62b4:	fa03 f20e 	lsl.w	r2, r3, lr
   d62b8:	1880      	adds	r0, r0, r2
   d62ba:	fa43 f305 	asr.w	r3, r3, r5
   d62be:	4159      	adcs	r1, r3
   d62c0:	e00e      	b.n	d62e0 <__adddf3+0xd0>
   d62c2:	f1a5 0520 	sub.w	r5, r5, #32
   d62c6:	f10e 0e20 	add.w	lr, lr, #32
   d62ca:	2a01      	cmp	r2, #1
   d62cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d62d0:	bf28      	it	cs
   d62d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d62d6:	fa43 f305 	asr.w	r3, r3, r5
   d62da:	18c0      	adds	r0, r0, r3
   d62dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d62e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62e4:	d507      	bpl.n	d62f6 <__adddf3+0xe6>
   d62e6:	f04f 0e00 	mov.w	lr, #0
   d62ea:	f1dc 0c00 	rsbs	ip, ip, #0
   d62ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d62f2:	eb6e 0101 	sbc.w	r1, lr, r1
   d62f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d62fa:	d31b      	bcc.n	d6334 <__adddf3+0x124>
   d62fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6300:	d30c      	bcc.n	d631c <__adddf3+0x10c>
   d6302:	0849      	lsrs	r1, r1, #1
   d6304:	ea5f 0030 	movs.w	r0, r0, rrx
   d6308:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d630c:	f104 0401 	add.w	r4, r4, #1
   d6310:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6318:	f080 809a 	bcs.w	d6450 <__adddf3+0x240>
   d631c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6320:	bf08      	it	eq
   d6322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6326:	f150 0000 	adcs.w	r0, r0, #0
   d632a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d632e:	ea41 0105 	orr.w	r1, r1, r5
   d6332:	bd30      	pop	{r4, r5, pc}
   d6334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6338:	4140      	adcs	r0, r0
   d633a:	eb41 0101 	adc.w	r1, r1, r1
   d633e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6342:	f1a4 0401 	sub.w	r4, r4, #1
   d6346:	d1e9      	bne.n	d631c <__adddf3+0x10c>
   d6348:	f091 0f00 	teq	r1, #0
   d634c:	bf04      	itt	eq
   d634e:	4601      	moveq	r1, r0
   d6350:	2000      	moveq	r0, #0
   d6352:	fab1 f381 	clz	r3, r1
   d6356:	bf08      	it	eq
   d6358:	3320      	addeq	r3, #32
   d635a:	f1a3 030b 	sub.w	r3, r3, #11
   d635e:	f1b3 0220 	subs.w	r2, r3, #32
   d6362:	da0c      	bge.n	d637e <__adddf3+0x16e>
   d6364:	320c      	adds	r2, #12
   d6366:	dd08      	ble.n	d637a <__adddf3+0x16a>
   d6368:	f102 0c14 	add.w	ip, r2, #20
   d636c:	f1c2 020c 	rsb	r2, r2, #12
   d6370:	fa01 f00c 	lsl.w	r0, r1, ip
   d6374:	fa21 f102 	lsr.w	r1, r1, r2
   d6378:	e00c      	b.n	d6394 <__adddf3+0x184>
   d637a:	f102 0214 	add.w	r2, r2, #20
   d637e:	bfd8      	it	le
   d6380:	f1c2 0c20 	rsble	ip, r2, #32
   d6384:	fa01 f102 	lsl.w	r1, r1, r2
   d6388:	fa20 fc0c 	lsr.w	ip, r0, ip
   d638c:	bfdc      	itt	le
   d638e:	ea41 010c 	orrle.w	r1, r1, ip
   d6392:	4090      	lslle	r0, r2
   d6394:	1ae4      	subs	r4, r4, r3
   d6396:	bfa2      	ittt	ge
   d6398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d639c:	4329      	orrge	r1, r5
   d639e:	bd30      	popge	{r4, r5, pc}
   d63a0:	ea6f 0404 	mvn.w	r4, r4
   d63a4:	3c1f      	subs	r4, #31
   d63a6:	da1c      	bge.n	d63e2 <__adddf3+0x1d2>
   d63a8:	340c      	adds	r4, #12
   d63aa:	dc0e      	bgt.n	d63ca <__adddf3+0x1ba>
   d63ac:	f104 0414 	add.w	r4, r4, #20
   d63b0:	f1c4 0220 	rsb	r2, r4, #32
   d63b4:	fa20 f004 	lsr.w	r0, r0, r4
   d63b8:	fa01 f302 	lsl.w	r3, r1, r2
   d63bc:	ea40 0003 	orr.w	r0, r0, r3
   d63c0:	fa21 f304 	lsr.w	r3, r1, r4
   d63c4:	ea45 0103 	orr.w	r1, r5, r3
   d63c8:	bd30      	pop	{r4, r5, pc}
   d63ca:	f1c4 040c 	rsb	r4, r4, #12
   d63ce:	f1c4 0220 	rsb	r2, r4, #32
   d63d2:	fa20 f002 	lsr.w	r0, r0, r2
   d63d6:	fa01 f304 	lsl.w	r3, r1, r4
   d63da:	ea40 0003 	orr.w	r0, r0, r3
   d63de:	4629      	mov	r1, r5
   d63e0:	bd30      	pop	{r4, r5, pc}
   d63e2:	fa21 f004 	lsr.w	r0, r1, r4
   d63e6:	4629      	mov	r1, r5
   d63e8:	bd30      	pop	{r4, r5, pc}
   d63ea:	f094 0f00 	teq	r4, #0
   d63ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d63f2:	bf06      	itte	eq
   d63f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d63f8:	3401      	addeq	r4, #1
   d63fa:	3d01      	subne	r5, #1
   d63fc:	e74e      	b.n	d629c <__adddf3+0x8c>
   d63fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6402:	bf18      	it	ne
   d6404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6408:	d029      	beq.n	d645e <__adddf3+0x24e>
   d640a:	ea94 0f05 	teq	r4, r5
   d640e:	bf08      	it	eq
   d6410:	ea90 0f02 	teqeq	r0, r2
   d6414:	d005      	beq.n	d6422 <__adddf3+0x212>
   d6416:	ea54 0c00 	orrs.w	ip, r4, r0
   d641a:	bf04      	itt	eq
   d641c:	4619      	moveq	r1, r3
   d641e:	4610      	moveq	r0, r2
   d6420:	bd30      	pop	{r4, r5, pc}
   d6422:	ea91 0f03 	teq	r1, r3
   d6426:	bf1e      	ittt	ne
   d6428:	2100      	movne	r1, #0
   d642a:	2000      	movne	r0, #0
   d642c:	bd30      	popne	{r4, r5, pc}
   d642e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6432:	d105      	bne.n	d6440 <__adddf3+0x230>
   d6434:	0040      	lsls	r0, r0, #1
   d6436:	4149      	adcs	r1, r1
   d6438:	bf28      	it	cs
   d643a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d643e:	bd30      	pop	{r4, r5, pc}
   d6440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6444:	bf3c      	itt	cc
   d6446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d644a:	bd30      	popcc	{r4, r5, pc}
   d644c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6458:	f04f 0000 	mov.w	r0, #0
   d645c:	bd30      	pop	{r4, r5, pc}
   d645e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6462:	bf1a      	itte	ne
   d6464:	4619      	movne	r1, r3
   d6466:	4610      	movne	r0, r2
   d6468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d646c:	bf1c      	itt	ne
   d646e:	460b      	movne	r3, r1
   d6470:	4602      	movne	r2, r0
   d6472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6476:	bf06      	itte	eq
   d6478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d647c:	ea91 0f03 	teqeq	r1, r3
   d6480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6484:	bd30      	pop	{r4, r5, pc}
   d6486:	bf00      	nop

000d6488 <__aeabi_ui2d>:
   d6488:	f090 0f00 	teq	r0, #0
   d648c:	bf04      	itt	eq
   d648e:	2100      	moveq	r1, #0
   d6490:	4770      	bxeq	lr
   d6492:	b530      	push	{r4, r5, lr}
   d6494:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6498:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d649c:	f04f 0500 	mov.w	r5, #0
   d64a0:	f04f 0100 	mov.w	r1, #0
   d64a4:	e750      	b.n	d6348 <__adddf3+0x138>
   d64a6:	bf00      	nop

000d64a8 <__aeabi_i2d>:
   d64a8:	f090 0f00 	teq	r0, #0
   d64ac:	bf04      	itt	eq
   d64ae:	2100      	moveq	r1, #0
   d64b0:	4770      	bxeq	lr
   d64b2:	b530      	push	{r4, r5, lr}
   d64b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d64c0:	bf48      	it	mi
   d64c2:	4240      	negmi	r0, r0
   d64c4:	f04f 0100 	mov.w	r1, #0
   d64c8:	e73e      	b.n	d6348 <__adddf3+0x138>
   d64ca:	bf00      	nop

000d64cc <__aeabi_f2d>:
   d64cc:	0042      	lsls	r2, r0, #1
   d64ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d64d2:	ea4f 0131 	mov.w	r1, r1, rrx
   d64d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d64da:	bf1f      	itttt	ne
   d64dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d64e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d64e8:	4770      	bxne	lr
   d64ea:	f092 0f00 	teq	r2, #0
   d64ee:	bf14      	ite	ne
   d64f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64f4:	4770      	bxeq	lr
   d64f6:	b530      	push	{r4, r5, lr}
   d64f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d64fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6504:	e720      	b.n	d6348 <__adddf3+0x138>
   d6506:	bf00      	nop

000d6508 <__aeabi_ul2d>:
   d6508:	ea50 0201 	orrs.w	r2, r0, r1
   d650c:	bf08      	it	eq
   d650e:	4770      	bxeq	lr
   d6510:	b530      	push	{r4, r5, lr}
   d6512:	f04f 0500 	mov.w	r5, #0
   d6516:	e00a      	b.n	d652e <__aeabi_l2d+0x16>

000d6518 <__aeabi_l2d>:
   d6518:	ea50 0201 	orrs.w	r2, r0, r1
   d651c:	bf08      	it	eq
   d651e:	4770      	bxeq	lr
   d6520:	b530      	push	{r4, r5, lr}
   d6522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6526:	d502      	bpl.n	d652e <__aeabi_l2d+0x16>
   d6528:	4240      	negs	r0, r0
   d652a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d652e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6532:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d653a:	f43f aedc 	beq.w	d62f6 <__adddf3+0xe6>
   d653e:	f04f 0203 	mov.w	r2, #3
   d6542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6546:	bf18      	it	ne
   d6548:	3203      	addne	r2, #3
   d654a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d654e:	bf18      	it	ne
   d6550:	3203      	addne	r2, #3
   d6552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6556:	f1c2 0320 	rsb	r3, r2, #32
   d655a:	fa00 fc03 	lsl.w	ip, r0, r3
   d655e:	fa20 f002 	lsr.w	r0, r0, r2
   d6562:	fa01 fe03 	lsl.w	lr, r1, r3
   d6566:	ea40 000e 	orr.w	r0, r0, lr
   d656a:	fa21 f102 	lsr.w	r1, r1, r2
   d656e:	4414      	add	r4, r2
   d6570:	e6c1      	b.n	d62f6 <__adddf3+0xe6>
   d6572:	bf00      	nop

000d6574 <__aeabi_dmul>:
   d6574:	b570      	push	{r4, r5, r6, lr}
   d6576:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d657a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d657e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6582:	bf1d      	ittte	ne
   d6584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6588:	ea94 0f0c 	teqne	r4, ip
   d658c:	ea95 0f0c 	teqne	r5, ip
   d6590:	f000 f8de 	bleq	d6750 <__aeabi_dmul+0x1dc>
   d6594:	442c      	add	r4, r5
   d6596:	ea81 0603 	eor.w	r6, r1, r3
   d659a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d659e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d65a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d65a6:	bf18      	it	ne
   d65a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d65ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d65b4:	d038      	beq.n	d6628 <__aeabi_dmul+0xb4>
   d65b6:	fba0 ce02 	umull	ip, lr, r0, r2
   d65ba:	f04f 0500 	mov.w	r5, #0
   d65be:	fbe1 e502 	umlal	lr, r5, r1, r2
   d65c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d65c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d65ca:	f04f 0600 	mov.w	r6, #0
   d65ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   d65d2:	f09c 0f00 	teq	ip, #0
   d65d6:	bf18      	it	ne
   d65d8:	f04e 0e01 	orrne.w	lr, lr, #1
   d65dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d65e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d65e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d65e8:	d204      	bcs.n	d65f4 <__aeabi_dmul+0x80>
   d65ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d65ee:	416d      	adcs	r5, r5
   d65f0:	eb46 0606 	adc.w	r6, r6, r6
   d65f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d65f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d65fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d660c:	bf88      	it	hi
   d660e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6612:	d81e      	bhi.n	d6652 <__aeabi_dmul+0xde>
   d6614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6618:	bf08      	it	eq
   d661a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d661e:	f150 0000 	adcs.w	r0, r0, #0
   d6622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6626:	bd70      	pop	{r4, r5, r6, pc}
   d6628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d662c:	ea46 0101 	orr.w	r1, r6, r1
   d6630:	ea40 0002 	orr.w	r0, r0, r2
   d6634:	ea81 0103 	eor.w	r1, r1, r3
   d6638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d663c:	bfc2      	ittt	gt
   d663e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6646:	bd70      	popgt	{r4, r5, r6, pc}
   d6648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d664c:	f04f 0e00 	mov.w	lr, #0
   d6650:	3c01      	subs	r4, #1
   d6652:	f300 80ab 	bgt.w	d67ac <__aeabi_dmul+0x238>
   d6656:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d665a:	bfde      	ittt	le
   d665c:	2000      	movle	r0, #0
   d665e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6662:	bd70      	pople	{r4, r5, r6, pc}
   d6664:	f1c4 0400 	rsb	r4, r4, #0
   d6668:	3c20      	subs	r4, #32
   d666a:	da35      	bge.n	d66d8 <__aeabi_dmul+0x164>
   d666c:	340c      	adds	r4, #12
   d666e:	dc1b      	bgt.n	d66a8 <__aeabi_dmul+0x134>
   d6670:	f104 0414 	add.w	r4, r4, #20
   d6674:	f1c4 0520 	rsb	r5, r4, #32
   d6678:	fa00 f305 	lsl.w	r3, r0, r5
   d667c:	fa20 f004 	lsr.w	r0, r0, r4
   d6680:	fa01 f205 	lsl.w	r2, r1, r5
   d6684:	ea40 0002 	orr.w	r0, r0, r2
   d6688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d668c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6694:	fa21 f604 	lsr.w	r6, r1, r4
   d6698:	eb42 0106 	adc.w	r1, r2, r6
   d669c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66a0:	bf08      	it	eq
   d66a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66a6:	bd70      	pop	{r4, r5, r6, pc}
   d66a8:	f1c4 040c 	rsb	r4, r4, #12
   d66ac:	f1c4 0520 	rsb	r5, r4, #32
   d66b0:	fa00 f304 	lsl.w	r3, r0, r4
   d66b4:	fa20 f005 	lsr.w	r0, r0, r5
   d66b8:	fa01 f204 	lsl.w	r2, r1, r4
   d66bc:	ea40 0002 	orr.w	r0, r0, r2
   d66c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d66c8:	f141 0100 	adc.w	r1, r1, #0
   d66cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66d0:	bf08      	it	eq
   d66d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66d6:	bd70      	pop	{r4, r5, r6, pc}
   d66d8:	f1c4 0520 	rsb	r5, r4, #32
   d66dc:	fa00 f205 	lsl.w	r2, r0, r5
   d66e0:	ea4e 0e02 	orr.w	lr, lr, r2
   d66e4:	fa20 f304 	lsr.w	r3, r0, r4
   d66e8:	fa01 f205 	lsl.w	r2, r1, r5
   d66ec:	ea43 0302 	orr.w	r3, r3, r2
   d66f0:	fa21 f004 	lsr.w	r0, r1, r4
   d66f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66f8:	fa21 f204 	lsr.w	r2, r1, r4
   d66fc:	ea20 0002 	bic.w	r0, r0, r2
   d6700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6708:	bf08      	it	eq
   d670a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d670e:	bd70      	pop	{r4, r5, r6, pc}
   d6710:	f094 0f00 	teq	r4, #0
   d6714:	d10f      	bne.n	d6736 <__aeabi_dmul+0x1c2>
   d6716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d671a:	0040      	lsls	r0, r0, #1
   d671c:	eb41 0101 	adc.w	r1, r1, r1
   d6720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6724:	bf08      	it	eq
   d6726:	3c01      	subeq	r4, #1
   d6728:	d0f7      	beq.n	d671a <__aeabi_dmul+0x1a6>
   d672a:	ea41 0106 	orr.w	r1, r1, r6
   d672e:	f095 0f00 	teq	r5, #0
   d6732:	bf18      	it	ne
   d6734:	4770      	bxne	lr
   d6736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d673a:	0052      	lsls	r2, r2, #1
   d673c:	eb43 0303 	adc.w	r3, r3, r3
   d6740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6744:	bf08      	it	eq
   d6746:	3d01      	subeq	r5, #1
   d6748:	d0f7      	beq.n	d673a <__aeabi_dmul+0x1c6>
   d674a:	ea43 0306 	orr.w	r3, r3, r6
   d674e:	4770      	bx	lr
   d6750:	ea94 0f0c 	teq	r4, ip
   d6754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6758:	bf18      	it	ne
   d675a:	ea95 0f0c 	teqne	r5, ip
   d675e:	d00c      	beq.n	d677a <__aeabi_dmul+0x206>
   d6760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6764:	bf18      	it	ne
   d6766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d676a:	d1d1      	bne.n	d6710 <__aeabi_dmul+0x19c>
   d676c:	ea81 0103 	eor.w	r1, r1, r3
   d6770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6774:	f04f 0000 	mov.w	r0, #0
   d6778:	bd70      	pop	{r4, r5, r6, pc}
   d677a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d677e:	bf06      	itte	eq
   d6780:	4610      	moveq	r0, r2
   d6782:	4619      	moveq	r1, r3
   d6784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6788:	d019      	beq.n	d67be <__aeabi_dmul+0x24a>
   d678a:	ea94 0f0c 	teq	r4, ip
   d678e:	d102      	bne.n	d6796 <__aeabi_dmul+0x222>
   d6790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6794:	d113      	bne.n	d67be <__aeabi_dmul+0x24a>
   d6796:	ea95 0f0c 	teq	r5, ip
   d679a:	d105      	bne.n	d67a8 <__aeabi_dmul+0x234>
   d679c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d67a0:	bf1c      	itt	ne
   d67a2:	4610      	movne	r0, r2
   d67a4:	4619      	movne	r1, r3
   d67a6:	d10a      	bne.n	d67be <__aeabi_dmul+0x24a>
   d67a8:	ea81 0103 	eor.w	r1, r1, r3
   d67ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67b8:	f04f 0000 	mov.w	r0, #0
   d67bc:	bd70      	pop	{r4, r5, r6, pc}
   d67be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d67c6:	bd70      	pop	{r4, r5, r6, pc}

000d67c8 <__aeabi_ddiv>:
   d67c8:	b570      	push	{r4, r5, r6, lr}
   d67ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d67ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d67d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d67d6:	bf1d      	ittte	ne
   d67d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d67dc:	ea94 0f0c 	teqne	r4, ip
   d67e0:	ea95 0f0c 	teqne	r5, ip
   d67e4:	f000 f8a7 	bleq	d6936 <__aeabi_ddiv+0x16e>
   d67e8:	eba4 0405 	sub.w	r4, r4, r5
   d67ec:	ea81 0e03 	eor.w	lr, r1, r3
   d67f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67f8:	f000 8088 	beq.w	d690c <__aeabi_ddiv+0x144>
   d67fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d680c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6818:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d681c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6820:	429d      	cmp	r5, r3
   d6822:	bf08      	it	eq
   d6824:	4296      	cmpeq	r6, r2
   d6826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d682a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d682e:	d202      	bcs.n	d6836 <__aeabi_ddiv+0x6e>
   d6830:	085b      	lsrs	r3, r3, #1
   d6832:	ea4f 0232 	mov.w	r2, r2, rrx
   d6836:	1ab6      	subs	r6, r6, r2
   d6838:	eb65 0503 	sbc.w	r5, r5, r3
   d683c:	085b      	lsrs	r3, r3, #1
   d683e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d684a:	ebb6 0e02 	subs.w	lr, r6, r2
   d684e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6852:	bf22      	ittt	cs
   d6854:	1ab6      	subcs	r6, r6, r2
   d6856:	4675      	movcs	r5, lr
   d6858:	ea40 000c 	orrcs.w	r0, r0, ip
   d685c:	085b      	lsrs	r3, r3, #1
   d685e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6862:	ebb6 0e02 	subs.w	lr, r6, r2
   d6866:	eb75 0e03 	sbcs.w	lr, r5, r3
   d686a:	bf22      	ittt	cs
   d686c:	1ab6      	subcs	r6, r6, r2
   d686e:	4675      	movcs	r5, lr
   d6870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6874:	085b      	lsrs	r3, r3, #1
   d6876:	ea4f 0232 	mov.w	r2, r2, rrx
   d687a:	ebb6 0e02 	subs.w	lr, r6, r2
   d687e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6882:	bf22      	ittt	cs
   d6884:	1ab6      	subcs	r6, r6, r2
   d6886:	4675      	movcs	r5, lr
   d6888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d688c:	085b      	lsrs	r3, r3, #1
   d688e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6892:	ebb6 0e02 	subs.w	lr, r6, r2
   d6896:	eb75 0e03 	sbcs.w	lr, r5, r3
   d689a:	bf22      	ittt	cs
   d689c:	1ab6      	subcs	r6, r6, r2
   d689e:	4675      	movcs	r5, lr
   d68a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d68a4:	ea55 0e06 	orrs.w	lr, r5, r6
   d68a8:	d018      	beq.n	d68dc <__aeabi_ddiv+0x114>
   d68aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d68ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d68b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d68b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d68ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d68be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d68c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d68c6:	d1c0      	bne.n	d684a <__aeabi_ddiv+0x82>
   d68c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68cc:	d10b      	bne.n	d68e6 <__aeabi_ddiv+0x11e>
   d68ce:	ea41 0100 	orr.w	r1, r1, r0
   d68d2:	f04f 0000 	mov.w	r0, #0
   d68d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d68da:	e7b6      	b.n	d684a <__aeabi_ddiv+0x82>
   d68dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68e0:	bf04      	itt	eq
   d68e2:	4301      	orreq	r1, r0
   d68e4:	2000      	moveq	r0, #0
   d68e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68ea:	bf88      	it	hi
   d68ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68f0:	f63f aeaf 	bhi.w	d6652 <__aeabi_dmul+0xde>
   d68f4:	ebb5 0c03 	subs.w	ip, r5, r3
   d68f8:	bf04      	itt	eq
   d68fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d68fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6902:	f150 0000 	adcs.w	r0, r0, #0
   d6906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d690a:	bd70      	pop	{r4, r5, r6, pc}
   d690c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6918:	bfc2      	ittt	gt
   d691a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d691e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6922:	bd70      	popgt	{r4, r5, r6, pc}
   d6924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6928:	f04f 0e00 	mov.w	lr, #0
   d692c:	3c01      	subs	r4, #1
   d692e:	e690      	b.n	d6652 <__aeabi_dmul+0xde>
   d6930:	ea45 0e06 	orr.w	lr, r5, r6
   d6934:	e68d      	b.n	d6652 <__aeabi_dmul+0xde>
   d6936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d693a:	ea94 0f0c 	teq	r4, ip
   d693e:	bf08      	it	eq
   d6940:	ea95 0f0c 	teqeq	r5, ip
   d6944:	f43f af3b 	beq.w	d67be <__aeabi_dmul+0x24a>
   d6948:	ea94 0f0c 	teq	r4, ip
   d694c:	d10a      	bne.n	d6964 <__aeabi_ddiv+0x19c>
   d694e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6952:	f47f af34 	bne.w	d67be <__aeabi_dmul+0x24a>
   d6956:	ea95 0f0c 	teq	r5, ip
   d695a:	f47f af25 	bne.w	d67a8 <__aeabi_dmul+0x234>
   d695e:	4610      	mov	r0, r2
   d6960:	4619      	mov	r1, r3
   d6962:	e72c      	b.n	d67be <__aeabi_dmul+0x24a>
   d6964:	ea95 0f0c 	teq	r5, ip
   d6968:	d106      	bne.n	d6978 <__aeabi_ddiv+0x1b0>
   d696a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d696e:	f43f aefd 	beq.w	d676c <__aeabi_dmul+0x1f8>
   d6972:	4610      	mov	r0, r2
   d6974:	4619      	mov	r1, r3
   d6976:	e722      	b.n	d67be <__aeabi_dmul+0x24a>
   d6978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d697c:	bf18      	it	ne
   d697e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6982:	f47f aec5 	bne.w	d6710 <__aeabi_dmul+0x19c>
   d6986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d698a:	f47f af0d 	bne.w	d67a8 <__aeabi_dmul+0x234>
   d698e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6992:	f47f aeeb 	bne.w	d676c <__aeabi_dmul+0x1f8>
   d6996:	e712      	b.n	d67be <__aeabi_dmul+0x24a>

000d6998 <__aeabi_d2f>:
   d6998:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d699c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d69a0:	bf24      	itt	cs
   d69a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d69a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d69aa:	d90d      	bls.n	d69c8 <__aeabi_d2f+0x30>
   d69ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d69b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d69b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d69b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d69bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d69c0:	bf08      	it	eq
   d69c2:	f020 0001 	biceq.w	r0, r0, #1
   d69c6:	4770      	bx	lr
   d69c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d69cc:	d121      	bne.n	d6a12 <__aeabi_d2f+0x7a>
   d69ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d69d2:	bfbc      	itt	lt
   d69d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d69d8:	4770      	bxlt	lr
   d69da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d69de:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d69e2:	f1c2 0218 	rsb	r2, r2, #24
   d69e6:	f1c2 0c20 	rsb	ip, r2, #32
   d69ea:	fa10 f30c 	lsls.w	r3, r0, ip
   d69ee:	fa20 f002 	lsr.w	r0, r0, r2
   d69f2:	bf18      	it	ne
   d69f4:	f040 0001 	orrne.w	r0, r0, #1
   d69f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d69fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6a00:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6a04:	ea40 000c 	orr.w	r0, r0, ip
   d6a08:	fa23 f302 	lsr.w	r3, r3, r2
   d6a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6a10:	e7cc      	b.n	d69ac <__aeabi_d2f+0x14>
   d6a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6a16:	d107      	bne.n	d6a28 <__aeabi_d2f+0x90>
   d6a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6a1c:	bf1e      	ittt	ne
   d6a1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6a22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6a26:	4770      	bxne	lr
   d6a28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6a34:	4770      	bx	lr
   d6a36:	bf00      	nop

000d6a38 <__cxa_atexit>:
   d6a38:	b510      	push	{r4, lr}
   d6a3a:	4c05      	ldr	r4, [pc, #20]	; (d6a50 <__cxa_atexit+0x18>)
   d6a3c:	4613      	mov	r3, r2
   d6a3e:	b12c      	cbz	r4, d6a4c <__cxa_atexit+0x14>
   d6a40:	460a      	mov	r2, r1
   d6a42:	4601      	mov	r1, r0
   d6a44:	2002      	movs	r0, #2
   d6a46:	f3af 8000 	nop.w
   d6a4a:	bd10      	pop	{r4, pc}
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	bd10      	pop	{r4, pc}
   d6a50:	00000000 	.word	0x00000000

000d6a54 <localtime>:
   d6a54:	b538      	push	{r3, r4, r5, lr}
   d6a56:	4b07      	ldr	r3, [pc, #28]	; (d6a74 <localtime+0x20>)
   d6a58:	681c      	ldr	r4, [r3, #0]
   d6a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6a5c:	4605      	mov	r5, r0
   d6a5e:	b91b      	cbnz	r3, d6a68 <localtime+0x14>
   d6a60:	2024      	movs	r0, #36	; 0x24
   d6a62:	f7fe f803 	bl	d4a6c <malloc>
   d6a66:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6a68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6a70:	f000 b802 	b.w	d6a78 <localtime_r>
   d6a74:	2003e304 	.word	0x2003e304

000d6a78 <localtime_r>:
   d6a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a7c:	460c      	mov	r4, r1
   d6a7e:	4680      	mov	r8, r0
   d6a80:	f000 fc62 	bl	d7348 <__gettzinfo>
   d6a84:	4621      	mov	r1, r4
   d6a86:	4607      	mov	r7, r0
   d6a88:	4640      	mov	r0, r8
   d6a8a:	f000 fc61 	bl	d7350 <gmtime_r>
   d6a8e:	6946      	ldr	r6, [r0, #20]
   d6a90:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6a94:	07b3      	lsls	r3, r6, #30
   d6a96:	4604      	mov	r4, r0
   d6a98:	d105      	bne.n	d6aa6 <localtime_r+0x2e>
   d6a9a:	2264      	movs	r2, #100	; 0x64
   d6a9c:	fb96 f3f2 	sdiv	r3, r6, r2
   d6aa0:	fb02 6313 	mls	r3, r2, r3, r6
   d6aa4:	b94b      	cbnz	r3, d6aba <localtime_r+0x42>
   d6aa6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6aaa:	fb96 f3f5 	sdiv	r3, r6, r5
   d6aae:	fb05 6513 	mls	r5, r5, r3, r6
   d6ab2:	fab5 f385 	clz	r3, r5
   d6ab6:	095b      	lsrs	r3, r3, #5
   d6ab8:	e000      	b.n	d6abc <localtime_r+0x44>
   d6aba:	2301      	movs	r3, #1
   d6abc:	4a5f      	ldr	r2, [pc, #380]	; (d6c3c <localtime_r+0x1c4>)
   d6abe:	2530      	movs	r5, #48	; 0x30
   d6ac0:	fb05 2503 	mla	r5, r5, r3, r2
   d6ac4:	f000 fa74 	bl	d6fb0 <__tz_lock>
   d6ac8:	f000 fa74 	bl	d6fb4 <_tzset_unlocked>
   d6acc:	4b5c      	ldr	r3, [pc, #368]	; (d6c40 <localtime_r+0x1c8>)
   d6ace:	681b      	ldr	r3, [r3, #0]
   d6ad0:	b1f3      	cbz	r3, d6b10 <localtime_r+0x98>
   d6ad2:	687b      	ldr	r3, [r7, #4]
   d6ad4:	429e      	cmp	r6, r3
   d6ad6:	d105      	bne.n	d6ae4 <localtime_r+0x6c>
   d6ad8:	6839      	ldr	r1, [r7, #0]
   d6ada:	f8d8 3000 	ldr.w	r3, [r8]
   d6ade:	69fa      	ldr	r2, [r7, #28]
   d6ae0:	b941      	cbnz	r1, d6af4 <localtime_r+0x7c>
   d6ae2:	e00a      	b.n	d6afa <localtime_r+0x82>
   d6ae4:	4630      	mov	r0, r6
   d6ae6:	f000 f9bb 	bl	d6e60 <__tzcalc_limits>
   d6aea:	2800      	cmp	r0, #0
   d6aec:	d1f4      	bne.n	d6ad8 <localtime_r+0x60>
   d6aee:	f04f 33ff 	mov.w	r3, #4294967295
   d6af2:	e00d      	b.n	d6b10 <localtime_r+0x98>
   d6af4:	4293      	cmp	r3, r2
   d6af6:	db08      	blt.n	d6b0a <localtime_r+0x92>
   d6af8:	e001      	b.n	d6afe <localtime_r+0x86>
   d6afa:	4293      	cmp	r3, r2
   d6afc:	da07      	bge.n	d6b0e <localtime_r+0x96>
   d6afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6b00:	4293      	cmp	r3, r2
   d6b02:	bfac      	ite	ge
   d6b04:	2300      	movge	r3, #0
   d6b06:	2301      	movlt	r3, #1
   d6b08:	e002      	b.n	d6b10 <localtime_r+0x98>
   d6b0a:	2300      	movs	r3, #0
   d6b0c:	e000      	b.n	d6b10 <localtime_r+0x98>
   d6b0e:	2301      	movs	r3, #1
   d6b10:	6223      	str	r3, [r4, #32]
   d6b12:	6a23      	ldr	r3, [r4, #32]
   d6b14:	2b01      	cmp	r3, #1
   d6b16:	bf0c      	ite	eq
   d6b18:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6b1a:	6a39      	ldrne	r1, [r7, #32]
   d6b1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6b20:	203c      	movs	r0, #60	; 0x3c
   d6b22:	fb91 f6f3 	sdiv	r6, r1, r3
   d6b26:	fb03 1316 	mls	r3, r3, r6, r1
   d6b2a:	6861      	ldr	r1, [r4, #4]
   d6b2c:	fb93 f2f0 	sdiv	r2, r3, r0
   d6b30:	fb00 3012 	mls	r0, r0, r2, r3
   d6b34:	6823      	ldr	r3, [r4, #0]
   d6b36:	1a89      	subs	r1, r1, r2
   d6b38:	68a2      	ldr	r2, [r4, #8]
   d6b3a:	6061      	str	r1, [r4, #4]
   d6b3c:	1a1b      	subs	r3, r3, r0
   d6b3e:	1b92      	subs	r2, r2, r6
   d6b40:	2b3b      	cmp	r3, #59	; 0x3b
   d6b42:	6023      	str	r3, [r4, #0]
   d6b44:	60a2      	str	r2, [r4, #8]
   d6b46:	dd03      	ble.n	d6b50 <localtime_r+0xd8>
   d6b48:	3101      	adds	r1, #1
   d6b4a:	6061      	str	r1, [r4, #4]
   d6b4c:	3b3c      	subs	r3, #60	; 0x3c
   d6b4e:	e004      	b.n	d6b5a <localtime_r+0xe2>
   d6b50:	2b00      	cmp	r3, #0
   d6b52:	da03      	bge.n	d6b5c <localtime_r+0xe4>
   d6b54:	3901      	subs	r1, #1
   d6b56:	6061      	str	r1, [r4, #4]
   d6b58:	333c      	adds	r3, #60	; 0x3c
   d6b5a:	6023      	str	r3, [r4, #0]
   d6b5c:	6863      	ldr	r3, [r4, #4]
   d6b5e:	2b3b      	cmp	r3, #59	; 0x3b
   d6b60:	dd03      	ble.n	d6b6a <localtime_r+0xf2>
   d6b62:	3201      	adds	r2, #1
   d6b64:	60a2      	str	r2, [r4, #8]
   d6b66:	3b3c      	subs	r3, #60	; 0x3c
   d6b68:	e004      	b.n	d6b74 <localtime_r+0xfc>
   d6b6a:	2b00      	cmp	r3, #0
   d6b6c:	da03      	bge.n	d6b76 <localtime_r+0xfe>
   d6b6e:	3a01      	subs	r2, #1
   d6b70:	60a2      	str	r2, [r4, #8]
   d6b72:	333c      	adds	r3, #60	; 0x3c
   d6b74:	6063      	str	r3, [r4, #4]
   d6b76:	68a3      	ldr	r3, [r4, #8]
   d6b78:	2b17      	cmp	r3, #23
   d6b7a:	dd22      	ble.n	d6bc2 <localtime_r+0x14a>
   d6b7c:	69e2      	ldr	r2, [r4, #28]
   d6b7e:	3201      	adds	r2, #1
   d6b80:	61e2      	str	r2, [r4, #28]
   d6b82:	69a2      	ldr	r2, [r4, #24]
   d6b84:	3201      	adds	r2, #1
   d6b86:	2a06      	cmp	r2, #6
   d6b88:	bfc8      	it	gt
   d6b8a:	2200      	movgt	r2, #0
   d6b8c:	61a2      	str	r2, [r4, #24]
   d6b8e:	68e2      	ldr	r2, [r4, #12]
   d6b90:	3b18      	subs	r3, #24
   d6b92:	3201      	adds	r2, #1
   d6b94:	60a3      	str	r3, [r4, #8]
   d6b96:	6923      	ldr	r3, [r4, #16]
   d6b98:	60e2      	str	r2, [r4, #12]
   d6b9a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6b9e:	428a      	cmp	r2, r1
   d6ba0:	dd46      	ble.n	d6c30 <localtime_r+0x1b8>
   d6ba2:	3301      	adds	r3, #1
   d6ba4:	2b0c      	cmp	r3, #12
   d6ba6:	bf0c      	ite	eq
   d6ba8:	6963      	ldreq	r3, [r4, #20]
   d6baa:	6123      	strne	r3, [r4, #16]
   d6bac:	eba2 0201 	sub.w	r2, r2, r1
   d6bb0:	60e2      	str	r2, [r4, #12]
   d6bb2:	bf01      	itttt	eq
   d6bb4:	3301      	addeq	r3, #1
   d6bb6:	2200      	moveq	r2, #0
   d6bb8:	6122      	streq	r2, [r4, #16]
   d6bba:	6163      	streq	r3, [r4, #20]
   d6bbc:	bf08      	it	eq
   d6bbe:	61e2      	streq	r2, [r4, #28]
   d6bc0:	e036      	b.n	d6c30 <localtime_r+0x1b8>
   d6bc2:	2b00      	cmp	r3, #0
   d6bc4:	da34      	bge.n	d6c30 <localtime_r+0x1b8>
   d6bc6:	69e2      	ldr	r2, [r4, #28]
   d6bc8:	3a01      	subs	r2, #1
   d6bca:	61e2      	str	r2, [r4, #28]
   d6bcc:	69a2      	ldr	r2, [r4, #24]
   d6bce:	3a01      	subs	r2, #1
   d6bd0:	bf48      	it	mi
   d6bd2:	2206      	movmi	r2, #6
   d6bd4:	61a2      	str	r2, [r4, #24]
   d6bd6:	68e2      	ldr	r2, [r4, #12]
   d6bd8:	3318      	adds	r3, #24
   d6bda:	3a01      	subs	r2, #1
   d6bdc:	60e2      	str	r2, [r4, #12]
   d6bde:	60a3      	str	r3, [r4, #8]
   d6be0:	bb32      	cbnz	r2, d6c30 <localtime_r+0x1b8>
   d6be2:	6923      	ldr	r3, [r4, #16]
   d6be4:	3b01      	subs	r3, #1
   d6be6:	d401      	bmi.n	d6bec <localtime_r+0x174>
   d6be8:	6123      	str	r3, [r4, #16]
   d6bea:	e01d      	b.n	d6c28 <localtime_r+0x1b0>
   d6bec:	230b      	movs	r3, #11
   d6bee:	6123      	str	r3, [r4, #16]
   d6bf0:	6963      	ldr	r3, [r4, #20]
   d6bf2:	1e5a      	subs	r2, r3, #1
   d6bf4:	f012 0f03 	tst.w	r2, #3
   d6bf8:	6162      	str	r2, [r4, #20]
   d6bfa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6bfe:	d105      	bne.n	d6c0c <localtime_r+0x194>
   d6c00:	2164      	movs	r1, #100	; 0x64
   d6c02:	fb93 f2f1 	sdiv	r2, r3, r1
   d6c06:	fb01 3212 	mls	r2, r1, r2, r3
   d6c0a:	b94a      	cbnz	r2, d6c20 <localtime_r+0x1a8>
   d6c0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6c10:	fb93 f2f1 	sdiv	r2, r3, r1
   d6c14:	fb01 3312 	mls	r3, r1, r2, r3
   d6c18:	fab3 f383 	clz	r3, r3
   d6c1c:	095b      	lsrs	r3, r3, #5
   d6c1e:	e000      	b.n	d6c22 <localtime_r+0x1aa>
   d6c20:	2301      	movs	r3, #1
   d6c22:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6c26:	61e3      	str	r3, [r4, #28]
   d6c28:	6923      	ldr	r3, [r4, #16]
   d6c2a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6c2e:	60e3      	str	r3, [r4, #12]
   d6c30:	f000 f9bf 	bl	d6fb2 <__tz_unlock>
   d6c34:	4620      	mov	r0, r4
   d6c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c3a:	bf00      	nop
   d6c3c:	000d7908 	.word	0x000d7908
   d6c40:	2003e7e4 	.word	0x2003e7e4

000d6c44 <memcpy>:
   d6c44:	b510      	push	{r4, lr}
   d6c46:	1e43      	subs	r3, r0, #1
   d6c48:	440a      	add	r2, r1
   d6c4a:	4291      	cmp	r1, r2
   d6c4c:	d004      	beq.n	d6c58 <memcpy+0x14>
   d6c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c52:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c56:	e7f8      	b.n	d6c4a <memcpy+0x6>
   d6c58:	bd10      	pop	{r4, pc}

000d6c5a <memset>:
   d6c5a:	4402      	add	r2, r0
   d6c5c:	4603      	mov	r3, r0
   d6c5e:	4293      	cmp	r3, r2
   d6c60:	d002      	beq.n	d6c68 <memset+0xe>
   d6c62:	f803 1b01 	strb.w	r1, [r3], #1
   d6c66:	e7fa      	b.n	d6c5e <memset+0x4>
   d6c68:	4770      	bx	lr
	...

000d6c6c <srand>:
   d6c6c:	b538      	push	{r3, r4, r5, lr}
   d6c6e:	4b12      	ldr	r3, [pc, #72]	; (d6cb8 <srand+0x4c>)
   d6c70:	681c      	ldr	r4, [r3, #0]
   d6c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c74:	4605      	mov	r5, r0
   d6c76:	b9d3      	cbnz	r3, d6cae <srand+0x42>
   d6c78:	2018      	movs	r0, #24
   d6c7a:	f7fd fef7 	bl	d4a6c <malloc>
   d6c7e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c82:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c84:	8003      	strh	r3, [r0, #0]
   d6c86:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c8a:	8043      	strh	r3, [r0, #2]
   d6c8c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c90:	8083      	strh	r3, [r0, #4]
   d6c92:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c96:	80c3      	strh	r3, [r0, #6]
   d6c98:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c9c:	8103      	strh	r3, [r0, #8]
   d6c9e:	2305      	movs	r3, #5
   d6ca0:	8143      	strh	r3, [r0, #10]
   d6ca2:	230b      	movs	r3, #11
   d6ca4:	8183      	strh	r3, [r0, #12]
   d6ca6:	2201      	movs	r2, #1
   d6ca8:	2300      	movs	r3, #0
   d6caa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	611d      	str	r5, [r3, #16]
   d6cb4:	615a      	str	r2, [r3, #20]
   d6cb6:	bd38      	pop	{r3, r4, r5, pc}
   d6cb8:	2003e304 	.word	0x2003e304

000d6cbc <strcmp>:
   d6cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6cc4:	2a01      	cmp	r2, #1
   d6cc6:	bf28      	it	cs
   d6cc8:	429a      	cmpcs	r2, r3
   d6cca:	d0f7      	beq.n	d6cbc <strcmp>
   d6ccc:	1ad0      	subs	r0, r2, r3
   d6cce:	4770      	bx	lr

000d6cd0 <strcpy>:
   d6cd0:	4603      	mov	r3, r0
   d6cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6cd6:	f803 2b01 	strb.w	r2, [r3], #1
   d6cda:	2a00      	cmp	r2, #0
   d6cdc:	d1f9      	bne.n	d6cd2 <strcpy+0x2>
   d6cde:	4770      	bx	lr

000d6ce0 <strdup>:
   d6ce0:	4b02      	ldr	r3, [pc, #8]	; (d6cec <strdup+0xc>)
   d6ce2:	4601      	mov	r1, r0
   d6ce4:	6818      	ldr	r0, [r3, #0]
   d6ce6:	f000 b803 	b.w	d6cf0 <_strdup_r>
   d6cea:	bf00      	nop
   d6cec:	2003e304 	.word	0x2003e304

000d6cf0 <_strdup_r>:
   d6cf0:	b570      	push	{r4, r5, r6, lr}
   d6cf2:	4606      	mov	r6, r0
   d6cf4:	4608      	mov	r0, r1
   d6cf6:	460c      	mov	r4, r1
   d6cf8:	f000 f80d 	bl	d6d16 <strlen>
   d6cfc:	1c45      	adds	r5, r0, #1
   d6cfe:	4629      	mov	r1, r5
   d6d00:	4630      	mov	r0, r6
   d6d02:	f7fd fedb 	bl	d4abc <_malloc_r>
   d6d06:	4606      	mov	r6, r0
   d6d08:	b118      	cbz	r0, d6d12 <_strdup_r+0x22>
   d6d0a:	462a      	mov	r2, r5
   d6d0c:	4621      	mov	r1, r4
   d6d0e:	f7ff ff99 	bl	d6c44 <memcpy>
   d6d12:	4630      	mov	r0, r6
   d6d14:	bd70      	pop	{r4, r5, r6, pc}

000d6d16 <strlen>:
   d6d16:	4603      	mov	r3, r0
   d6d18:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d1c:	2a00      	cmp	r2, #0
   d6d1e:	d1fb      	bne.n	d6d18 <strlen+0x2>
   d6d20:	1a18      	subs	r0, r3, r0
   d6d22:	3801      	subs	r0, #1
   d6d24:	4770      	bx	lr

000d6d26 <strncmp>:
   d6d26:	b530      	push	{r4, r5, lr}
   d6d28:	b182      	cbz	r2, d6d4c <strncmp+0x26>
   d6d2a:	1e45      	subs	r5, r0, #1
   d6d2c:	3901      	subs	r1, #1
   d6d2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6d32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6d36:	42a3      	cmp	r3, r4
   d6d38:	d106      	bne.n	d6d48 <strncmp+0x22>
   d6d3a:	43ec      	mvns	r4, r5
   d6d3c:	4414      	add	r4, r2
   d6d3e:	42e0      	cmn	r0, r4
   d6d40:	d001      	beq.n	d6d46 <strncmp+0x20>
   d6d42:	2b00      	cmp	r3, #0
   d6d44:	d1f3      	bne.n	d6d2e <strncmp+0x8>
   d6d46:	461c      	mov	r4, r3
   d6d48:	1b18      	subs	r0, r3, r4
   d6d4a:	bd30      	pop	{r4, r5, pc}
   d6d4c:	4610      	mov	r0, r2
   d6d4e:	bd30      	pop	{r4, r5, pc}

000d6d50 <_strtoul_r>:
   d6d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d54:	4680      	mov	r8, r0
   d6d56:	483c      	ldr	r0, [pc, #240]	; (d6e48 <_strtoul_r+0xf8>)
   d6d58:	f8d0 9000 	ldr.w	r9, [r0]
   d6d5c:	460e      	mov	r6, r1
   d6d5e:	4635      	mov	r5, r6
   d6d60:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6d64:	eb09 0004 	add.w	r0, r9, r4
   d6d68:	7840      	ldrb	r0, [r0, #1]
   d6d6a:	f000 0008 	and.w	r0, r0, #8
   d6d6e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6d72:	b108      	cbz	r0, d6d78 <_strtoul_r+0x28>
   d6d74:	462e      	mov	r6, r5
   d6d76:	e7f2      	b.n	d6d5e <_strtoul_r+0xe>
   d6d78:	2c2d      	cmp	r4, #45	; 0x2d
   d6d7a:	d103      	bne.n	d6d84 <_strtoul_r+0x34>
   d6d7c:	1cb5      	adds	r5, r6, #2
   d6d7e:	7874      	ldrb	r4, [r6, #1]
   d6d80:	2701      	movs	r7, #1
   d6d82:	e003      	b.n	d6d8c <_strtoul_r+0x3c>
   d6d84:	2c2b      	cmp	r4, #43	; 0x2b
   d6d86:	bf04      	itt	eq
   d6d88:	7874      	ldrbeq	r4, [r6, #1]
   d6d8a:	1cb5      	addeq	r5, r6, #2
   d6d8c:	b113      	cbz	r3, d6d94 <_strtoul_r+0x44>
   d6d8e:	2b10      	cmp	r3, #16
   d6d90:	d10a      	bne.n	d6da8 <_strtoul_r+0x58>
   d6d92:	e053      	b.n	d6e3c <_strtoul_r+0xec>
   d6d94:	2c30      	cmp	r4, #48	; 0x30
   d6d96:	d14f      	bne.n	d6e38 <_strtoul_r+0xe8>
   d6d98:	7828      	ldrb	r0, [r5, #0]
   d6d9a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6d9e:	2858      	cmp	r0, #88	; 0x58
   d6da0:	d145      	bne.n	d6e2e <_strtoul_r+0xde>
   d6da2:	786c      	ldrb	r4, [r5, #1]
   d6da4:	2310      	movs	r3, #16
   d6da6:	3502      	adds	r5, #2
   d6da8:	f04f 3cff 	mov.w	ip, #4294967295
   d6dac:	2600      	movs	r6, #0
   d6dae:	fbbc fcf3 	udiv	ip, ip, r3
   d6db2:	fb03 fa0c 	mul.w	sl, r3, ip
   d6db6:	ea6f 0a0a 	mvn.w	sl, sl
   d6dba:	4630      	mov	r0, r6
   d6dbc:	eb09 0e04 	add.w	lr, r9, r4
   d6dc0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6dc4:	f01e 0f04 	tst.w	lr, #4
   d6dc8:	d001      	beq.n	d6dce <_strtoul_r+0x7e>
   d6dca:	3c30      	subs	r4, #48	; 0x30
   d6dcc:	e00b      	b.n	d6de6 <_strtoul_r+0x96>
   d6dce:	f01e 0e03 	ands.w	lr, lr, #3
   d6dd2:	d01a      	beq.n	d6e0a <_strtoul_r+0xba>
   d6dd4:	f1be 0f01 	cmp.w	lr, #1
   d6dd8:	bf0c      	ite	eq
   d6dda:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6dde:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6de2:	ebce 0404 	rsb	r4, lr, r4
   d6de6:	42a3      	cmp	r3, r4
   d6de8:	dd0f      	ble.n	d6e0a <_strtoul_r+0xba>
   d6dea:	2e00      	cmp	r6, #0
   d6dec:	db08      	blt.n	d6e00 <_strtoul_r+0xb0>
   d6dee:	4560      	cmp	r0, ip
   d6df0:	d806      	bhi.n	d6e00 <_strtoul_r+0xb0>
   d6df2:	d101      	bne.n	d6df8 <_strtoul_r+0xa8>
   d6df4:	4554      	cmp	r4, sl
   d6df6:	dc03      	bgt.n	d6e00 <_strtoul_r+0xb0>
   d6df8:	fb03 4000 	mla	r0, r3, r0, r4
   d6dfc:	2601      	movs	r6, #1
   d6dfe:	e001      	b.n	d6e04 <_strtoul_r+0xb4>
   d6e00:	f04f 36ff 	mov.w	r6, #4294967295
   d6e04:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6e08:	e7d8      	b.n	d6dbc <_strtoul_r+0x6c>
   d6e0a:	2e00      	cmp	r6, #0
   d6e0c:	da07      	bge.n	d6e1e <_strtoul_r+0xce>
   d6e0e:	2322      	movs	r3, #34	; 0x22
   d6e10:	f8c8 3000 	str.w	r3, [r8]
   d6e14:	f04f 30ff 	mov.w	r0, #4294967295
   d6e18:	b92a      	cbnz	r2, d6e26 <_strtoul_r+0xd6>
   d6e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e1e:	b107      	cbz	r7, d6e22 <_strtoul_r+0xd2>
   d6e20:	4240      	negs	r0, r0
   d6e22:	b172      	cbz	r2, d6e42 <_strtoul_r+0xf2>
   d6e24:	b106      	cbz	r6, d6e28 <_strtoul_r+0xd8>
   d6e26:	1e69      	subs	r1, r5, #1
   d6e28:	6011      	str	r1, [r2, #0]
   d6e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e2e:	2430      	movs	r4, #48	; 0x30
   d6e30:	2b00      	cmp	r3, #0
   d6e32:	d1b9      	bne.n	d6da8 <_strtoul_r+0x58>
   d6e34:	2308      	movs	r3, #8
   d6e36:	e7b7      	b.n	d6da8 <_strtoul_r+0x58>
   d6e38:	230a      	movs	r3, #10
   d6e3a:	e7b5      	b.n	d6da8 <_strtoul_r+0x58>
   d6e3c:	2c30      	cmp	r4, #48	; 0x30
   d6e3e:	d0ab      	beq.n	d6d98 <_strtoul_r+0x48>
   d6e40:	e7b2      	b.n	d6da8 <_strtoul_r+0x58>
   d6e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e46:	bf00      	nop
   d6e48:	2003e2a0 	.word	0x2003e2a0

000d6e4c <strtoul>:
   d6e4c:	4613      	mov	r3, r2
   d6e4e:	460a      	mov	r2, r1
   d6e50:	4601      	mov	r1, r0
   d6e52:	4802      	ldr	r0, [pc, #8]	; (d6e5c <strtoul+0x10>)
   d6e54:	6800      	ldr	r0, [r0, #0]
   d6e56:	f7ff bf7b 	b.w	d6d50 <_strtoul_r>
   d6e5a:	bf00      	nop
   d6e5c:	2003e304 	.word	0x2003e304

000d6e60 <__tzcalc_limits>:
   d6e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e64:	4604      	mov	r4, r0
   d6e66:	f000 fa6f 	bl	d7348 <__gettzinfo>
   d6e6a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6e6e:	429c      	cmp	r4, r3
   d6e70:	f340 8096 	ble.w	d6fa0 <__tzcalc_limits+0x140>
   d6e74:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6e78:	18e3      	adds	r3, r4, r3
   d6e7a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6e7e:	109b      	asrs	r3, r3, #2
   d6e80:	f240 156d 	movw	r5, #365	; 0x16d
   d6e84:	fb05 3502 	mla	r5, r5, r2, r3
   d6e88:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6e8c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6e90:	fb92 f3f3 	sdiv	r3, r2, r3
   d6e94:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6e98:	442b      	add	r3, r5
   d6e9a:	18a5      	adds	r5, r4, r2
   d6e9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6ea0:	fb95 f5f2 	sdiv	r5, r5, r2
   d6ea4:	441d      	add	r5, r3
   d6ea6:	2364      	movs	r3, #100	; 0x64
   d6ea8:	fb94 f7f2 	sdiv	r7, r4, r2
   d6eac:	fb94 f6f3 	sdiv	r6, r4, r3
   d6eb0:	fb02 4717 	mls	r7, r2, r7, r4
   d6eb4:	fb03 4616 	mls	r6, r3, r6, r4
   d6eb8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6ebc:	fab7 fe87 	clz	lr, r7
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	f004 0303 	and.w	r3, r4, #3
   d6ec6:	6044      	str	r4, [r0, #4]
   d6ec8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6ecc:	4601      	mov	r1, r0
   d6ece:	9300      	str	r3, [sp, #0]
   d6ed0:	f04f 0c07 	mov.w	ip, #7
   d6ed4:	7a0b      	ldrb	r3, [r1, #8]
   d6ed6:	2b4a      	cmp	r3, #74	; 0x4a
   d6ed8:	d10e      	bne.n	d6ef8 <__tzcalc_limits+0x98>
   d6eda:	694b      	ldr	r3, [r1, #20]
   d6edc:	9a00      	ldr	r2, [sp, #0]
   d6ede:	18ec      	adds	r4, r5, r3
   d6ee0:	b902      	cbnz	r2, d6ee4 <__tzcalc_limits+0x84>
   d6ee2:	b906      	cbnz	r6, d6ee6 <__tzcalc_limits+0x86>
   d6ee4:	b927      	cbnz	r7, d6ef0 <__tzcalc_limits+0x90>
   d6ee6:	2b3b      	cmp	r3, #59	; 0x3b
   d6ee8:	bfd4      	ite	le
   d6eea:	2300      	movle	r3, #0
   d6eec:	2301      	movgt	r3, #1
   d6eee:	e000      	b.n	d6ef2 <__tzcalc_limits+0x92>
   d6ef0:	2300      	movs	r3, #0
   d6ef2:	4423      	add	r3, r4
   d6ef4:	3b01      	subs	r3, #1
   d6ef6:	e03f      	b.n	d6f78 <__tzcalc_limits+0x118>
   d6ef8:	2b44      	cmp	r3, #68	; 0x44
   d6efa:	d102      	bne.n	d6f02 <__tzcalc_limits+0xa2>
   d6efc:	694b      	ldr	r3, [r1, #20]
   d6efe:	442b      	add	r3, r5
   d6f00:	e03a      	b.n	d6f78 <__tzcalc_limits+0x118>
   d6f02:	9b00      	ldr	r3, [sp, #0]
   d6f04:	b92b      	cbnz	r3, d6f12 <__tzcalc_limits+0xb2>
   d6f06:	2e00      	cmp	r6, #0
   d6f08:	bf0c      	ite	eq
   d6f0a:	46f0      	moveq	r8, lr
   d6f0c:	f04f 0801 	movne.w	r8, #1
   d6f10:	e000      	b.n	d6f14 <__tzcalc_limits+0xb4>
   d6f12:	46f0      	mov	r8, lr
   d6f14:	4b24      	ldr	r3, [pc, #144]	; (d6fa8 <__tzcalc_limits+0x148>)
   d6f16:	68cc      	ldr	r4, [r1, #12]
   d6f18:	2230      	movs	r2, #48	; 0x30
   d6f1a:	fb02 3808 	mla	r8, r2, r8, r3
   d6f1e:	f1a8 0a04 	sub.w	sl, r8, #4
   d6f22:	46a9      	mov	r9, r5
   d6f24:	2301      	movs	r3, #1
   d6f26:	42a3      	cmp	r3, r4
   d6f28:	da04      	bge.n	d6f34 <__tzcalc_limits+0xd4>
   d6f2a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d6f2e:	3301      	adds	r3, #1
   d6f30:	44d9      	add	r9, fp
   d6f32:	e7f8      	b.n	d6f26 <__tzcalc_limits+0xc6>
   d6f34:	f109 0304 	add.w	r3, r9, #4
   d6f38:	fb93 fbfc 	sdiv	fp, r3, ip
   d6f3c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6f40:	2c01      	cmp	r4, #1
   d6f42:	ebca 0a03 	rsb	sl, sl, r3
   d6f46:	694b      	ldr	r3, [r1, #20]
   d6f48:	bfb8      	it	lt
   d6f4a:	2401      	movlt	r4, #1
   d6f4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6f50:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6f54:	690b      	ldr	r3, [r1, #16]
   d6f56:	f104 34ff 	add.w	r4, r4, #4294967295
   d6f5a:	f103 33ff 	add.w	r3, r3, #4294967295
   d6f5e:	bf48      	it	mi
   d6f60:	f10a 0a07 	addmi.w	sl, sl, #7
   d6f64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6f68:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6f6c:	4453      	add	r3, sl
   d6f6e:	42a3      	cmp	r3, r4
   d6f70:	db01      	blt.n	d6f76 <__tzcalc_limits+0x116>
   d6f72:	3b07      	subs	r3, #7
   d6f74:	e7fb      	b.n	d6f6e <__tzcalc_limits+0x10e>
   d6f76:	444b      	add	r3, r9
   d6f78:	698c      	ldr	r4, [r1, #24]
   d6f7a:	4a0c      	ldr	r2, [pc, #48]	; (d6fac <__tzcalc_limits+0x14c>)
   d6f7c:	fb02 4303 	mla	r3, r2, r3, r4
   d6f80:	6a0c      	ldr	r4, [r1, #32]
   d6f82:	4423      	add	r3, r4
   d6f84:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6f88:	9b01      	ldr	r3, [sp, #4]
   d6f8a:	4299      	cmp	r1, r3
   d6f8c:	d1a2      	bne.n	d6ed4 <__tzcalc_limits+0x74>
   d6f8e:	69c3      	ldr	r3, [r0, #28]
   d6f90:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6f92:	4293      	cmp	r3, r2
   d6f94:	bfac      	ite	ge
   d6f96:	2300      	movge	r3, #0
   d6f98:	2301      	movlt	r3, #1
   d6f9a:	6003      	str	r3, [r0, #0]
   d6f9c:	2001      	movs	r0, #1
   d6f9e:	e000      	b.n	d6fa2 <__tzcalc_limits+0x142>
   d6fa0:	2000      	movs	r0, #0
   d6fa2:	b003      	add	sp, #12
   d6fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fa8:	000d7908 	.word	0x000d7908
   d6fac:	00015180 	.word	0x00015180

000d6fb0 <__tz_lock>:
   d6fb0:	4770      	bx	lr

000d6fb2 <__tz_unlock>:
   d6fb2:	4770      	bx	lr

000d6fb4 <_tzset_unlocked>:
   d6fb4:	4b01      	ldr	r3, [pc, #4]	; (d6fbc <_tzset_unlocked+0x8>)
   d6fb6:	6818      	ldr	r0, [r3, #0]
   d6fb8:	f000 b802 	b.w	d6fc0 <_tzset_unlocked_r>
   d6fbc:	2003e304 	.word	0x2003e304

000d6fc0 <_tzset_unlocked_r>:
   d6fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fc4:	b08d      	sub	sp, #52	; 0x34
   d6fc6:	4607      	mov	r7, r0
   d6fc8:	f000 f9be 	bl	d7348 <__gettzinfo>
   d6fcc:	49b0      	ldr	r1, [pc, #704]	; (d7290 <_tzset_unlocked_r+0x2d0>)
   d6fce:	4eb1      	ldr	r6, [pc, #708]	; (d7294 <_tzset_unlocked_r+0x2d4>)
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	4638      	mov	r0, r7
   d6fd4:	f000 f9b0 	bl	d7338 <_getenv_r>
   d6fd8:	4605      	mov	r5, r0
   d6fda:	b960      	cbnz	r0, d6ff6 <_tzset_unlocked_r+0x36>
   d6fdc:	4bae      	ldr	r3, [pc, #696]	; (d7298 <_tzset_unlocked_r+0x2d8>)
   d6fde:	4aaf      	ldr	r2, [pc, #700]	; (d729c <_tzset_unlocked_r+0x2dc>)
   d6fe0:	6018      	str	r0, [r3, #0]
   d6fe2:	4baf      	ldr	r3, [pc, #700]	; (d72a0 <_tzset_unlocked_r+0x2e0>)
   d6fe4:	6018      	str	r0, [r3, #0]
   d6fe6:	4baf      	ldr	r3, [pc, #700]	; (d72a4 <_tzset_unlocked_r+0x2e4>)
   d6fe8:	6830      	ldr	r0, [r6, #0]
   d6fea:	601a      	str	r2, [r3, #0]
   d6fec:	605a      	str	r2, [r3, #4]
   d6fee:	f7fd fd45 	bl	d4a7c <free>
   d6ff2:	6035      	str	r5, [r6, #0]
   d6ff4:	e148      	b.n	d7288 <_tzset_unlocked_r+0x2c8>
   d6ff6:	6831      	ldr	r1, [r6, #0]
   d6ff8:	b979      	cbnz	r1, d701a <_tzset_unlocked_r+0x5a>
   d6ffa:	6830      	ldr	r0, [r6, #0]
   d6ffc:	f7fd fd3e 	bl	d4a7c <free>
   d7000:	4628      	mov	r0, r5
   d7002:	f7ff fe88 	bl	d6d16 <strlen>
   d7006:	1c41      	adds	r1, r0, #1
   d7008:	4638      	mov	r0, r7
   d700a:	f7fd fd57 	bl	d4abc <_malloc_r>
   d700e:	6030      	str	r0, [r6, #0]
   d7010:	b148      	cbz	r0, d7026 <_tzset_unlocked_r+0x66>
   d7012:	4629      	mov	r1, r5
   d7014:	f7ff fe5c 	bl	d6cd0 <strcpy>
   d7018:	e005      	b.n	d7026 <_tzset_unlocked_r+0x66>
   d701a:	f7ff fe4f 	bl	d6cbc <strcmp>
   d701e:	2800      	cmp	r0, #0
   d7020:	f000 8132 	beq.w	d7288 <_tzset_unlocked_r+0x2c8>
   d7024:	e7e9      	b.n	d6ffa <_tzset_unlocked_r+0x3a>
   d7026:	782b      	ldrb	r3, [r5, #0]
   d7028:	4a9f      	ldr	r2, [pc, #636]	; (d72a8 <_tzset_unlocked_r+0x2e8>)
   d702a:	49a0      	ldr	r1, [pc, #640]	; (d72ac <_tzset_unlocked_r+0x2ec>)
   d702c:	2b3a      	cmp	r3, #58	; 0x3a
   d702e:	bf08      	it	eq
   d7030:	3501      	addeq	r5, #1
   d7032:	ae0a      	add	r6, sp, #40	; 0x28
   d7034:	4633      	mov	r3, r6
   d7036:	4628      	mov	r0, r5
   d7038:	f7fd fd30 	bl	d4a9c <siscanf>
   d703c:	2800      	cmp	r0, #0
   d703e:	f340 8123 	ble.w	d7288 <_tzset_unlocked_r+0x2c8>
   d7042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7044:	18ef      	adds	r7, r5, r3
   d7046:	5ceb      	ldrb	r3, [r5, r3]
   d7048:	2b2d      	cmp	r3, #45	; 0x2d
   d704a:	d103      	bne.n	d7054 <_tzset_unlocked_r+0x94>
   d704c:	3701      	adds	r7, #1
   d704e:	f04f 35ff 	mov.w	r5, #4294967295
   d7052:	e003      	b.n	d705c <_tzset_unlocked_r+0x9c>
   d7054:	2b2b      	cmp	r3, #43	; 0x2b
   d7056:	bf08      	it	eq
   d7058:	3701      	addeq	r7, #1
   d705a:	2501      	movs	r5, #1
   d705c:	f10d 0a20 	add.w	sl, sp, #32
   d7060:	f10d 0b1e 	add.w	fp, sp, #30
   d7064:	f04f 0800 	mov.w	r8, #0
   d7068:	9603      	str	r6, [sp, #12]
   d706a:	f8cd a008 	str.w	sl, [sp, #8]
   d706e:	9601      	str	r6, [sp, #4]
   d7070:	f8cd b000 	str.w	fp, [sp]
   d7074:	4633      	mov	r3, r6
   d7076:	aa07      	add	r2, sp, #28
   d7078:	498d      	ldr	r1, [pc, #564]	; (d72b0 <_tzset_unlocked_r+0x2f0>)
   d707a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d707e:	4638      	mov	r0, r7
   d7080:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7084:	f7fd fd0a 	bl	d4a9c <siscanf>
   d7088:	4540      	cmp	r0, r8
   d708a:	f340 80fd 	ble.w	d7288 <_tzset_unlocked_r+0x2c8>
   d708e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7092:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7096:	f8df 9224 	ldr.w	r9, [pc, #548]	; d72bc <_tzset_unlocked_r+0x2fc>
   d709a:	213c      	movs	r1, #60	; 0x3c
   d709c:	fb01 3302 	mla	r3, r1, r2, r3
   d70a0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d70a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d70a8:	fb01 3302 	mla	r3, r1, r2, r3
   d70ac:	435d      	muls	r5, r3
   d70ae:	6225      	str	r5, [r4, #32]
   d70b0:	4d7c      	ldr	r5, [pc, #496]	; (d72a4 <_tzset_unlocked_r+0x2e4>)
   d70b2:	4b7d      	ldr	r3, [pc, #500]	; (d72a8 <_tzset_unlocked_r+0x2e8>)
   d70b4:	602b      	str	r3, [r5, #0]
   d70b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d70b8:	497c      	ldr	r1, [pc, #496]	; (d72ac <_tzset_unlocked_r+0x2ec>)
   d70ba:	441f      	add	r7, r3
   d70bc:	464a      	mov	r2, r9
   d70be:	4633      	mov	r3, r6
   d70c0:	4638      	mov	r0, r7
   d70c2:	f7fd fceb 	bl	d4a9c <siscanf>
   d70c6:	4540      	cmp	r0, r8
   d70c8:	dc08      	bgt.n	d70dc <_tzset_unlocked_r+0x11c>
   d70ca:	682b      	ldr	r3, [r5, #0]
   d70cc:	606b      	str	r3, [r5, #4]
   d70ce:	4b72      	ldr	r3, [pc, #456]	; (d7298 <_tzset_unlocked_r+0x2d8>)
   d70d0:	6a22      	ldr	r2, [r4, #32]
   d70d2:	601a      	str	r2, [r3, #0]
   d70d4:	4b72      	ldr	r3, [pc, #456]	; (d72a0 <_tzset_unlocked_r+0x2e0>)
   d70d6:	f8c3 8000 	str.w	r8, [r3]
   d70da:	e0d5      	b.n	d7288 <_tzset_unlocked_r+0x2c8>
   d70dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d70de:	f8c5 9004 	str.w	r9, [r5, #4]
   d70e2:	18fd      	adds	r5, r7, r3
   d70e4:	5cfb      	ldrb	r3, [r7, r3]
   d70e6:	2b2d      	cmp	r3, #45	; 0x2d
   d70e8:	d103      	bne.n	d70f2 <_tzset_unlocked_r+0x132>
   d70ea:	3501      	adds	r5, #1
   d70ec:	f04f 37ff 	mov.w	r7, #4294967295
   d70f0:	e003      	b.n	d70fa <_tzset_unlocked_r+0x13a>
   d70f2:	2b2b      	cmp	r3, #43	; 0x2b
   d70f4:	bf08      	it	eq
   d70f6:	3501      	addeq	r5, #1
   d70f8:	2701      	movs	r7, #1
   d70fa:	2300      	movs	r3, #0
   d70fc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7100:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7104:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7108:	930a      	str	r3, [sp, #40]	; 0x28
   d710a:	9603      	str	r6, [sp, #12]
   d710c:	f8cd a008 	str.w	sl, [sp, #8]
   d7110:	9601      	str	r6, [sp, #4]
   d7112:	f8cd b000 	str.w	fp, [sp]
   d7116:	4633      	mov	r3, r6
   d7118:	aa07      	add	r2, sp, #28
   d711a:	4965      	ldr	r1, [pc, #404]	; (d72b0 <_tzset_unlocked_r+0x2f0>)
   d711c:	4628      	mov	r0, r5
   d711e:	f7fd fcbd 	bl	d4a9c <siscanf>
   d7122:	2800      	cmp	r0, #0
   d7124:	dc04      	bgt.n	d7130 <_tzset_unlocked_r+0x170>
   d7126:	6a23      	ldr	r3, [r4, #32]
   d7128:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d712c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d712e:	e00e      	b.n	d714e <_tzset_unlocked_r+0x18e>
   d7130:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7134:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7138:	213c      	movs	r1, #60	; 0x3c
   d713a:	fb01 3302 	mla	r3, r1, r2, r3
   d713e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7142:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7146:	fb01 3302 	mla	r3, r1, r2, r3
   d714a:	435f      	muls	r7, r3
   d714c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d714e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7150:	4627      	mov	r7, r4
   d7152:	441d      	add	r5, r3
   d7154:	f04f 0900 	mov.w	r9, #0
   d7158:	782b      	ldrb	r3, [r5, #0]
   d715a:	2b2c      	cmp	r3, #44	; 0x2c
   d715c:	bf08      	it	eq
   d715e:	3501      	addeq	r5, #1
   d7160:	f895 8000 	ldrb.w	r8, [r5]
   d7164:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7168:	d126      	bne.n	d71b8 <_tzset_unlocked_r+0x1f8>
   d716a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d716e:	9302      	str	r3, [sp, #8]
   d7170:	ab09      	add	r3, sp, #36	; 0x24
   d7172:	9300      	str	r3, [sp, #0]
   d7174:	9603      	str	r6, [sp, #12]
   d7176:	9601      	str	r6, [sp, #4]
   d7178:	4633      	mov	r3, r6
   d717a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d717e:	494d      	ldr	r1, [pc, #308]	; (d72b4 <_tzset_unlocked_r+0x2f4>)
   d7180:	4628      	mov	r0, r5
   d7182:	f7fd fc8b 	bl	d4a9c <siscanf>
   d7186:	2803      	cmp	r0, #3
   d7188:	d17e      	bne.n	d7288 <_tzset_unlocked_r+0x2c8>
   d718a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d718e:	1e4b      	subs	r3, r1, #1
   d7190:	2b0b      	cmp	r3, #11
   d7192:	d879      	bhi.n	d7288 <_tzset_unlocked_r+0x2c8>
   d7194:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7198:	1e53      	subs	r3, r2, #1
   d719a:	2b04      	cmp	r3, #4
   d719c:	d874      	bhi.n	d7288 <_tzset_unlocked_r+0x2c8>
   d719e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d71a2:	2b06      	cmp	r3, #6
   d71a4:	d870      	bhi.n	d7288 <_tzset_unlocked_r+0x2c8>
   d71a6:	f887 8008 	strb.w	r8, [r7, #8]
   d71aa:	60f9      	str	r1, [r7, #12]
   d71ac:	613a      	str	r2, [r7, #16]
   d71ae:	617b      	str	r3, [r7, #20]
   d71b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d71b2:	eb05 0803 	add.w	r8, r5, r3
   d71b6:	e02a      	b.n	d720e <_tzset_unlocked_r+0x24e>
   d71b8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d71bc:	bf06      	itte	eq
   d71be:	3501      	addeq	r5, #1
   d71c0:	4643      	moveq	r3, r8
   d71c2:	2344      	movne	r3, #68	; 0x44
   d71c4:	220a      	movs	r2, #10
   d71c6:	a90b      	add	r1, sp, #44	; 0x2c
   d71c8:	4628      	mov	r0, r5
   d71ca:	9305      	str	r3, [sp, #20]
   d71cc:	f7ff fe3e 	bl	d6e4c <strtoul>
   d71d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d71d4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d71d8:	4545      	cmp	r5, r8
   d71da:	9b05      	ldr	r3, [sp, #20]
   d71dc:	d114      	bne.n	d7208 <_tzset_unlocked_r+0x248>
   d71de:	234d      	movs	r3, #77	; 0x4d
   d71e0:	f1b9 0f00 	cmp.w	r9, #0
   d71e4:	d107      	bne.n	d71f6 <_tzset_unlocked_r+0x236>
   d71e6:	7223      	strb	r3, [r4, #8]
   d71e8:	2303      	movs	r3, #3
   d71ea:	60e3      	str	r3, [r4, #12]
   d71ec:	2302      	movs	r3, #2
   d71ee:	6123      	str	r3, [r4, #16]
   d71f0:	f8c4 9014 	str.w	r9, [r4, #20]
   d71f4:	e00b      	b.n	d720e <_tzset_unlocked_r+0x24e>
   d71f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d71fa:	230b      	movs	r3, #11
   d71fc:	62a3      	str	r3, [r4, #40]	; 0x28
   d71fe:	2301      	movs	r3, #1
   d7200:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7202:	2300      	movs	r3, #0
   d7204:	6323      	str	r3, [r4, #48]	; 0x30
   d7206:	e002      	b.n	d720e <_tzset_unlocked_r+0x24e>
   d7208:	b280      	uxth	r0, r0
   d720a:	723b      	strb	r3, [r7, #8]
   d720c:	6178      	str	r0, [r7, #20]
   d720e:	2302      	movs	r3, #2
   d7210:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7214:	2300      	movs	r3, #0
   d7216:	f8ad 301e 	strh.w	r3, [sp, #30]
   d721a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d721e:	930a      	str	r3, [sp, #40]	; 0x28
   d7220:	f898 3000 	ldrb.w	r3, [r8]
   d7224:	2b2f      	cmp	r3, #47	; 0x2f
   d7226:	d10b      	bne.n	d7240 <_tzset_unlocked_r+0x280>
   d7228:	9603      	str	r6, [sp, #12]
   d722a:	f8cd a008 	str.w	sl, [sp, #8]
   d722e:	9601      	str	r6, [sp, #4]
   d7230:	f8cd b000 	str.w	fp, [sp]
   d7234:	4633      	mov	r3, r6
   d7236:	aa07      	add	r2, sp, #28
   d7238:	491f      	ldr	r1, [pc, #124]	; (d72b8 <_tzset_unlocked_r+0x2f8>)
   d723a:	4640      	mov	r0, r8
   d723c:	f7fd fc2e 	bl	d4a9c <siscanf>
   d7240:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7244:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7248:	213c      	movs	r1, #60	; 0x3c
   d724a:	fb01 3302 	mla	r3, r1, r2, r3
   d724e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7252:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7256:	fb01 3302 	mla	r3, r1, r2, r3
   d725a:	61bb      	str	r3, [r7, #24]
   d725c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d725e:	f109 0901 	add.w	r9, r9, #1
   d7262:	f1b9 0f02 	cmp.w	r9, #2
   d7266:	4445      	add	r5, r8
   d7268:	f107 071c 	add.w	r7, r7, #28
   d726c:	f47f af74 	bne.w	d7158 <_tzset_unlocked_r+0x198>
   d7270:	6860      	ldr	r0, [r4, #4]
   d7272:	f7ff fdf5 	bl	d6e60 <__tzcalc_limits>
   d7276:	4b08      	ldr	r3, [pc, #32]	; (d7298 <_tzset_unlocked_r+0x2d8>)
   d7278:	6a22      	ldr	r2, [r4, #32]
   d727a:	601a      	str	r2, [r3, #0]
   d727c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d727e:	1a9b      	subs	r3, r3, r2
   d7280:	4a07      	ldr	r2, [pc, #28]	; (d72a0 <_tzset_unlocked_r+0x2e0>)
   d7282:	bf18      	it	ne
   d7284:	2301      	movne	r3, #1
   d7286:	6013      	str	r3, [r2, #0]
   d7288:	b00d      	add	sp, #52	; 0x34
   d728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d728e:	bf00      	nop
   d7290:	000d7968 	.word	0x000d7968
   d7294:	2003e7e0 	.word	0x2003e7e0
   d7298:	2003e7e8 	.word	0x2003e7e8
   d729c:	000d796b 	.word	0x000d796b
   d72a0:	2003e7e4 	.word	0x2003e7e4
   d72a4:	2003e308 	.word	0x2003e308
   d72a8:	2003e7d3 	.word	0x2003e7d3
   d72ac:	000d796f 	.word	0x000d796f
   d72b0:	000d7992 	.word	0x000d7992
   d72b4:	000d797e 	.word	0x000d797e
   d72b8:	000d7991 	.word	0x000d7991
   d72bc:	2003e7c8 	.word	0x2003e7c8

000d72c0 <_findenv_r>:
   d72c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72c4:	4607      	mov	r7, r0
   d72c6:	468b      	mov	fp, r1
   d72c8:	4690      	mov	r8, r2
   d72ca:	f000 f8d9 	bl	d7480 <__env_lock>
   d72ce:	4b19      	ldr	r3, [pc, #100]	; (d7334 <_findenv_r+0x74>)
   d72d0:	681d      	ldr	r5, [r3, #0]
   d72d2:	469a      	mov	sl, r3
   d72d4:	b13d      	cbz	r5, d72e6 <_findenv_r+0x26>
   d72d6:	465c      	mov	r4, fp
   d72d8:	4623      	mov	r3, r4
   d72da:	f813 2b01 	ldrb.w	r2, [r3], #1
   d72de:	b142      	cbz	r2, d72f2 <_findenv_r+0x32>
   d72e0:	2a3d      	cmp	r2, #61	; 0x3d
   d72e2:	461c      	mov	r4, r3
   d72e4:	d1f8      	bne.n	d72d8 <_findenv_r+0x18>
   d72e6:	4638      	mov	r0, r7
   d72e8:	f000 f8cb 	bl	d7482 <__env_unlock>
   d72ec:	2000      	movs	r0, #0
   d72ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72f2:	ebcb 0404 	rsb	r4, fp, r4
   d72f6:	46a9      	mov	r9, r5
   d72f8:	f859 0b04 	ldr.w	r0, [r9], #4
   d72fc:	2800      	cmp	r0, #0
   d72fe:	d0f2      	beq.n	d72e6 <_findenv_r+0x26>
   d7300:	4622      	mov	r2, r4
   d7302:	4659      	mov	r1, fp
   d7304:	f7ff fd0f 	bl	d6d26 <strncmp>
   d7308:	b988      	cbnz	r0, d732e <_findenv_r+0x6e>
   d730a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d730e:	191e      	adds	r6, r3, r4
   d7310:	5d1b      	ldrb	r3, [r3, r4]
   d7312:	2b3d      	cmp	r3, #61	; 0x3d
   d7314:	d10b      	bne.n	d732e <_findenv_r+0x6e>
   d7316:	f8da 3000 	ldr.w	r3, [sl]
   d731a:	1aed      	subs	r5, r5, r3
   d731c:	10ad      	asrs	r5, r5, #2
   d731e:	4638      	mov	r0, r7
   d7320:	f8c8 5000 	str.w	r5, [r8]
   d7324:	f000 f8ad 	bl	d7482 <__env_unlock>
   d7328:	1c70      	adds	r0, r6, #1
   d732a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d732e:	464d      	mov	r5, r9
   d7330:	e7e1      	b.n	d72f6 <_findenv_r+0x36>
   d7332:	bf00      	nop
   d7334:	2003e350 	.word	0x2003e350

000d7338 <_getenv_r>:
   d7338:	b507      	push	{r0, r1, r2, lr}
   d733a:	aa01      	add	r2, sp, #4
   d733c:	f7ff ffc0 	bl	d72c0 <_findenv_r>
   d7340:	b003      	add	sp, #12
   d7342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7348 <__gettzinfo>:
   d7348:	4800      	ldr	r0, [pc, #0]	; (d734c <__gettzinfo+0x4>)
   d734a:	4770      	bx	lr
   d734c:	2003e310 	.word	0x2003e310

000d7350 <gmtime_r>:
   d7350:	6802      	ldr	r2, [r0, #0]
   d7352:	4b47      	ldr	r3, [pc, #284]	; (d7470 <gmtime_r+0x120>)
   d7354:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7356:	fb92 f4f3 	sdiv	r4, r2, r3
   d735a:	fb03 2214 	mls	r2, r3, r4, r2
   d735e:	2a00      	cmp	r2, #0
   d7360:	bfbc      	itt	lt
   d7362:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7366:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d736a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d736e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7372:	fb92 f3f0 	sdiv	r3, r2, r0
   d7376:	fb00 2213 	mls	r2, r0, r3, r2
   d737a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d737e:	bfac      	ite	ge
   d7380:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7384:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7388:	608b      	str	r3, [r1, #8]
   d738a:	fb92 f3f0 	sdiv	r3, r2, r0
   d738e:	fb00 2213 	mls	r2, r0, r3, r2
   d7392:	604b      	str	r3, [r1, #4]
   d7394:	600a      	str	r2, [r1, #0]
   d7396:	2307      	movs	r3, #7
   d7398:	1ce2      	adds	r2, r4, #3
   d739a:	fb92 f3f3 	sdiv	r3, r2, r3
   d739e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d73a2:	1ad3      	subs	r3, r2, r3
   d73a4:	618b      	str	r3, [r1, #24]
   d73a6:	4b33      	ldr	r3, [pc, #204]	; (d7474 <gmtime_r+0x124>)
   d73a8:	4d33      	ldr	r5, [pc, #204]	; (d7478 <gmtime_r+0x128>)
   d73aa:	fb94 f5f5 	sdiv	r5, r4, r5
   d73ae:	fb03 4405 	mla	r4, r3, r5, r4
   d73b2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d73b6:	fbb4 f2f2 	udiv	r2, r4, r2
   d73ba:	4422      	add	r2, r4
   d73bc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d73c0:	fbb4 f3f7 	udiv	r3, r4, r7
   d73c4:	1ad2      	subs	r2, r2, r3
   d73c6:	482d      	ldr	r0, [pc, #180]	; (d747c <gmtime_r+0x12c>)
   d73c8:	fbb4 f0f0 	udiv	r0, r4, r0
   d73cc:	f648 6694 	movw	r6, #36500	; 0x8e94
   d73d0:	1a13      	subs	r3, r2, r0
   d73d2:	fbb3 f6f6 	udiv	r6, r3, r6
   d73d6:	4434      	add	r4, r6
   d73d8:	f240 126d 	movw	r2, #365	; 0x16d
   d73dc:	fbb3 f0f2 	udiv	r0, r3, r2
   d73e0:	fbb3 f3f7 	udiv	r3, r3, r7
   d73e4:	1ae3      	subs	r3, r4, r3
   d73e6:	fb02 3310 	mls	r3, r2, r0, r3
   d73ea:	2499      	movs	r4, #153	; 0x99
   d73ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d73f0:	3202      	adds	r2, #2
   d73f2:	fbb2 f2f4 	udiv	r2, r2, r4
   d73f6:	2a0a      	cmp	r2, #10
   d73f8:	fb04 f402 	mul.w	r4, r4, r2
   d73fc:	f104 0602 	add.w	r6, r4, #2
   d7400:	f04f 0405 	mov.w	r4, #5
   d7404:	fbb6 f4f4 	udiv	r4, r6, r4
   d7408:	bf34      	ite	cc
   d740a:	2602      	movcc	r6, #2
   d740c:	f06f 0609 	mvncs.w	r6, #9
   d7410:	4416      	add	r6, r2
   d7412:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7416:	fb02 0505 	mla	r5, r2, r5, r0
   d741a:	1c5f      	adds	r7, r3, #1
   d741c:	2e01      	cmp	r6, #1
   d741e:	bf98      	it	ls
   d7420:	3501      	addls	r5, #1
   d7422:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7426:	eba7 0704 	sub.w	r7, r7, r4
   d742a:	d302      	bcc.n	d7432 <gmtime_r+0xe2>
   d742c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7430:	e014      	b.n	d745c <gmtime_r+0x10c>
   d7432:	0782      	lsls	r2, r0, #30
   d7434:	d105      	bne.n	d7442 <gmtime_r+0xf2>
   d7436:	2464      	movs	r4, #100	; 0x64
   d7438:	fbb0 f2f4 	udiv	r2, r0, r4
   d743c:	fb04 0212 	mls	r2, r4, r2, r0
   d7440:	b94a      	cbnz	r2, d7456 <gmtime_r+0x106>
   d7442:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7446:	fbb0 f4f2 	udiv	r4, r0, r2
   d744a:	fb02 0014 	mls	r0, r2, r4, r0
   d744e:	fab0 f280 	clz	r2, r0
   d7452:	0952      	lsrs	r2, r2, #5
   d7454:	e000      	b.n	d7458 <gmtime_r+0x108>
   d7456:	2201      	movs	r2, #1
   d7458:	333b      	adds	r3, #59	; 0x3b
   d745a:	441a      	add	r2, r3
   d745c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7460:	2300      	movs	r3, #0
   d7462:	61ca      	str	r2, [r1, #28]
   d7464:	614d      	str	r5, [r1, #20]
   d7466:	610e      	str	r6, [r1, #16]
   d7468:	60cf      	str	r7, [r1, #12]
   d746a:	620b      	str	r3, [r1, #32]
   d746c:	4608      	mov	r0, r1
   d746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7470:	00015180 	.word	0x00015180
   d7474:	fffdc54f 	.word	0xfffdc54f
   d7478:	00023ab1 	.word	0x00023ab1
   d747c:	00023ab0 	.word	0x00023ab0

000d7480 <__env_lock>:
   d7480:	4770      	bx	lr

000d7482 <__env_unlock>:
   d7482:	4770      	bx	lr

000d7484 <dynalib_user>:
   d7484:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7494:	0000 0000 6574 706d 7265 7461 7275 0065     ....temperature.
   d74a4:	7568 696d 6964 7974 5500 6470 7461 6e69     humidity.Updatin
   d74b4:	2067 6c63 6d69 7461 2065 6164 6174 6620     g climate data f
   d74c4:	6c69 0065 6c63 6d69 7461 4165 6576 6172     ile.climateAvera
   d74d4:	6567 7055 6164 6574 0000 0000               geUpdate....

000d74e0 <_ZTVN5spark12NetworkClassE>:
	...
   d74e8:	4adf 000d 4ae9 000d 4af3 000d 4afd 000d     .J...J...J...J..
   d74f8:	4b07 000d 4b13 000d 4b1f 000d 4b2b 000d     .K...K...K..+K..
   d7508:	4b33 000d 4b3d 000d 4b47 000d               3K..=K..GK..

000d7514 <_ZTVN5spark9MeshClassE>:
	...
   d751c:	4c87 000d 4c7d 000d 4c73 000d 4c69 000d     .L..}L..sL..iL..
   d752c:	4c5d 000d 4c51 000d 4c45 000d 4c3d 000d     ]L..QL..EL..=L..
   d753c:	4c33 000d 4c29 000d 4b47 000d               3L..)L..GK..

000d7548 <_ZTVN5spark9WiFiClassE>:
	...
   d7550:	4e03 000d 4df9 000d 4def 000d 4da5 000d     .N...M...M...M..
   d7560:	4de3 000d 4dd7 000d 4dcb 000d 4dc3 000d     .M...M...M...M..
   d7570:	4db9 000d 4daf 000d 4b47 000d               .M...M..GK..

000d757c <_ZTV7TwoWire>:
	...
   d7584:	4e21 000d 4e6b 000d 4e43 000d 4e23 000d     !N..kN..CN..#N..
   d7594:	4e4b 000d 4e53 000d 4e5b 000d 4e63 000d     KN..SN..[N..cN..

000d75a4 <_ZTV11USARTSerial>:
	...
   d75ac:	4f4f 000d 4f9f 000d 4fad 000d 5a75 000d     OO...O...O..uZ..
   d75bc:	4f63 000d 4f85 000d 4f71 000d 4f99 000d     cO...O..qO...O..
   d75cc:	4f51 000d 4f55 000d                         QO..UO..

000d75d4 <_ZTV9USBSerial>:
	...
   d75dc:	505b 000d 50ab 000d 50b9 000d 5a75 000d     [P...P...P..uZ..
   d75ec:	5097 000d 505d 000d 5073 000d 50a5 000d     .P..]P..sP...P..
   d75fc:	5089 000d 5057 000d                         .P..WP..

000d7604 <_ZTV9IPAddress>:
	...
   d760c:	5171 000d 5161 000d 5163 000d               qQ..aQ..cQ..

000d7618 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7620:	5245 000d 524b 000d 528f 000d 5259 000d     ER..KR...R..YR..
   d7630:	5247 000d 2b25 3330 3a64 3025 7532 2500     GR..%+03d:%02u.%
   d7640:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d7650:	7a25 6100 6373 6974 656d 6200 7561 0064     %z.asctime.baud.
   d7660:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d7670:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d7680:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d7690:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d76a0:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d76b0:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d76c0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d76d0:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
   d76e0:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d76f0:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d7700:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
   d7710:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   d7720:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d7730:	0072 6170 696e 0063 6c61 006c 6977 6972     r.panic.all.wiri
   d7740:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d7750:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d7760:	6920 766e 6c61 6469 002e 0000                invalid....

000d776c <_ZTVN5spark13EthernetClassE>:
	...
   d7774:	5e8f 000d 5e85 000d 5e7b 000d 5e71 000d     .^...^..{^..q^..
   d7784:	5e65 000d 5e59 000d 5e4d 000d 5e45 000d     e^..Y^..M^..E^..
   d7794:	5e3b 000d 5e31 000d 4b47 000d               ;^..1^..GK..

000d77a0 <_ZSt7nothrow>:
	...

000d77a1 <_ctype_>:
   d77a1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d77b1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d77c1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d77d1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d77e1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d77f1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7801:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7811:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7821:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d78a4 <__sf_fake_stdin>:
	...

000d78c4 <__sf_fake_stdout>:
	...

000d78e4 <__sf_fake_stderr>:
	...
   d7904:	0043 0000                                   C...

000d7908 <__month_lengths>:
   d7908:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7918:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7928:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7938:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7948:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7958:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7968:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7978:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7988:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7998:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d79a4 <link_const_variable_data_end>:
   d79a4:	000d42ed 	.word	0x000d42ed
   d79a8:	000d468d 	.word	0x000d468d
   d79ac:	000d4c15 	.word	0x000d4c15
   d79b0:	000d4d55 	.word	0x000d4d55
   d79b4:	000d4e0d 	.word	0x000d4e0d
   d79b8:	000d5909 	.word	0x000d5909
   d79bc:	000d5a51 	.word	0x000d5a51
   d79c0:	000d5a65 	.word	0x000d5a65
   d79c4:	000d5b19 	.word	0x000d5b19
   d79c8:	000d5dfd 	.word	0x000d5dfd
   d79cc:	000d5e99 	.word	0x000d5e99
   d79d0:	000d5f75 	.word	0x000d5f75
   d79d4:	000d5ff9 	.word	0x000d5ff9
   d79d8:	000d60bd 	.word	0x000d60bd
   d79dc:	000d6181 	.word	0x000d6181
